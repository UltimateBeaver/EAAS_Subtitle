1
00:00:00,000 --> 00:00:03,000
因为这是我们的最后一节，我们还有一个问题。我刚刚

2
00:00:03,003 --> 00:00:07,003
假设，就像我说过的，在你实现控制器动作时， 

3
00:00:07,007 --> 00:00:09,007
它要到哪里查找提供用的视图？

4
00:00:09,009 --> 00:00:12,009
这句话的隐藏含义是假设必须提供

5
00:00:12,012 --> 00:00:16,012
某个内容。这就是我的问题，为什么会这样？

6
00:00:16,016 --> 00:00:20,016
为什么SaaS应用程序的每次互动结果

7
00:00:20,020 --> 00:00:23,020
都必须提供一些内容？有种说法是

8
00:00:23,023 --> 00:00:25,023
因为约定优于配置。这是你操作的默认方式。

9
00:00:25,025 --> 00:00:29,025
如果你遵循这个方法，那么你就不必特别去做其他事。

10
00:00:29,029 --> 00:00:32,029
第二，这是因为HTTP是请求—应答协议。

11
00:00:32,032 --> 00:00:36,032
第三，因为MVC暗示，

12
00:00:36,036 --> 00:00:39,036
每个动作都应提供各自的视图， 

13
00:00:39,039 --> 00:00:43,039
又或者以上都是真的。为什么SaaS 

14
00:00:43,043 --> 00:00:46,043
应用程序的每次互动结果都必须展示一些内容？

15
00:00:46,046 --> 00:00:53,046
第一轮投票……第一轮投票是意见各异呀。

16
00:00:53,053 --> 00:00:54,053
我们有几分钟来好好聊一聊这个结果。

17
00:00:54,054 --> 00:00:59,054
我要给你们个暗示让你们讨论。

18
00:00:59,059 --> 00:01:02,059
这就是提请你们讨论的暗示。注意我没说

19
00:01:02,062 --> 00:01:07,062
……暗示会引起讨论。我没问为什么Rails应用程序的

20
00:01:07,067 --> 00:01:11,067
每次互动必定会怎么怎么。同样，我也没有问， 

21
00:01:11,071 --> 00:01:13,071
为什么MVC的每次互动必定会怎么怎么。

22
00:01:13,073 --> 00:01:16,073
我问的是每次SaaS应用程序的互动。这是个非常普遍的问题。

23
00:01:16,076 --> 00:01:33,076
我大概想说的是，每次不引起错误的互动， 

24
00:01:33,093 --> 00:01:37,093
不过大家知道我的意思。

25
00:01:37,097 --> 00:01:47,097
再投一次票。现在投票，现在投票，现在投票，投票然后……

26
00:01:47,107 --> 00:01:52,107
让我们就这个问题讲解答案吧。

27
00:01:52,112 --> 00:01:54,112
为什么SaaS应用程序的每次互动最后

28
00:01:54,114 --> 00:01:58,114
都要展现一些内容？我讨厌过分简化，不过让我们回到最开始的时候。

29
00:01:58,118 --> 00:02:02,118
HTTP是请求—应答协议。如果你发出请求， 

30
00:02:02,122 --> 00:02:05,122
就会要求应答。你答复的唯一途径就是

31
00:02:05,125 --> 00:02:08,125
提供某个内容供HTTP回发。

32
00:02:08,128 --> 00:02:10,128
如果用户要你做傻事，你提交的东西也许

33
00:02:10,130 --> 00:02:13,130
会是个错误页面，或网络服务器会提供

34
00:02:13,133 --> 00:02:15,133
一个错误页面，里面写着“严禁你这么干”， 

35
00:02:15,135 --> 00:02:19,135
或“你没登陆，”或“你见鬼去吧。”

36
00:02:19,139 --> 00:02:21,139
它总得说点什么，否则就会出现错误。

37
00:02:21,141 --> 00:02:25,141
必须回答问题。约定优于配置，

38
00:02:25,145 --> 00:02:28,145
这点很好，正因为有这条规定，你才能在

39
00:02:28,148 --> 00:02:31,148
构建答复时省去告诉Rails去哪里

40
00:02:31,151 --> 00:02:35,151
找多个片段的时间。MVC暗示， 

41
00:02:35,155 --> 00:02:38,155
每个动作都会提供视图。你可以实现这一点， 

42
00:02:38,158 --> 00:02:40,158
不过严格意义上讲这并不正确。MVC并不是一个严格的模型，

43
00:02:40,160 --> 00:02:42,160
因为什么大家还记得吧，我们曾说过你

44
00:02:42,162 --> 00:02:45,162
可以使用MVC构建像P2P应用程序之类的东西。P2P应用程序

45
00:02:45,165 --> 00:02:48,165
并不遵守客户与服务器间的请求应答模式。

46
00:02:48,168 --> 00:02:51,168
这个问题比那些更普遍。这全因为HTTP 

47
00:02:51,171 --> 00:02:54,171
的设计基础是一个人提出请求，或是客户

48
00:02:54,174 --> 00:02:57,174
提出请求，服务器就响应。

49
00:02:57,177 --> 00:02:59,177
因此，抵达服务器的任何内容最后都会

50
00:02:59,179 --> 00:03:02,179
到达目的地，然后得到响应

51
00:03:02,182 --> 00:03:05,182
“这儿就是答案。”就到这里。


