1
00:00:00,000 --> 00:00:03,000
好啦，继续上课。我们之前讲了模型视图控制器，

2
00:00:03,003 --> 00:00:05,003
我们讲了模型，接下来要讲控制器。

3
00:00:05,005 --> 00:00:09,005
实际上，控制器最重要的东西就是名为

4
00:00:09,009 --> 00:00:11,009
REST的专业概念，这是大家常讲一个概念。

5
00:00:11,011 --> 00:00:14,011
不过它的基础知识不难理解，

6
00:00:14,014 --> 00:00:17,014
事实上也不难学。

7
00:00:17,017 --> 00:00:22,017
这个REST真正解决的问题是

8
00:00:22,022 --> 00:00:24,022
“假定我们相信面向服务的架构是

9
00:00:24,024 --> 00:00:28,024
在网站上组织服务的最好方法，那么是哪些设计

10
00:00:28,028 --> 00:00:31,028
能够使我们的应用程序更易

11
00:00:31,031 --> 00:00:34,031
成为面向服务的架构组成部分呢？”抑或者，换个角度看， 

12
00:00:34,034 --> 00:00:36,034
{“哪些是不利于应用程序加入面向服务

13
00:00:36,036 --> 00:00:39,036
架构的不良设计决定呢？”}

14
00:00:39,039 --> 00:00:43,039
继续我们的课程，我们现在还处于中间层，

15
00:00:43,043 --> 00:00:46,043
而这里是在应用服务器内进行动作的地方。

16
00:00:46,046 --> 00:00:49,046
我们现在要来看看控制器、关系控制器、URI

17
00:00:49,049 --> 00:00:54,049
及REST。REST代表

18
00:00:54,054 --> 00:00:58,054
表述性状态转移，又一个重要的专业术语。

19
00:00:58,058 --> 00:01:01,058
罗伊•菲尔丁于2000年在他的博士论文中讨论了这个术语。

20
00:01:01,061 --> 00:01:05,061
不过我这里使用的词和他用到的不是同一个。

21
00:01:05,065 --> 00:01:08,065
我会试着讲解这个词含义的精髓，

22
00:01:08,068 --> 00:01:11,068
因为这个概念相对简单直接。

23
00:01:11,071 --> 00:01:15,071
这个概念是“不要把URI看成声明一个页面或是声明你要做的动作。

24
00:01:15,075 --> 00:01:18,075
而是把它想成是在声明资源， 

25
00:01:18,078 --> 00:01:21,078
和你要对那个资源进行的操作。”资源这个词

26
00:01:21,081 --> 00:01:24,081
在这里的定义非常宽泛。我的想法是

27
00:01:24,084 --> 00:01:28,084
资源可以是电影，可以是烂土豆内电影的所有相关信息。

28
00:01:28,088 --> 00:01:31,088
资源可以是我们所知的所有电影清单。

29
00:01:31,091 --> 00:01:34,091
资源可以是符合某个条件、名字中含有

30
00:01:34,094 --> 00:01:37,094
特定字符串、或含有特定MPAA额定值的

31
00:01:37,097 --> 00:01:40,097
所有电影的清单。

32
00:01:40,100 --> 00:01:44,100
这些都是资源。事实上，资源甚至可以是

33
00:01:44,104 --> 00:01:46,104
对尝试创建新电影的响应。在我创建新电影时，

34
00:01:46,106 --> 00:01:49,106
我已经创建新的资源，我需要知道的只有“资源创建成功与否？”

35
00:01:49,109 --> 00:01:53,109
现在开始想想你的URI正在表达你想要

36
00:01:53,113 --> 00:01:56,113
添加的资源和东西，这个表达方法采用的

37
00:01:56,116 --> 00:01:59,116
是相对独立的方式。事实上，

38
00:01:59,119 --> 00:02:03,119
维基百科有关REST的文章， 

39
00:02:03,123 --> 00:02:06,123
我不太清楚是不是还含有这句话，不过之前确实有这句。“REST其实就是在

40
00:02:06,126 --> 00:02:09,126
功能成功实现网页服务后对相应功能

41
00:02:09,129 --> 00:02:12,129
的一种事后说明。”所以，如果你有一项服务，

42
00:02:12,132 --> 00:02:15,132
如果对于面向服务的架构服务，其擦做符合这些原理，

43
00:02:15,135 --> 00:02:18,135
那么我们说这是一个

44
00:02:18,138 --> 00:02:22,138
实现表述性状态转移的服务，它含有实现表述性状态转移的应用程序界面。

45
00:02:22,142 --> 00:02:25,142
同时，在此服务中，可实现表述性状态转移的URI会命名你的操作， 

46
00:02:25,145 --> 00:02:28,145
以及你添加的资源。要是我们展示个实在的例子，就更好理解了。

47
00:02:28,148 --> 00:02:33,148
所以，为此我要来个非常简短的介绍，

48
00:02:33,153 --> 00:02:35,153
这是因为等我们再来研究Rails时， 

49
00:02:35,155 --> 00:02:39,155
我们会详细讲解这个问题，以便解释

50
00:02:39,159 --> 00:02:42,159
借助Rails你是如何在URI与控制器间建立映射的。

51
00:02:42,162 --> 00:02:44,162
因为大家要记住，控制器是所有动作产生的地方，好啦。

52
00:02:44,164 --> 00:02:47,164
当请求从用户那里进来时，控制器就是

53
00:02:47,167 --> 00:02:50,167
第一个迎接它的地方，在准备好将东西返给用户时，

54
00:02:50,170 --> 00:02:57,170
控制器会调节互动。

55
00:02:57,177 --> 00:03:01,177
所以Rails给了你什么，帮助你完成这一点呢？RAIL内的路径

56
00:03:01,181 --> 00:03:05,181
基本上就是以HTTP方法从URI，像是GET（查）或POST（改）

57
00:03:05,185 --> 00:03:09,185
或PUT（增），向控制器动作的映射。这儿有些例子介绍表述性状态转移。

58
00:03:09,189 --> 00:03:14,189
如果我说点什么像，“GET/电影/3”这可能是表示数据库内

59
00:03:14,194 --> 00:03:17,194
含有ID3的随便什么电影的方式，

60
00:03:17,197 --> 00:03:20,197
我想要相关信息。如今无须担心多数终端客户

61
00:03:20,200 --> 00:03:23,200
不会知道应用程序后面某个随即数据库内各项的ID。

62
00:03:23,203 --> 00:03:27,203
只要想想这个观点，

63
00:03:27,207 --> 00:03:29,207
“假定我们知道资源且

64
00:03:29,209 --> 00:03:33,209
该资源具有特有的名称，我们要怎样构建资源请求，

65
00:03:33,213 --> 00:03:35,213
才能命名我们想要操作的项目，还有我们

66
00:03:35,215 --> 00:03:40,215
想要对这一项做什么。”这儿还有另一个示例。我提交表格，

67
00:03:40,220 --> 00:03:43,220
同时我改动URL“/电影”，此时解释可能是“

68
00:03:43,223 --> 00:03:46,223
我正在创建新电影，这儿有我打算使用的数据、

69
00:03:46,226 --> 00:03:49,226
用于增加新电影对象属性的数据。”

70
00:03:49,229 --> 00:03:54,229
我还可以说，“我要定义‘PUT/电影/5’来表示，‘如果有个

71
00:03:54,234 --> 00:03:58,234
ID为5的电影且它存在于数据库内，这儿

72
00:03:58,238 --> 00:04:01,238
有些新数据可用于替换这部电影的

73
00:04:01,241 --> 00:04:03,241
当前属性。’”现在，如果你之前做过网络编程，

74
00:04:03,243 --> 00:04:06,243
你也许已经准备说，

75
00:04:06,246 --> 00:04:09,246
“网络浏览器不支持PUT与DELETE（增删），即便HTTP对它们作出规定。

76
00:04:09,249 --> 00:04:13,249
网络浏览器只支持GET与POST（查改）。”

77
00:04:13,253 --> 00:04:17,253
这没错，不过首先，Rails会提供一些有趣的工具，

78
00:04:17,257 --> 00:04:20,257
在本质上，模拟实现PUT与DELETE（增删）。

79
00:04:20,260 --> 00:04:23,260
为什么你要这么做呢？因为我们想要

80
00:04:23,263 --> 00:04:26,263
想想我们的应用程序是不是不会这样，“这是面向用户的

81
00:04:26,266 --> 00:04:29,266
应用程序，它由一堆网页构成。”我们想要

82
00:04:29,269 --> 00:04:31,269
看看“这个应用程序作为服务的集合， 

83
00:04:31,271 --> 00:04:35,271
包含你可以对资源做的事情。上述资源的互动方式之一是

84
00:04:35,275 --> 00:04:38,275
供应作为人类互动对象的网页。”或者是耍戏的对象或是别的什么。

85
00:04:38,278 --> 00:04:41,278
不过与该服务互动的另一个方式是，

86
00:04:41,281 --> 00:04:44,281
我可以编写只针对我的应用程序进行HTTP调用的一个应用程序。

87
00:04:44,284 --> 00:04:46,284
事实上，在随后的家庭作业里，你们正是要做到这个。

88
00:04:46,286 --> 00:04:50,286
大家要针对培根甲骨文网站做HTTP调用。

89
00:04:50,290 --> 00:04:53,290
日后会在讲座中对此再做讲解。

90
00:04:53,293 --> 00:04:58,293
路由子系统会给你什么呢？基本上，他会给你一堆工具让

91
00:04:58,298 --> 00:05:00,298
你获取URI，此外还有方法，

92
00:05:00,000 --> 00:05:03,300
结合在一起，这两者就是路径。

93
00:05:03,303 --> 00:05:06,303
为在正确的控制器动作上加一映射，你就会知道

94
00:05:06,306 --> 00:05:10,306
在应用程序中为处理该URI会在何处调用代码。

95
00:05:10,310 --> 00:05:12,310
它会提供一堆辅助方法，在给定控制器动作时，

96
00:05:12,312 --> 00:05:16,312
大家可以使用它们生成正确的URI。

97
00:05:16,316 --> 00:05:18,316
再一次，不要想这些，大家向用户供应页面时， 

98
00:05:18,318 --> 00:05:20,318
会存在某些链接让客户做其他的事情。

99
00:05:20,320 --> 00:05:22,320
你不想从链接角度考虑。你想要考虑，

100
00:05:22,322 --> 00:05:25,322
“我要向客户展示对资源的哪些新操作？”

101
00:05:25,325 --> 00:05:28,325
Rails会向你们提供工具以便获取该信息，同时

102
00:05:28,328 --> 00:05:32,328
还会基于你想要如何映射路径的注明

103
00:05:32,332 --> 00:05:37,332
纲要，生成正确的URI。

104
00:05:37,337 --> 00:05:41,337
如果大家含有参数，如果大家在看教科书内关于URI的章节，

105
00:05:41,341 --> 00:05:44,341
你可以在URI内嵌入参数。存在将所有事项提出的工具，

106
00:05:44,344 --> 00:05:47,344
因此你的控制器方法可以实现这一点。

107
00:05:47,347 --> 00:05:50,347
此外存在内置的捷径，因为CRUD动作

108
00:05:50,350 --> 00:05:53,350
如此常见，存在内置捷径可为你自动

109
00:05:53,353 --> 00:05:56,353
生成所有CRUD路径，所以实际上，你不必逐个具体规定

110
00:05:56,356 --> 00:05:59,356
那些映射。例如，

111
00:05:59,359 --> 00:06:01,359
你创建新的应用程序时，你说“在我的应用程序有东西， 

112
00:06:01,361 --> 00:06:04,361
那就是电影。电影就是我要操纵的资源。”

113
00:06:04,364 --> 00:06:08,364
Rails竟会免费定义所有这些路径，同时

114
00:06:08,368 --> 00:06:12,368
在处理这些动作的控制器内，向标准

115
00:06:12,372 --> 00:06:15,372
命名的方法创建映射。此时，

116
00:06:15,375 --> 00:06:18,375
你当然也可创建你自己的路径。

117
00:06:18,378 --> 00:06:20,378
你应用程序中的东西会远超过关于重定模型的基础CRUD。

118
00:06:20,380 --> 00:06:23,380
这肯定不是个特别有趣的应用程序。不过，

119
00:06:23,383 --> 00:06:25,383
想到你免费的到这些，还有你得到他们的方式就是说

120
00:06:25,385 --> 00:06:28,385
“电影是资源”，真的举例证明了这一

121
00:06:28,388 --> 00:06:31,388
想法，那就是应用程序实际上就是可实现表述性状态转移的服务集合。

122
00:06:31,391 --> 00:06:34,391
哦好，你可以与之互动的方式就是， 

123
00:06:34,394 --> 00:06:38,394
你在它前面放一个网页。

124
00:06:38,398 --> 00:06:41,398
按照纲要，“如果我有像是GET/电影/3/编辑的HTTP请求”， 

125
00:06:41,401 --> 00:06:46,401
那么究竟会发生什么呢？这是自动路径中的一条， 

126
00:06:46,406 --> 00:06:50,406
它是由Rails为你创造出来的，这表示， 

127
00:06:50,410 --> 00:06:53,410
“在关联该资源的控制器上调用编辑动作。”

128
00:06:53,413 --> 00:06:57,413
你的浏览器生成该请求，而这抵达你得Rails应用程序时， 

129
00:06:57,417 --> 00:07:00,417
后台在发生什么事呢？第一件就是，

130
00:07:00,000 --> 00:07:04,420
Rails的路由子系统会匹配URL，会试着

131
00:07:04,424 --> 00:07:07,424
按照路径表内的路径之一进行匹配。

132
00:07:07,427 --> 00:07:11,427
在此情况下，他会匹配我用黄色强调的路径，

133
00:07:11,431 --> 00:07:14,431
因为使用冒号开始的标识就像通配符。

134
00:07:14,434 --> 00:07:18,434
所以，实际发生的是，路径会匹配， 

135
00:07:18,438 --> 00:07:23,438
然后路径的ID部分经设置会匹配URI内的数字3.

136
00:07:23,443 --> 00:07:26,443
由此，它会解析通配符参数。

137
00:07:26,446 --> 00:07:29,446
在你的控制器可免费访问散列时，这些实际上会停止放入该散列。

138
00:07:29,449 --> 00:07:33,449
之后，它会向编辑方法进行发送。为什么呢？

139
00:07:33,453 --> 00:07:37,453
这是因为路径明确规定了这一点，如URI匹配此模式，它应

140
00:07:37,457 --> 00:07:41,457
进入编辑操作，或进入电影控制器内的编辑Ruby方法。

141
00:07:41,461 --> 00:07:45,461
如果随后作为控制器行动的一部分，我有所需要， 

142
00:07:45,465 --> 00:07:48,465
我想要生成视图，从而使客户提交表格

143
00:07:48,468 --> 00:07:52,468
以更新该电影。因此，该表格含有哪些内容？

144
00:07:52,472 --> 00:07:57,472
它应含有提交的URI，这看上去像是这里

145
00:07:57,477 --> 00:07:59,477
黄色高亮的URI。我需要在提交时会引发此操作的表格。 

146
00:07:59,479 --> 00:08:03,479
你要实现这一点，学校里教的老套做法是，

147
00:08:03,483 --> 00:08:06,483
你要手动嵌入你的视图内，在你的HTML视图中， 

148
00:08:06,486 --> 00:08:10,486
你会嵌入硬编码的URI来做到这一点。

149
00:08:10,490 --> 00:08:13,490
你在Rails内要做的是，你说，“我想要做的是，给用户

150
00:08:13,493 --> 00:08:16,493
会引发电影ID5更新的URI。”

151
00:08:16,496 --> 00:08:19,496
然后，它会为你生成URI。为什么你要这样做呢？

152
00:08:19,499 --> 00:08:22,499
因为如果你的路径命名纲要曾有所变化，

153
00:08:22,502 --> 00:08:24,502
你不想看一遍，再手动修改你创建的所有

154
00:08:24,504 --> 00:08:26,504
硬接线路径吧。

155
00:08:26,506 --> 00:08:29,506
大家需要从资源与相关操作方面想一想。

156
00:08:29,509 --> 00:08:32,509
映射实际上是偶然的，这就是为什么为你处理那部分的原因。

157
00:08:32,512 --> 00:08:34,512
我们进行Rails应用程序的走查时，

158
00:08:34,514 --> 00:08:37,514
还要讲更多路径与控制器方面的内容。

159
00:08:37,517 --> 00:08:40,517
不过，我想让大家大致了解，你们在实践中执行时， 

160
00:08:40,520 --> 00:08:43,520
表述性状态转移是什么样子的。

