1
00:00:00,000 --> 00:00:04,000
好啦。现在我们要做的是回顾，我们已经

2
00:00:04,004 --> 00:00:07,004
学习了Ruby还有这里部分Rails的内容， 

3
00:00:07,007 --> 00:00:11,007
现在准备回到好的[无声 00:00:08]设计。

4
00:00:11,011 --> 00:00:14,011
[无声 00:00:10]推动了设计User Stories（用户故事），这我们已经讲过不少了。

5
00:00:14,014 --> 00:00:19,014
那么软件项目为什么会失败呢？

6
00:00:19,019 --> 00:00:22,019
它们的功能不是客户想要的，或项目太迟了或

7
00:00:22,022 --> 00:00:26,022
它们超出预算了或它们很难保持[ 'above' 00:00:22]或

8
00:00:26,026 --> 00:00:29,026
以上全部都是原因，以上说法全对吗？ 

9
00:00:29,029 --> 00:00:32,029
Agile想要避免这些常见问题怎么办？

10
00:00:32,032 --> 00:00:35,032
让我们稍稍回顾Agile。

11
00:00:35,035 --> 00:00:38,035
Agile与客户紧密合作，从而同项目中的

12
00:00:38,038 --> 00:00:41,038
每个成员共同开发要求、开展工作，你每周一次或两次

13
00:00:41,041 --> 00:00:43,041
迅速完成这些迭代，于是你不会与客户[ 'sink'00:00:43]，

14
00:00:43,043 --> 00:00:47,043
同时避免这些较长的计划期

15
00:00:47,047 --> 00:00:51,047
与开发方法。在你做下一项工作前，

16
00:00:51,051 --> 00:00:54,051
你可以与客户一同检查，从而确保他们

17
00:00:54,054 --> 00:00:58,054
对你目前所做的工作满意。于是你就可以进行验证， 

18
00:00:58,058 --> 00:01:04,058
以正确的方式做产品。

19
00:01:04,064 --> 00:01:07,064
实际迭代对应于我们教科书上的章节， 

20
00:01:07,067 --> 00:01:09,067
这就是我们现在正在做的事，而用黄色强调的内容我们今天要讲的。

21
00:01:09,069 --> 00:01:12,069
和客户交谈，行动驱动不同的设计，然后

22
00:01:12,072 --> 00:01:16,072
测量开发速度，我们今天就来讲解这些内容。

23
00:01:16,076 --> 00:01:20,076
什么是行为驱动设计？在你开始编写程序前与开发期间， 

24
00:01:20,080 --> 00:01:25,080
你都要问自己这样一个问题，应用程序

25
00:01:25,085 --> 00:01:28,085
有哪些功能? 相比于构建后向客

26
00:01:28,088 --> 00:01:31,088
户展示程序，这是截然不同的想法。

27
00:01:31,091 --> 00:01:35,091
它侧重于确认与验证的对比。你要如何

28
00:01:35,095 --> 00:01:38,095
借助与客户合作得到要求呢？

29
00:01:38,098 --> 00:01:40,098
我们会使用用户故事。故事，听上去挺滑稽，

30
00:01:40,100 --> 00:01:44,100
让我们详细记述一些故事。这些是对

31
00:01:44,104 --> 00:01:47,104
应用程序用途与使用方法的简短描述， 

32
00:01:47,107 --> 00:01:53,107
你们很快就会这样做。而其中的BDD， 

33
00:01:53,113 --> 00:01:58,113
行为驱动开发是相对于执行而言的， 

34
00:01:58,118 --> 00:02:00,118
这时你要尝试捕捉行为。你可以把它想

35
00:02:00,000 --> 00:02:06,120
成是验收测试级或集成测试级。

36
00:02:06,126 --> 00:02:10,126
阿曼多会在日后的课程中讲解测试驱动设计……

37
00:02:10,130 --> 00:02:13,130
这更多涉及实施。那么这些用户故事是什么呢？

38
00:02:13,133 --> 00:02:16,133
他们是什么样子的？他们看上去像是这样，这个3×5的卡片。

39
00:02:16,136 --> 00:02:21,136
它是用简单的老式英语写成的1到3句话。

40
00:02:21,141 --> 00:02:24,141
应保持简短以便填入3×5卡片内，

41
00:02:24,144 --> 00:02:27,144
这不是你自己写下的内容，而要由你与客户一同写下。

42
00:02:27,147 --> 00:02:30,147
这源于一家名为[无声00:02:30]的创立公司，

43
00:02:30,150 --> 00:02:33,150
他们想出了这样的格式，在顶部填写

44
00:02:33,153 --> 00:02:40,153
功能名称，然后是这三个句子、陈述功能

45
00:02:40,160 --> 00:02:43,160
以及利益相关人的类型，像是我们的……在此示例中， 

46
00:02:43,163 --> 00:02:47,163
我是个电影迷，不过可以曾是票房运营商。

47
00:02:47,167 --> 00:02:51,167
作为利益相关人，我希望可以在此示例中实现

48
00:02:51,171 --> 00:02:53,171
和其他影迷分享电影的功能。

49
00:02:53,173 --> 00:02:57,173
我想要做某一测试，所以我想把电影添加到烂土豆数据库。

50
00:02:57,177 --> 00:03:01,177
所以这儿有三个阶段，可以按照[无声 

51
00:03:01,181 --> 00:03:04,181
00:03:02]公司规定以任何顺序排列。

52
00:03:04,184 --> 00:03:08,184
基本上你会与客户碰面，然后商定这些3×5卡片，

53
00:03:08,188 --> 00:03:11,188
这就是你在编写任何代码前要完成的

54
00:03:11,191 --> 00:03:16,191
接受度测试。那么这些3×5卡片来自于哪里呢？

55
00:03:16,196 --> 00:03:19,196
他们来自于与用户的沟通时，

56
00:03:19,199 --> 00:03:21,199
做的大量工作， 

57
00:03:21,201 --> 00:03:25,201
而结论就是这些3×5卡片，

58
00:03:25,205 --> 00:03:30,205
3×5卡片难写吗？任何人都可以写3×5卡片。

59
00:03:30,210 --> 00:03:33,210
你开始构建代码时，他们就会多少有种被代码限制了的感觉，

60
00:03:33,213 --> 00:03:35,213
这是因为他们不想你把它扔掉作废，所以你……

61
00:03:35,215 --> 00:03:38,215
可我们想要知道的是客户真正想要的东西，

62
00:03:38,218 --> 00:03:42,218
而不是他们以为自己想要的东西，

63
00:03:42,222 --> 00:03:46,222
所以我们要让他们参与到通力攻关过程中来，

64
00:03:46,226 --> 00:03:48,226
使用3×5卡片就可以轻松实现这一点。要填完这些

65
00:03:48,228 --> 00:03:51,228
花不了多少时间，你一拿到一堆卡片，

66
00:03:51,231 --> 00:03:55,231
你就可以重新整理，重新分配优先级，决定你想要什么，

67
00:03:55,235 --> 00:03:57,235
然后你就可以……如果你判断你不喜欢用户故事，

68
00:03:57,237 --> 00:04:01,237
显然你可以直接把卡片丢掉。然后随着开发继续，

69
00:04:01,241 --> 00:04:05,241
可以轻松创建新的3×5卡片。

70
00:04:05,245 --> 00:04:08,245
现在你所编写的东西取决于你属于那一类利益相关方。

71
00:04:08,248 --> 00:04:13,248
我们接下来会讲一个电影院应用， 

72
00:04:13,253 --> 00:04:17,253
而这是这个应用的同一功能的两项说明。

73
00:04:17,257 --> 00:04:22,257
让我们看看

74
00:04:22,262 --> 00:04:24,262
作为一个剧院常客，我喜欢和朋友们一起欣赏演出，

75
00:04:24,264 --> 00:04:27,264
为此我要看看Facebook朋友圈里有谁

76
00:04:27,267 --> 00:04:30,267
订了演出。这样从顾客的角度，

77
00:04:30,270 --> 00:04:33,270
作为票房经理，我想知道顾客Facebook朋友里谁买了票，

78
00:04:33,273 --> 00:04:36,273
从而说服顾客买票

79
00:04:36,276 --> 00:04:38,276
这样就有目标各异的2种不同的观点。

80
00:04:38,278 --> 00:04:41,278
好啦，这样用户故事，现在的用户故事

81
00:04:41,281 --> 00:04:44,281
真的有数百个这类内容，有那么多……

82
00:04:44,284 --> 00:04:48,284
要填写3×5卡片轻而易举，这样就能

83
00:04:48,288 --> 00:04:51,288
得出你想要做的潜在事情，这可比构建

84
00:04:51,291 --> 00:04:53,291
这些东西简单多了。还有些东西称为待办事项， 

85
00:04:53,293 --> 00:04:57,293
这就是我们要处理的事项，通常即便一个

86
00:04:57,297 --> 00:04:59,297
项目开工在即，星期一还是有

87
00:04:59,299 --> 00:05:02,299
一堆3×5卡片，这就是待办事项，之后

88
00:05:02,302 --> 00:05:06,302
我们要学习使用工具跟踪这些事项。

89
00:05:06,306 --> 00:05:09,306
你把这些东西顺次理好同样放入待办事项， 

90
00:05:09,309 --> 00:05:11,309
这样你闲下来后就可以从待办事项中取出来进行处理。

91
00:05:11,311 --> 00:05:14,311
做迭代时，你会依优先级顺序从待办事项中把东西挑拣出来，

92
00:05:14,314 --> 00:05:20,314
你甚至可以整理全部用户故事，这样你

93
00:05:20,320 --> 00:05:23,320
就明白接下来要做什么了，就是这些故事。

94
00:05:23,323 --> 00:05:27,323
现在还有一个东西和用户故事有关，

95
00:05:27,327 --> 00:05:30,327
它对编程员组非常有用，这就是名为Spike的工具， 

96
00:05:30,330 --> 00:05:34,330
Spike不是用户故事，不是客户想要

97
00:05:34,334 --> 00:05:37,334
你做的东西，而是你需要为项目做的事。

98
00:05:37,337 --> 00:05:41,337
Spike用于 

99
00:05:41,341 --> 00:05:44,341
快速调查项目目前遇到的问题，

100
00:05:44,344 --> 00:05:48,344
它与客户要求无关。

101
00:05:48,348 --> 00:05:50,348
假设我们要做推荐算法，像亚马逊的推荐算法， 

102
00:05:50,350 --> 00:05:53,350
说白了就是如果你喜欢这本书，那你就会喜欢那本。

103
00:05:53,353 --> 00:05:55,353
有些人想要了解更多推荐算法的知识， 

104
00:05:55,355 --> 00:05:59,355
于是你把那儿的Spike放在待做事项清单里， 

105
00:05:59,359 --> 00:06:02,359
即便你已构建某个代码试验找出算法， 

106
00:06:02,362 --> 00:06:05,362
这并非代码开发过程的内容，你只是做

107
00:06:05,365 --> 00:06:08,365
一些探索性的调查，然后等到准备就绪可以继续工作时， 

108
00:06:08,368 --> 00:06:13,368
就把这些东西丢在一边。好啦，这就是用户故事。


