1
00:00:00,000 --> 00:00:03,000
让我们看一下这个匹配问题的答案。

2
00:00:03,003 --> 00:00:05,003
我试图匹配的各项是这里的表示层、逻辑层以及

3
00:00:05,005 --> 00:00:09,005
永久层。我们基本上已掌握

4
00:00:09,009 --> 00:00:12,009
这里开源与专利产品的名称与数量，不过什么是表示层？

5
00:00:12,012 --> 00:00:15,012
表示层时客户询问问题时最先看到的东西。

6
00:00:15,015 --> 00:00:18,015
这是他们与服务器的第一个接触点。

7
00:00:18,018 --> 00:00:21,018
这就表示，表示层是

8
00:00:21,021 --> 00:00:25,021
某种网络服务器。Apache看上去好像就是这个问题的合理答案。

9
00:00:25,025 --> 00:00:27,025
来自微软的互联网信息服务器也是答案，不过

10
00:00:27,027 --> 00:00:31,027
火狐明显不是，因为表示层是服务器的某个部分，

11
00:00:31,031 --> 00:00:35,031
而火狐是客户端。这就排除了绿色答案，

12
00:00:35,035 --> 00:00:38,035
还有这里的蓝色答案。

13
00:00:38,038 --> 00:00:40,038
逻辑层呢？我们说这就是大家的

14
00:00:40,040 --> 00:00:44,040
应用程序运行的地方，所以Rack与rails当然是逻辑层的示例，

15
00:00:44,044 --> 00:00:47,044
这就表示这里的红色的答案项还是可行的。

16
00:00:47,047 --> 00:00:51,047
然后，最后一个是永久层。

17
00:00:51,051 --> 00:00:54,051
那儿都发生些什么，那是东西得以存储的地方，

18
00:00:54,054 --> 00:00:58,054
{它不受HTTP请求交叉邀请的影响，所以关系式数据库}，

19
00:00:58,058 --> 00:01:01,058
当然是这个的合理选项，不过Apache网络服务器呢，

20
00:01:01,061 --> 00:01:03,061
网络服务器往往是无状态的。他们是可

21
00:01:03,063 --> 00:01:07,063
扩展的表示层组成部分，他们之所以可以这样做的原因之一

22
00:01:07,067 --> 00:01:09,067
是因为他们部管理永久性数据，这也是

23
00:01:09,069 --> 00:01:12,069
多个副本问题产生的根源。在此情况下，

24
00:01:12,072 --> 00:01:16,072
正确答案就是第一个。 


