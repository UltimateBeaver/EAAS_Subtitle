1
00:00:00,000 --> 00:00:06,000
鉴于此，这里有三种可能的方法

2
00:00:06,006 --> 00:00:09,006
可以生成表单标签，在提交时将调用创建新电影动作。

3
00:00:09,009 --> 00:00:14,009
问题是，这些方法中哪些是有效的？

4
00:00:14,014 --> 00:00:16,014
顺便说一下，这些问题都问得很明确，

5
00:00:16,016 --> 00:00:19,016
是只有一个方法有效，还是三个全部都有效。

6
00:00:19,019 --> 00:00:22,019
问题是这样问的。我们来看一眼这个。

7
00:00:22,022 --> 00:00:26,022
可以看到第一个选项是对一个方法的调用，

8
00:00:26,026 --> 00:00:30,026
一种Rails中的Ruby方法，称为表单_标签。而其他两个选项

9
00:00:30,030 --> 00:00:32,030
相当于我们自己用HAML进行手动创建表单_标签。

10
00:00:32,032 --> 00:00:37,032
这三个选项都可用还是只有一项可用？

11
00:00:37,037 --> 00:00:46,037
也许这么做有用，我想提醒大家这些和

12
00:00:46,046 --> 00:00:51,046
你想要什么样的结果的关系不大。记住，

13
00:00:51,051 --> 00:00:53,051
从浏览器的角度，只有一点是重要的。

14
00:00:53,053 --> 00:00:56,053
如何得到表单不重要。重要的是，

15
00:00:56,056 --> 00:01:00,056
我知道用什么方法提交电影表单以及

16
00:01:00,000 --> 00:01:06,060
必须提交到哪个URI。我们来快速地初次投票一下。

17
00:01:06,066 --> 00:01:13,066
初次投票？初次投票？大家选择什么颜色的卡片？

18
00:01:13,073 --> 00:01:20,073
如果你没有手臂，可以不用举起卡片，但如果有就必须举起来。

19
00:01:20,080 --> 00:01:22,080
大多数人都选对了颜色。

20
00:01:22,082 --> 00:01:25,082
下一次，我要每个人都举起卡片。但这一次，

21
00:01:25,085 --> 00:01:27,085
蓝色是正确答案。我来快速地过一下。

22
00:01:27,087 --> 00:01:32,087
这三个选项是什么情况？

23
00:01:32,092 --> 00:01:36,092
看看这些选项的原始版本，我们要将

24
00:01:36,096 --> 00:01:40,096
HAML标签与HTML标签进行一对一映射。还记得，

25
00:01:40,100 --> 00:01:43,100
当制作HAML标签时，我们传递给Ruby散列的

26
00:01:43,103 --> 00:01:47,103
任何属性最终都会成为HTML的属性。

27
00:01:47,107 --> 00:01:51,107
二号和三号选项都符合我们用HTML生成表单

28
00:01:51,111 --> 00:01:55,111
所需要的情况。为什么它们都符合？

29
00:01:55,115 --> 00:02:00,115
它们之间唯一的区别在于，一个案例中，

30
00:02:00,000 --> 00:02:04,120
我们使用了URI辅助函数电影_路径。另一个案例中，

31
00:02:04,124 --> 00:02:07,124
我们硬线连接了URI/电影。如果你执行了rake routes，你就会看到

32
00:02:07,127 --> 00:02:11,127
电影_路径辅助函数的目的是为了提供返回路径。

33
00:02:11,131 --> 00:02:13,131
为什么要使用辅助函数而不是硬线连接路径？

34
00:02:13,133 --> 00:02:16,133
因为当我们的应用程序变得越发复杂，

35
00:02:16,136 --> 00:02:19,136
我们可能会使用额外的路径并可能逻辑动作名称的映射

36
00:02:19,139 --> 00:02:22,139
更改为连接到它们的URI。使用这个级别的连接，

37
00:02:22,142 --> 00:02:25,142
就像电影_路径，能让我们重新定义，

38
00:02:25,145 --> 00:02:27,145
然后又不会继续更改25个不同视图

39
00:02:27,147 --> 00:02:31,147
而带来不良后果。二号与三号选项的另一个唯一区别

40
00:02:31,151 --> 00:02:34,151
在于一个使用符号，一个使用字符串。

41
00:02:34,154 --> 00:02:38,154
如我之前所提到的，这是"Ruby主义"。在许多情况下，

42
00:02:38,158 --> 00:02:41,158
有很多方法能让我们传递一个符号或一个字符串。

43
00:02:41,161 --> 00:02:43,161
它能被转换成内部所需的任何内容。这正好是那些方法的其中之一。

44
00:02:43,163 --> 00:02:46,163
我还提到过

45
00:02:46,166 --> 00:02:50,166
使用符号而不使用字符串的主要原因

46
00:02:50,170 --> 00:02:52,170
是因为它的值不是随机的。它是一个可数集的成员之一。

47
00:02:52,172 --> 00:02:56,172
在这种情况下，事实上，方法中唯一合法的值

48
00:02:56,176 --> 00:02:59,176
是不同的HTTP方法，比如get、post、put等。

49
00:02:59,179 --> 00:03:03,179
它的意图是传递一个符号，

50
00:03:03,183 --> 00:03:06,183
它只是一个可能的固定值

51
00:03:06,186 --> 00:03:10,186
而不是一个随机字符串。然后关于第一个选项，

52
00:03:10,190 --> 00:03:14,190
表单_标签只是生成了一个表单，

53
00:03:14,194 --> 00:03:18,194
方法使用的是POST，URI是基于表单_标签的第一个参数。

54
00:03:18,198 --> 00:03:20,198
还是一样，我们正在使用电影_路径辅助函数。

55
00:03:20,200 --> 00:03:23,200
从实际目的看，

56
00:03:23,203 --> 00:03:26,203
这三个选项都是一样的。我的观点是第一个选项是

57
00:03:26,206 --> 00:03:29,206
意图最明确的，因为它指出我们想要的做法

58
00:03:29,209 --> 00:03:33,209
并使用URI辅助函数而不是硬线连接URI。

