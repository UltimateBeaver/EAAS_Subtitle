1
00:00:00,000 --> 00:00:06,000
如果你是用printf在你的生产环境应用程序内

2
00:00:06,006 --> 00:00:09,006
打印调试消息，那么要重温消息会发生什么呢？卡片拿出来。

3
00:00:09,009 --> 00:00:12,009
引发异常，逐渐停顿，继续永远消失的消息，

4
00:00:12,012 --> 00:00:15,012
继续将消息放入日志文件，你会被这个

5
00:00:15,015 --> 00:00:21,015
搅得大动肝火，又或者你的卡片已经丢了。

6
00:00:21,021 --> 00:00:25,021
好了，鉴于多数人投票结果正确，

7
00:00:25,025 --> 00:00:29,025
我们这就讲解答案。引发异常了吗？没有。

8
00:00:29,029 --> 00:00:31,029
Rails很好，不会因为这些并不特殊的事件

9
00:00:31,031 --> 00:00:34,031
引发异常。你想要打印消息可不是什么特殊事件。

10
00:00:34,034 --> 00:00:37,034
你得应用程序会继续工作，不过消息会记入

11
00:00:37,037 --> 00:00:40,037
日志文件。不。你可以这样做，不过你得明确

12
00:00:40,040 --> 00:00:43,040
使用logger才成。printf不会自动为你这么做。如果

13
00:00:43,043 --> 00:00:46,043
存在SaaS神明，他们会让你失望吧，不过

14
00:00:46,046 --> 00:00:49,046
没有，所以你不必担心这个选项。事实上，

15
00:00:49,049 --> 00:00:52,049
你的应用程序会继续运行，不过消息会永远遗失，

16
00:00:52,052 --> 00:00:54,052
这基本上从来不是你想要的东西。

17
00:00:54,054 --> 00:00:56,054
我们只要熟悉用不同的思路思考调试就行。

18
00:00:56,056 --> 00:00:59,056
这和你与终端再无任何关系。这儿有许多的移动部分可以帮助你

19
00:00:59,059 --> 00:01:00,059
解决这个问题。
