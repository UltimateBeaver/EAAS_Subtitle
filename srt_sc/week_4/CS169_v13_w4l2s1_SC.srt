1
00:00:00,000 --> 00:00:02,000
我们开始讲调试。我重新调整了部分课程的顺序，

2
00:00:02,002 --> 00:00:06,002
因为从现实角度看，在本课比起之前的作业， 

3
00:00:06,006 --> 00:00:08,006
我们会有更多家庭作业， 

4
00:00:08,008 --> 00:00:11,008
介绍Ruby与Rails的节奏实在快。我们知道这一点，

5
00:00:11,011 --> 00:00:16,011
所以我们要求你们不少人赶快跟上进度。

6
00:00:16,016 --> 00:00:18,016
对调试我只有几句话，关于调试，我要讲的内容

7
00:00:18,018 --> 00:00:21,018
没有什么是本课特有的。我希望等你们转向新语言或新系统时， 

8
00:00:21,021 --> 00:00:25,021
这会让你们受益匪浅，这就是全部信息啦。

9
00:00:25,025 --> 00:00:28,025
对比调试命令行程序或

10
00:00:28,028 --> 00:00:31,028
你已编写的其他程序类型，

11
00:00:31,031 --> 00:00:33,031
SaaS可能有点麻烦，因为你可能已经

12
00:00:33,033 --> 00:00:35,033
习惯了能把一些东西打印出来， 

13
00:00:35,035 --> 00:00:39,035
然后在终端查看。在SaaS世界里不存在终端。

14
00:00:39,039 --> 00:00:41,039
它正在某个地方的服务器上运行，所以你想

15
00:00:41,041 --> 00:00:44,041
在终端把内容打印出来，这个想法行不通。同时，

16
00:00:44,044 --> 00:00:46,044
请记住，在这些应用程序中含有大量移动部分。

17
00:00:46,046 --> 00:00:49,046
我们从浏览器发来的URI开始讲。有一个路由子系统。

18
00:00:49,049 --> 00:00:51,049
得调用控制器。模型会处理

19
00:00:51,051 --> 00:00:54,051
材料，所以多少存在发生事情的这些位置，

20
00:00:54,054 --> 00:00:57,054
有时在流程早期就出现错误，不过这

21
00:00:57,057 --> 00:01:01,057
不很明显，知道流程后面才会显现故障现象。

22
00:01:01,061 --> 00:01:04,061
有时如果只在特定困难的条件下才出现错误，

23
00:01:04,064 --> 00:01:07,064
那就很难重现。

24
00:01:07,067 --> 00:01:09,067
这是使事情变得棘手的另一个原因。我们有外部用户。

25
00:01:09,069 --> 00:01:12,069
你没法控制输入的内容。我要讲几个不同的东西， 

26
00:01:12,072 --> 00:01:14,072
然后讲讲你们怎样处理调试。

27
00:01:14,074 --> 00:01:17,074
有一件事是你可能会以其他许多语言完成某件事，

28
00:01:17,077 --> 00:01:19,077
然后将东西打印到终端。

29
00:01:19,079 --> 00:01:22,079
有人称此为打印调试，

30
00:01:22,082 --> 00:01:24,082
在开发模式下，这很好。你当然可以这么做，

31
00:01:24,084 --> 00:01:27,084
我会想你展示几个方法。这儿有登录。

32
00:01:27,087 --> 00:01:30,087
即便生产服务器内没有交互式终端，

33
00:01:30,090 --> 00:01:33,090
依然有日志文件，你可以在该文件内写些东西。

34
00:01:33,093 --> 00:01:36,093
我的同事说日志文件在有些情况下比代码

35
00:01:36,096 --> 00:01:39,096
与注释还要重要，这是因为日志文件，

36
00:01:39,099 --> 00:01:42,099
在你编写日志文件的消息时，

37
00:01:42,102 --> 00:01:45,102
你会作为应用程序中计划发生的事件编程者表达你的意图。

38
00:01:45,105 --> 00:01:47,105
这不意味着这真的会发生，不过

39
00:01:47,107 --> 00:01:49,107
你会将自己的想法写入日志文件，比方说计划会发生什么事，

40
00:01:49,109 --> 00:01:52,109
所以这非常有价值。是时候

41
00:01:52,112 --> 00:01:54,112
出绝招时，Ruby有交互调试。

42
00:01:54,114 --> 00:01:57,114
我们晚些时候会进行演示。

43
00:01:57,117 --> 00:02:01,117
不过，所有调试均具有以下四个字母缩写词的特点。

44
00:02:01,121 --> 00:02:05,121
这就是[ WEEVS 00:02:00]PASP。还可以拼写为SPAR或PARS

45
00:02:05,125 --> 00:02:07,125
或你想的随便什么，不过这都表示相同的四个东西。

46
00:02:07,127 --> 00:02:11,127
在你遇到问题时，首先冷静下来。调试不是现实生活。

47
00:02:11,131 --> 00:02:14,131
你总要去处理它，我们精通于测试驱动

48
00:02:14,134 --> 00:02:16,134
开发与类似的东西，不过我要是说， 

49
00:02:16,136 --> 00:02:18,136
这可以保证你在运行代码期间不会

50
00:02:18,138 --> 00:02:21,138
遇到程序错误，那我就是个傻瓜。这只是……

51
00:02:21,141 --> 00:02:24,141
我们是编程员。这是实际生活。首先，读取错误消息。

52
00:02:24,144 --> 00:02:28,144
让我再说一边，因为这值得重复。

53
00:02:28,148 --> 00:02:31,148
一定要读取错误消息。有些错误消息看上去

54
00:02:31,151 --> 00:02:34,151
像是一堆废话，不过在事物的方案中这

55
00:02:34,154 --> 00:02:36,154
可不是很多条废话，那里面存在有价值的

56
00:02:36,156 --> 00:02:39,156
信息，像通常出现错误的文件与行号；

57
00:02:39,159 --> 00:02:42,159
回溯指的是使你攀升到最高级别的

58
00:02:42,162 --> 00:02:45,162
所有功能列表，达到最高级别时，会

59
00:02:45,165 --> 00:02:48,165
第一次调用Rails。至少明白你应该从

60
00:02:48,168 --> 00:02:50,168
哪里开始查找症状，这是你可以在其中找到的一个内容。

61
00:02:50,170 --> 00:02:54,170
问问你的同事。你周围都是课堂上的同事。

62
00:02:54,174 --> 00:02:57,174
你还有课程材料，不过在你问问题时，

63
00:02:57,177 --> 00:03:00,177
试着提最明智的问题。

64
00:03:00,000 --> 00:03:03,180
问题的不良示例是，帮个忙，我的代码没法运转了。

65
00:03:03,183 --> 00:03:05,183
问题的良好示例是，看，我已经进行到这一步了。我预计这个

66
00:03:05,185 --> 00:03:07,185
变量会有这个数值，可看上去是其他数值，

67
00:03:07,187 --> 00:03:11,187
它的值是零，这就是状况。

68
00:03:11,191 --> 00:03:14,191
你提供的信息越多，别人就越有可能会

69
00:03:14,194 --> 00:03:16,194
说，哦，是呀，我知道这是什么。

70
00:03:16,196 --> 00:03:18,196
这儿你可能做错了什么。如果这还不起作用，你可以借助

71
00:03:18,198 --> 00:03:21,198
互联网向更多同事提问。你可以使用StackOverflow，

72
00:03:21,201 --> 00:03:23,201
这是我最喜欢的网站之一，不过还有其他网站，

73
00:03:23,203 --> 00:03:26,203
如果问题涉及程序库的特殊版本或类似的什么， 

74
00:03:26,206 --> 00:03:29,206
这就特别真实。有时程序错误在不同版本上

75
00:03:29,209 --> 00:03:31,209
不会以相同方式表现出来，不过

76
00:03:31,211 --> 00:03:34,211
那里的人也许有和你相同的程序错误。

77
00:03:34,214 --> 00:03:36,214
如果情况更为难解，这时你的逻辑内可能不只一个程序错误，

78
00:03:36,216 --> 00:03:39,216
不过实际上有关于结构的问题，这时

79
00:03:39,219 --> 00:03:42,219
像StackOverflow之类的东西就是很好的资源。如果你在StackOverflow上

80
00:03:42,222 --> 00:03:45,222
尚未找到答案，你可以在那贴出问题。

81
00:03:45,225 --> 00:03:49,225
还有进程表格，[ Piasa 00:03:46]等等，不过

82
00:03:49,229 --> 00:03:50,229
要记住每个读取这些内容的人都和你一样忙。

83
00:03:50,230 --> 00:03:53,230
他们也在尝试调试，好让自己的代码工作。帮助他们，

84
00:03:53,233 --> 00:03:56,233
也就等于帮助自己，你不仅可以给他们最为完整的信息，

85
00:03:56,236 --> 00:04:00,236
还要保持简洁。不要把完整的信息混淆为副本，

86
00:04:00,000 --> 00:04:02,240
然后把整个错误消息的副本都贴上去。

87
00:04:02,242 --> 00:04:05,242
这会耗费很长时间读完消息。你完成读取工作，这是你的错误消息。

88
00:04:05,245 --> 00:04:08,245
一旦你将它筛选为更小的状况组合，

89
00:04:08,248 --> 00:04:11,248
也许你甚至能够以控制的方式借助更少的代码重现程序错误，

90
00:04:11,251 --> 00:04:14,251
这就是你要张贴的内容。

91
00:04:14,254 --> 00:04:18,254
在StackOverflow上数分钟内问题就会得到解答。

92
00:04:18,258 --> 00:04:20,258
你怎样读取这些错误消息？他们很长，

93
00:04:20,260 --> 00:04:22,260
但是你可以语法分析它们。大家知道，你们都非常聪明。

94
00:04:22,262 --> 00:04:25,262
回溯会想你展示你从何而来，所以不仅仅是出现错误的位置，还有谁

95
00:04:25,265 --> 00:04:27,265
调用了该方法和那个调用了该方法等等

96
00:04:27,267 --> 00:04:31,267
一路到顶。最常见的消息是，

97
00:04:31,271 --> 00:04:34,271
尤其是在Ruby内，你会看到未定义的方法，某事物，

98
00:04:34,274 --> 00:04:38,274
对于零，然后次数中99%，这儿有该消息内发生的事情，

99
00:04:38,278 --> 00:04:40,278
然后我将这用作指定示例，因为

100
00:04:40,280 --> 00:04:43,280
这如此普遍。通常这表示你已经在分配变量的位置做了某种形式的调用，

101
00:04:43,283 --> 00:04:46,283
不过你没仔细检查是否存在错误条件，

102
00:04:46,286 --> 00:04:49,286
在出现某种错误时，有很多Ruby方法，

103
00:04:49,289 --> 00:04:52,289
代替举出例外，他们会归零

104
00:04:52,292 --> 00:04:55,292
而不是返回你预计的对象。例如，

105
00:04:55,295 --> 00:04:58,295
我们稍后会讲解，在Rails应用程序中，你如何与数据库

106
00:04:58,298 --> 00:05:01,298
对话，许会在数据库上进行查找，希望以此度过难关，

107
00:05:01,301 --> 00:05:04,301
这么说吧，你想从电影表格内找到一部电影，

108
00:05:04,304 --> 00:05:07,304
如果结果表明无论出于何种原因，那部电影已经不在那儿了，

109
00:05:07,307 --> 00:05:10,307
M会归零。在你试图取消引用它的相关内容时，

110
00:05:10,310 --> 00:05:14,310
从语法上讲是合法的。你正在尝试就对象调用方法，

111
00:05:14,314 --> 00:05:17,314
不过如果M是零，零就是不知道如何

112
00:05:17,317 --> 00:05:19,317
做许多事情的对象。它可不是很有作用的对象；

113
00:05:19,319 --> 00:05:23,319
因此，最初有几分混乱的方法，

114
00:05:23,323 --> 00:05:26,323
未定义的方法很快归零。大家思考这一点时，

115
00:05:26,326 --> 00:05:29,326
实际上它就有一定的道理。M的数值是零，而你试着

116
00:05:29,329 --> 00:05:34,329
对零调用方法标题，这不会起作用。

117
00:05:34,334 --> 00:05:36,334
你能做的其他事，检测仪表，在程序运行期间

118
00:05:36,336 --> 00:05:41,336
你收集材料时，对于打印材料数值， 

119
00:05:41,341 --> 00:05:43,341
这可是个新奇说法。正如我们看到的那样，你可以

120
00:05:43,343 --> 00:05:45,343
在视图内放入数量有限的代码。我知道我已经跟你们说过了，

121
00:05:45,345 --> 00:05:48,345
你们不应该这么做，不过有时在调试时，你可以

122
00:05:48,348 --> 00:05:51,348
打破常规等等。这有几个方法，像是调试之类的，

123
00:05:51,351 --> 00:05:54,351
会打印显示，我应该说生成， 

124
00:05:54,354 --> 00:05:58,354
印刷精美的对象字符串表达，

125
00:05:58,358 --> 00:06:00,358
你刚好可以把这个粘贴到视图内。你的视图看上去

126
00:06:00,000 --> 00:06:03,360
会很糟糕，不过鉴于没有打印的终端，

127
00:06:03,363 --> 00:06:06,363
这是在屏幕上得以查看的好东西。

128
00:06:06,366 --> 00:06:08,366
略微轻量级的版本是检查。检查是就对象得以定义的方法。

129
00:06:08,368 --> 00:06:12,368
每个Ruby对象都会响应它，

130
00:06:12,372 --> 00:06:15,372
虽然默认的是它会打印出来自我说明，这不一定有用。

131
00:06:15,375 --> 00:06:18,375
这就是为什么多数有趣儿的类可撤销检查，

132
00:06:18,378 --> 00:06:21,378
然后就它们本身打印出更加有用的内容。

133
00:06:21,381 --> 00:06:23,381
它们会尝试打印程序或就对象是什么打印出有用的表达。

134
00:06:23,383 --> 00:06:27,383
你还可以将材料写入日志。

135
00:06:27,387 --> 00:06:30,387
我就是做记录的超级爱好者。空间很便宜。编写日志文件。

136
00:06:30,390 --> 00:06:33,390
存在记录器方法，可用于返还记录器对象。

137
00:06:33,393 --> 00:06:36,393
所有控制器方法均可访问它，同时还有不同的

138
00:06:36,396 --> 00:06:39,396
警告等级，像是调试与错误警告，

139
00:06:39,399 --> 00:06:43,399
也许和你在其他记录系统内看到的一样。要记住，如果你尝试只使用

140
00:06:43,403 --> 00:06:46,403
打印或各种各样的等效功能，那么他们就无处可去了。

141
00:06:46,406 --> 00:06:50,406
在生产服务器内，会多少消失不见。

142
00:06:50,410 --> 00:06:52,410
到搜索的时间，使用互联网回答问题，此时严格说来，你会

143
00:06:52,412 --> 00:06:55,412
惊讶于使用谷歌就能走到这一步。

144
00:06:55,415 --> 00:06:58,415
假定你的问题是我怎样才能安排Ruby内的日期？

145
00:06:58,418 --> 00:07:00,418
让我们挑出这个句子的要素，

146
00:07:00,000 --> 00:07:02,420
我们应该如何，主语、动词即直接谓语；

147
00:07:02,422 --> 00:07:05,422
格式、日期、Ruby。在谷歌内搜索这三项。

148
00:07:05,425 --> 00:07:08,425
我保证你会找到一些结果。我如何超出得以定义的标准CRUD路径

149
00:07:08,428 --> 00:07:11,428
添加Rails路径？

150
00:07:11,431 --> 00:07:14,431
再次查看你问题内的关键词，

151
00:07:14,434 --> 00:07:17,434
将这些关键词键入谷歌，然后依靠世界的智慧

152
00:07:17,437 --> 00:07:20,437
看看你能否实现初始步骤。令人惊讶的是，除了你，

153
00:07:20,440 --> 00:07:23,440
人们已经报告了大量错误消息。读取文件。

154
00:07:23,443 --> 00:07:25,443
我们过去对此有个缩写，

155
00:07:25,445 --> 00:07:28,445
RTFM，不过由于再没有人读取，缩写已经丧失了，

156
00:07:28,448 --> 00:07:32,448
也许吧，它的部分意义。不过， 

157
00:07:32,452 --> 00:07:35,452
Ruby与Rails程序库都使用广泛，对这两者

158
00:07:35,455 --> 00:07:39,455
有完整的、可搜索的、格式良好的在线文件。读取源代码。

159
00:07:39,459 --> 00:07:42,459
Rails就是源代码。Rails实际上就是一个Ruby

160
00:07:42,462 --> 00:07:45,462
程序库，这是你应用程序的组成部分，所以如果你真的很好奇，

161
00:07:45,465 --> 00:07:48,465
可以切实回溯到Rails。在Rails视图完成这件事时，

162
00:07:48,468 --> 00:07:51,468
在某个位置出现错误。这部分Rails

163
00:07:51,471 --> 00:07:53,471
实际上在做什么呢？你可以去读取文件查个明白。

164
00:07:53,473 --> 00:07:57,473
当然，StackOverflow，我个人最喜爱的网站，

165
00:07:57,477 --> 00:08:00,477
使用的就是Rails控制台。所以我们一直使用irb得到简单示例，

166
00:08:00,000 --> 00:08:03,480
不过你真正想要的是Ruby命令行解释程序，

167
00:08:03,483 --> 00:08:06,483
这个程序切实含有你的应用程序加在到该程序的整个环境。

168
00:08:06,486 --> 00:08:08,486
它知道你有哪些数据库表格等等。

169
00:08:08,488 --> 00:08:14,488
Rails控制台多多少少就是做这个的。在有些情况中，

170
00:08:14,494 --> 00:08:16,494
如果你需要及时在特定点检查程序状态，

171
00:08:16,496 --> 00:08:19,496
像是我在控制器方法中达到这一点时

172
00:08:19,499 --> 00:08:21,499
会发生什么呢？在这些用例中，即便是Rails控制台

173
00:08:21,501 --> 00:08:24,501
也不太好用，过一会儿，我会给大家做个演示，

174
00:08:24,504 --> 00:08:27,504
在像这种情况下你可以使用真正的交互调试程序。

175
00:08:27,507 --> 00:08:31,507
这就有点动真格的了。

176
00:08:31,511 --> 00:08:32,511
你无需过于频繁地这样做。

