1
00:00:00,000 --> 00:00:04,000
我们短暂绕了个圈子后，大家还记得截至目前我们都做了什么吧，

2
00:00:04,004 --> 00:00:06,004
我们讲了模型以及它们怎样连接数据库。

3
00:00:06,006 --> 00:00:10,006
我们展示了大家现实中怎样在数据库内创建表格。

4
00:00:10,010 --> 00:00:13,010
顺便说一句，现在你们知道这两块怎样凑在一起了吧，迁移会

5
00:00:13,013 --> 00:00:15,013
创建表格，而表格会就不同的属性

6
00:00:15,015 --> 00:00:18,015
具有一定的列，这就是活动记录在运行时知道你就

7
00:00:18,018 --> 00:00:21,018
模型可参考哪些属性的方法。

8
00:00:21,021 --> 00:00:25,021
基本上这是列名。它本质上会要求数据库，

9
00:00:25,025 --> 00:00:27,025
“告诉我这个表中哪些列可以使用，”而这些就成为setter与getter，

10
00:00:27,027 --> 00:00:30,027
而这在你的Ruby模型上都是可供使用的。

11
00:00:30,030 --> 00:00:33,030
我们会现在会多讲一点活动记录与

12
00:00:33,033 --> 00:00:35,033
完成其他操作的部分方法。

13
00:00:35,035 --> 00:00:39,035
我们看过四个CRUD操作。我们看过C，创建。

14
00:00:39,039 --> 00:00:43,039
现在我们要完成读取、更新与删除。

15
00:00:43,043 --> 00:00:47,043
你怎样在数据库上查找各项？

16
00:00:47,047 --> 00:00:50,047
继承自活动记录的类方法，就叫做where。

17
00:00:50,050 --> 00:00:53,050
不必惊讶。这旨在模仿SQL的关键字WHERE。

18
00:00:53,053 --> 00:00:56,053
借此，你可基于属性选定事项。

19
00:00:56,056 --> 00:00:59,056
如电影等级匹配字符串，那我就能选定电影。

20
00:00:59,059 --> 00:01:04,059
如果我替换选定的符号，我还能更有效地

21
00:01:04,064 --> 00:01:08,064
编写更为复杂的条件。这些可以是

22
00:01:08,068 --> 00:01:12,068
我想要使用的任何符号。然后我提供井号，

23
00:01:12,072 --> 00:01:15,072
从而将这些符号映射至我想要匹配的数值。有时

24
00:01:15,075 --> 00:01:18,075
以这种方式可以更为清楚地编写更复杂的查询，因为这可以

25
00:01:18,078 --> 00:01:21,078
确定查询意图是什么。

26
00:01:21,081 --> 00:01:25,081
在我脑海里有个捷径。我心里记得某个等级。我想要

27
00:01:25,085 --> 00:01:28,085
单独指定这些项的数值是什么。这是如何完成的另一选项。

28
00:01:28,088 --> 00:01:31,088
这是个糟糕的主意。

29
00:01:31,091 --> 00:01:33,091
它会导致安全隐患，对此我们会在课内稍后看到。

30
00:01:33,093 --> 00:01:38,093
总的说来，你将字符串嵌入查询时，

31
00:01:38,098 --> 00:01:42,098
最好是你信任的字符串。如果用户曾以任何方式接触过该字符串，

32
00:01:42,102 --> 00:01:44,102
你必须立即假设该用户

33
00:01:44,104 --> 00:01:48,104
有不良企图或极有可能不具备资格，

34
00:01:48,108 --> 00:01:50,108
而这会干扰进入查询的字符串，像这样，进而导致

35
00:01:50,110 --> 00:01:53,110
残缺或恶意形成的查询，后者实际上更糟。

36
00:01:53,113 --> 00:01:56,113
使用事项像此符号篡改的原因正如你所想的那样， 

37
00:01:56,116 --> 00:01:59,116
在Rails内存在额外工具，

38
00:01:59,119 --> 00:02:02,119
在完成替代后会失效，

39
00:02:02,122 --> 00:02:05,122
从而确保你以合法语句结尾或

40
00:02:05,125 --> 00:02:07,125
至少以非恶意的语句作结。

41
00:02:07,127 --> 00:02:10,127
还有很多标准的把戏，恶意用户会尝试

42
00:02:10,130 --> 00:02:13,130
以此针对像这样的代码编写人。只要你选择

43
00:02:13,133 --> 00:02:16,133
使用Rails机制，它们可以规避大多数恶意动作。

44
00:02:16,136 --> 00:02:19,136
不过与此有关的隐藏事情是，你可以

45
00:02:19,139 --> 00:02:22,139
将这些事项束缚在一起。例如，我最初可以说， 

46
00:02:22,142 --> 00:02:26,142
“我要将儿童型定义为电影，其中等级为G。”

47
00:02:26,146 --> 00:02:31,146
你也许会问“在Rails内执行此操作时， 

48
00:02:31,151 --> 00:02:34,151
这样做的结果如何？”你可能会想结果就是

49
00:02:34,154 --> 00:02:36,154
类似于电影集合的东西，且从数据库

50
00:02:36,156 --> 00:02:39,156
提取出来。这实际上并不完全正确。

51
00:02:39,159 --> 00:02:42,159
结果是一个对象，如果你曾做过引用， 

52
00:02:42,162 --> 00:02:45,162
就会引发数据库查询，然后对其进行惰性求值。

53
00:02:45,165 --> 00:02:50,165
这意味着我此时可以说，这里还有儿童电影，同时

54
00:02:50,170 --> 00:02:53,170
这些儿童电影的发布日期让我们规定为30年前。

55
00:02:53,173 --> 00:02:57,173
这两个语句有什么影响？

56
00:02:57,177 --> 00:03:01,177
如果是即时查询，那么换言之，如果

57
00:03:01,181 --> 00:03:03,181
处理电影的行为引发数据库查询，那么

58
00:03:03,183 --> 00:03:06,183
我在此展示的代码就会引起两次查询； 

59
00:03:06,186 --> 00:03:10,186
每个WHERE一次。事实上，

60
00:03:10,190 --> 00:03:14,190
我在此展示的代码根本没做任何查询。

61
00:03:14,194 --> 00:03:17,194
在某种程度上，WHERE的语义是

62
00:03:17,197 --> 00:03:20,197
应返回一些行为类似集合的某些内容。请记住

63
00:03:20,200 --> 00:03:23,200
鸭子类型这样的Ruby概念。这表示，

64
00:03:23,203 --> 00:03:25,203
这是否是一个集合其实无关紧要，你只需要把它当成集合做事情就好。

65
00:03:25,205 --> 00:03:29,205
我们知道该集合都能做些什么吗？

66
00:03:29,209 --> 00:03:31,209
集合做的一件事是它们会响应each。

67
00:03:31,211 --> 00:03:35,211
它们可以自行列举。这里实际发生的事，

68
00:03:35,215 --> 00:03:38,215
可以使你理解引擎下正在发生什么，这在一定程度上

69
00:03:38,218 --> 00:03:40,218
稍后会以代码的形式存在，推测我们会说些东西，像是

70
00:03:40,220 --> 00:03:44,220
old_kid_movie.each 都会做些事情。

71
00:03:44,224 --> 00:03:46,224
我们要遍历一遍集合，然后使用每个元素进行操作。

72
00:03:46,226 --> 00:03:48,226
这就是查询发生的时间。只有我们切实

73
00:03:48,228 --> 00:03:52,228
试图获取结果的时机才是查询发生的时机。结果是

74
00:03:52,232 --> 00:03:55,232
你可以借助结合大量不同条件切实构建

75
00:03:55,235 --> 00:03:58,235
极为复杂的查询，

76
00:03:58,238 --> 00:04:00,238
而Rails含有相当复杂的优化器，可以生成良好的SQL。

77
00:04:00,000 --> 00:04:03,240
在这一切结束时，只有在你试图要求得到

78
00:04:03,243 --> 00:04:06,243
上述任一对象的值时，才是发生查询

79
00:04:06,246 --> 00:04:08,246
的时机，而不是之前。这是个很棒的功能，

80
00:04:08,248 --> 00:04:11,248
它是名为活动关系的活动记录组成部分。

81
00:04:11,251 --> 00:04:15,251
它基本上是内置的关系代数引擎。

82
00:04:15,255 --> 00:04:18,255
你采用那些方式读取材料？有一组方法以"find"开头。

83
00:04:18,258 --> 00:04:22,258
最简单的版本是，如果你碰巧

84
00:04:22,262 --> 00:04:24,262
知道某个内容的主键。我们简短地讲控制器时，

85
00:04:24,264 --> 00:04:26,264
会展示一些示例，借此你就会切实明白主键知识。

86
00:04:26,266 --> 00:04:29,266
只要返回错误且没有找到， 

87
00:04:29,269 --> 00:04:31,269
你愿意承受异常抛出的风险，则

88
00:04:31,271 --> 00:04:34,271
你可使用其主键搜索一些内容。

89
00:04:34,274 --> 00:04:37,274
你还可以说find_by_id，牢记ID 

90
00:04:37,277 --> 00:04:41,277
恰巧是Rails用于主键的列名，

91
00:04:41,281 --> 00:04:43,281
如电影表格中不存在ID，此时的主键更为友好，只返回nil， 

92
00:04:43,283 --> 00:04:48,283
而不会抛出一个异常情况。

93
00:04:48,288 --> 00:04:51,288
更为有意思的是基于属性的查找器。牢记

94
00:04:51,291 --> 00:04:54,291
我们设定movies表以具有例如标题与等级。

95
00:04:54,294 --> 00:04:58,294
我们可以说，通过等级查找所有电影，或借助

96
00:04:58,298 --> 00:05:02,298
评价符合此条件的单个或第一部电影，进行查找。

97
00:05:02,302 --> 00:05:05,302
find_by_rating！截至目前，你已经能够了解圆点搞清楚

98
00:05:05,305 --> 00:05:08,305
情况了。我们会适合异常。你们也许已经先我一步，想着，

99
00:05:08,308 --> 00:05:12,308
“啊哈，我就知道那个会怎样运转。在任何文件内都不存在那个代码。

100
00:05:12,312 --> 00:05:14,312
如果你想要在你的应用程序内

101
00:05:14,314 --> 00:05:17,314
整个源代码间查找find_by_rating， 

102
00:05:17,317 --> 00:05:20,317
你永远也不会找到它，这是因为由method_missing处理这一点。 

103
00:05:20,320 --> 00:05:24,320
对此你已经看过一个例子了，对吗？ 

104
00:05:24,324 --> 00:05:27,324
这里的规则是什么？你也许可以自己编写这个。

105
00:05:27,327 --> 00:05:31,327
如果你想要试着借助某个东西调用方法查找， 

106
00:05:31,331 --> 00:05:34,331
如果这个东西恰巧匹配你的表格内一列的属性名称， 

107
00:05:34,334 --> 00:05:39,334
那么这会转化成SQL查询， 

108
00:05:39,339 --> 00:05:43,339
而这基本上不是像WHERE条件的东西。事实上， 

109
00:05:43,343 --> 00:05:46,343
如果你正在思考，事实上你可以说按照等级与标题查找、

110
00:05:46,346 --> 00:05:49,346
按照发布日期查找等等。然后规则就是

111
00:05:49,349 --> 00:05:53,349
借助X与Y与Z完成查找，它们都由ands与下划线分隔，

112
00:05:53,353 --> 00:05:56,353
此外它们全部匹配属性名称，

113
00:05:56,356 --> 00:06:00,356
然后方法缺失会做它要做的事情。同样，这儿有个好例子，

114
00:06:00,000 --> 00:06:02,360
允许你处理一堆常见情况，你可以免费得到它们。

115
00:06:02,362 --> 00:06:05,362
这不像这个代码存在于某处，同时尚未予以使用，

116
00:06:05,365 --> 00:06:07,365
因为有method_missing，只有你切实尝试使用本功能， 

117
00:06:07,367 --> 00:06:09,367
才会发生这种情况。这不像你已得到围绕

118
00:06:09,369 --> 00:06:12,369
未使用项的大量函数。更新信息是如何做的？

119
00:06:12,372 --> 00:06:15,372
要更新有两种方法。假设我们已经

120
00:06:15,375 --> 00:06:19,375
使用了查找器之一以从数据库获取电影实例。

121
00:06:19,379 --> 00:06:21,379
我们可以做的一件事是我们可以调整

122
00:06:21,381 --> 00:06:24,381
到位的属性，然后我们可以保存对象。要记住，

123
00:06:24,384 --> 00:06:27,384
在我们拥有对象的内存副本与数据库副本之间

124
00:06:27,387 --> 00:06:30,387
存在巨大差异。这些副本截然不同。

125
00:06:30,390 --> 00:06:32,390
活动记录做的事情是向我们提供机理以同步保存它们，

126
00:06:32,392 --> 00:06:35,392
进而将它们连结在一起。只因为我们更改了

127
00:06:35,395 --> 00:06:38,395
内存副本内的发布日期，为更新数据库副本，

128
00:06:38,398 --> 00:06:42,398
我们应显式地再次保存对象。我们还可以

129
00:06:42,402 --> 00:06:45,402
进行组合。调用更新属性，可以让你

130
00:06:45,405 --> 00:06:49,405
在传递属性的散列及其新值。

131
00:06:49,409 --> 00:06:51,409
它会从核心角度运行。如果你想要立即更新

132
00:06:51,411 --> 00:06:54,411
多个属性，可以使它们尽数正确更新，抑或没有任何一项更新。

133
00:06:54,414 --> 00:06:59,414
你可以把这看成是以这种方式具有事务性。

134
00:06:59,419 --> 00:07:02,419
顺便说一句，我们会看到，活动记录的架构优势在于

135
00:07:02,422 --> 00:07:05,422
存在可修改数据库的多个不同

136
00:07:05,425 --> 00:07:09,425
活动记录调用。在最后，他们会

137
00:07:09,429 --> 00:07:12,429
通过名为保存的单点，彻底结束事务。有一个方法，借助使用Rails，

138
00:07:12,432 --> 00:07:15,432
你可以在数据库内编写内容前多做验证检查，

139
00:07:15,435 --> 00:07:17,435
从而确保你从未因任何原因

140
00:07:17,437 --> 00:07:20,437
编写无效数据。你只需要在一个地点

141
00:07:20,440 --> 00:07:23,440
放置该检查，因为可修改数据库的其他所有调用

142
00:07:23,443 --> 00:07:25,443
最终均通过那里汇集起来。

143
00:07:25,445 --> 00:07:30,445
我们讲到更高级的Rails课题时会讲解这个内容。

144
00:07:30,450 --> 00:07:34,450
delete是简单直接的。如果你之前从未在Rails内看到过它， 

145
00:07:34,454 --> 00:07:37,454
大概会让你觉得有趣的是，这是一个实例方法。

146
00:07:37,457 --> 00:07:40,457
你一开始应该命名对象，然后告诉它自行毁灭。

147
00:07:40,460 --> 00:07:43,460
你还可以编写行SQL查询以便实现这一点，

148
00:07:43,463 --> 00:07:46,463
不过你为什么这么做实际上有个很好的理由。

149
00:07:46,466 --> 00:07:49,466
事实上有一个名为delete的方法，

150
00:07:49,469 --> 00:07:52,469
这只会映射至你想要以行SQL为语言做的事情。调用销毁的原因

151
00:07:52,472 --> 00:07:55,472
与作为实例方法调用它的原因再次出现，

152
00:07:55,475 --> 00:07:57,475
再次假设我们已经得到Ruby世界且我们已经得到数据库世界。

153
00:07:57,477 --> 00:08:01,477
在数据库世界中，删除很简单。你使行蒸发掉。

154
00:08:01,481 --> 00:08:03,481
借此完成的数据库就好像这从没存在过一样。

155
00:08:03,483 --> 00:08:06,483
你的应用程序使用过程会更为复杂，在这样的情况下， 

156
00:08:06,486 --> 00:08:08,486
这很有可能正是问题所在。例如，假定我在评论中有

157
00:08:08,488 --> 00:08:13,488
几部电影，同时假设我删除一部电影。

158
00:08:13,493 --> 00:08:15,493
就这一点，视该电影而定的任何评论均不再有任何连接。

159
00:08:15,495 --> 00:08:19,495
在我的应用程序逻辑方面， 

160
00:08:19,499 --> 00:08:21,499
毁掉对象可能会产生一些后果， 

161
00:08:21,501 --> 00:08:25,501
我想要确保无论何时毁掉对象，我都有机会清除其他状态。

162
00:08:25,505 --> 00:08:28,505
正如我们即将看到的那样，借助销毁，你可以键入其他回调信号，

163
00:08:28,508 --> 00:08:31,508
这样在销毁对象时，你可以做其他各种事情。

164
00:08:31,511 --> 00:08:33,511
这有点像Java的finalizing，如果你想要这么看待它的话。

165
00:08:33,513 --> 00:08:36,513
摧毁是实例方法，不符合直觉，但这就是原因。

166
00:08:36,516 --> 00:08:39,516
你会找到你想要毁掉的内容， 

167
00:08:39,519 --> 00:08:44,519
然后你告诉它自行毁灭。

168
00:08:44,524 --> 00:08:48,524
Ruby会帮忙给我们提供相应技术，这样一旦我们切实就对象

169
00:08:48,528 --> 00:08:51,528
调用销毁，所以现在再次说明，数据库世界，Ruby世界

170
00:08:51,531 --> 00:08:53,531
的当前数据库会运作，这样那个对象就消失了，

171
00:08:53,533 --> 00:08:56,533
不过我们仍然有个M。我们已在Ruby内获得该数据结构。

172
00:08:56,536 --> 00:09:00,536
有东西会阻止我们尝试修改属性，即便我们知道我们

173
00:09:00,000 --> 00:09:02,540
无法再次保存，因为我们

174
00:09:02,542 --> 00:09:05,542
已经把它从数据库删除了。结果表明，这会失败， 

175
00:09:05,545 --> 00:09:08,545
因为一旦你从数据库毁掉对象，

176
00:09:08,548 --> 00:09:11,548
Rails就会变更标题的方式，而是基本显示说

177
00:09:11,551 --> 00:09:14,551
“不，对不起你不能这样做。”一旦你已毁掉一个对象，

178
00:09:14,554 --> 00:09:17,554
你可能会想setter仍会工作，

179
00:09:17,557 --> 00:09:19,557
不过它们实际上会引起异常。对象会被冻结。

180
00:09:19,559 --> 00:09:22,559
再次说明，这会起作用，因为对内部对象状态的

181
00:09:22,562 --> 00:09:25,562
所有访问均要通过setter与getter，

182
00:09:25,565 --> 00:09:27,565
同时我们可以修改它在运行时的作用方式。

183
00:09:27,567 --> 00:09:30,567
这是在支持阻塞时如何使用语言功能的另一个例子。

184
00:09:30,570 --> 00:09:35,570
这儿有我们迄今为止学到的活动记录知识，

185
00:09:35,575 --> 00:09:38,575
截至目前，活动记录是Rails中最有趣也最为重要的组成部分。

186
00:09:38,578 --> 00:09:41,578
这多少会让大家进入状态。如果你的

187
00:09:41,581 --> 00:09:44,581
子类来源于活动记录数据库，那么这就是你创建模型的方式。

188
00:09:44,584 --> 00:09:46,584
这表示你可以连接模型与数据库，同时为

189
00:09:46,586 --> 00:09:49,586
完成CRUD操作的四个基础实现内置行为。

190
00:09:49,589 --> 00:09:53,589
鉴于约定优于配置，你可以

191
00:09:53,593 --> 00:09:56,593
推导模型的名称、数据库表格的名称以及

192
00:09:56,596 --> 00:09:59,596
模型的代码文件名，这些名称均与简单规则组有关。

193
00:09:59,599 --> 00:10:03,599
默认情况下，活动记录会为你提供

194
00:10:03,603 --> 00:10:06,603
免费的setter与getter，它们均以表列命名。

195
00:10:06,606 --> 00:10:09,606
它们都会以你预期的方式运转。事实上，他们甚至

196
00:10:09,609 --> 00:10:13,609
会以略优于预期的方式运转。例如，不同的数据库， 

197
00:10:13,613 --> 00:10:15,613
像我的SQL与Postgres的比较关系， 

198
00:10:15,615 --> 00:10:19,615
针对像日期次数一类的特定类型具有不同的内部表示。

199
00:10:19,619 --> 00:10:22,619
Ruby具有日期时间类型。它具有多个不同的日期时间类型。

200
00:10:22,622 --> 00:10:26,622
在你向模型属性指定内容

201
00:10:26,626 --> 00:10:29,626
而该属性在数据库内具有日期时间值时， 

202
00:10:29,629 --> 00:10:32,629
Rails有个优点，就是在表达间来回转换。

203
00:10:32,632 --> 00:10:34,632
如果数据库具有作为日期时间的存储内容， 

204
00:10:34,634 --> 00:10:38,634
无论数据库的日期时间表达是什么，它都会保持标准。你拿回的是

205
00:10:38,638 --> 00:10:40,638
Ruby日期时间对象，其中含有所有重大日期时间行为。

206
00:10:40,640 --> 00:10:44,640
相反，当你为它设定新值时， 

207
00:10:44,644 --> 00:10:46,644
你可以向Ruby认定日期与时间表示

208
00:10:46,646 --> 00:10:49,646
合理的任何项设定数值。Rails会确保无论你使用的

209
00:10:49,649 --> 00:10:51,649
哪种数据库，它都会就此实现正确的序列化。

210
00:10:51,651 --> 00:10:54,651
setter与getter实际上会做不少工作。

211
00:10:54,654 --> 00:10:58,654
总的说来， 

212
00:10:58,658 --> 00:11:00,658
你已在内存中获取对象。你已在

213
00:11:00,000 --> 00:11:03,660
储存该对象的数据库内获取一行。这两者截然不同。

214
00:11:03,663 --> 00:11:06,663
活动记录会对结合两者的尝试构成阻碍， 

215
00:11:06,666 --> 00:11:08,666
不过这并非完美的阻碍。你会

216
00:11:08,668 --> 00:11:11,668
不时看到泄露情况。他们中的一项就像我说的那样，

217
00:11:11,671 --> 00:11:14,671
在你试图毁掉对象时，你仍可掌握内存副本。

218
00:11:14,674 --> 00:11:17,674
你无法使内存副本消失。

219
00:11:17,677 --> 00:11:20,677
在泄漏的阻塞中你可以做的最好的事就是

220
00:11:20,680 --> 00:11:22,680
避免自己尝试变更内存副本。

221
00:11:22,682 --> 00:11:24,682
这多少算是粗鲁的提醒，显示“嘿，你已经删掉

222
00:11:24,684 --> 00:11:25,684
对象了。”
