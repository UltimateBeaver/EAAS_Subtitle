1
00:00:00,000 --> 00:00:05,000
好了，我们回来继续我们的Rails旋风之旅。

2
00:00:05,005 --> 00:00:08,005
我们围绕着一个想法

3
00:00:08,008 --> 00:00:11,008
就是大多数Rails应用程序的职能就是操纵模型。

4
00:00:11,011 --> 00:00:14,011
模型是动作的所在地，有四个基本操作可以执行:

5
00:00:14,014 --> 00:00:17,014
创建、读取、更新和删除。

6
00:00:17,017 --> 00:00:20,017
现在我们要处理表单，

7
00:00:20,020 --> 00:00:23,020
将会涉及创建和更新动作。

8
00:00:23,023 --> 00:00:28,023
我们以前讲过读取动作。所以，大家都处理过表单了。

9
00:00:28,028 --> 00:00:30,028
表单允许我们在网站上填写少量内容，提交到服务器。

10
00:00:30,030 --> 00:00:32,030
有趣的是

11
00:00:32,032 --> 00:00:36,032
创建一个表单实际上需要两个交互过程，

12
00:00:36,036 --> 00:00:38,036
因为我们首先要做的是编写一个动作

13
00:00:38,038 --> 00:00:41,038
将表单提供给用户。

14
00:00:41,041 --> 00:00:44,041
然后，用户填写一些内容后再提交。

15
00:00:44,044 --> 00:00:46,044
所以这里需要两个动作。一个动作知道如何生成表单，

16
00:00:46,046 --> 00:00:49,046
另一个动作知道如何接受表单提交。

17
00:00:49,049 --> 00:00:51,049
所以现在我们要将它们作为两个独立的案例对待。

18
00:00:51,051 --> 00:00:55,051
所以我们必须知道如何生成表单？这是一个动作。

19
00:00:55,055 --> 00:00:57,055
当用户填写完他们的值，我们如何获得

20
00:00:57,057 --> 00:01:01,057
他们已经填写好的信息？而当我们获得信息后

21
00:01:01,061 --> 00:01:03,061
又该返回或提供什么？还记得

22
00:01:03,063 --> 00:01:06,063
我们处理HTTP的时候，也就是一个请求回复协议

23
00:01:06,066 --> 00:01:09,066
这意味着发出每个请求，都必须有视图返回

24
00:01:09,069 --> 00:01:11,069
因此如何正确地为这些不同种类的表单互动做到这一点？

25
00:01:11,071 --> 00:01:15,071
那么，继续我们有关如何使用Rails的

26
00:01:15,075 --> 00:01:17,075
指南。这是如何提交一个

27
00:01:17,077 --> 00:01:19,077
可提交表单的方法，我们来演练一下这个过程的每个步骤

28
00:01:19,079 --> 00:01:22,079
首先，我们必须确定提供实际表单的动作

29
00:01:22,082 --> 00:01:24,082
可以让用户填写数据的空白表单

30
00:01:24,084 --> 00:01:27,084
或者我们会看到表单可能

31
00:01:27,087 --> 00:01:30,087
已经填好了部分内容。例如，如果你正在

32
00:01:30,090 --> 00:01:33,090
变更一个已有资源，表单可能会显示

33
00:01:33,093 --> 00:01:36,093
已经填写好的旧信息，你可以输入新信息

34
00:01:36,096 --> 00:01:38,096
然后你必须确定哪个动作来接收

35
00:01:38,098 --> 00:01:41,098
提交的表单，从那里我们将获得

36
00:01:41,101 --> 00:01:43,101
用户输入的任何内容。我们必须确保

37
00:01:43,103 --> 00:01:47,103
这两个过程都有单独的路由、控制器动作和视图。

38
00:01:47,107 --> 00:01:51,107
如我们将会看到的，创建表单时，

39
00:01:51,111 --> 00:01:53,111
我们通过表单元素的名称属性获得

40
00:01:53,113 --> 00:01:55,113
用户输入的数据。它们(名称属性)将作为关键字

41
00:01:55,115 --> 00:01:58,115
出现在这个神奇的类似散列的参数里

42
00:01:58,118 --> 00:02:02,118
这个参数我们之前短暂地见过

43
00:02:02,122 --> 00:02:05,122
在这一部分及之后几个部分也将会见到几次。如我们所见

44
00:02:05,125 --> 00:02:09,125
Rails中内容有很多，但几个可供调用的不同辅助函数

45
00:02:09,129 --> 00:02:10,129
提供了最常见的情况

46
00:02:10,130 --> 00:02:13,130
好让我们不用手动创建所有表单

47
00:02:13,133 --> 00:02:17,133
事实上，可以说一个表单的Rails视图

48
00:02:17,137 --> 00:02:20,137
其实就是最终由一个模型返回的内容。

49
00:02:20,140 --> 00:02:22,140
因此你将看到许多用于创建和处理表单的

50
00:02:22,142 --> 00:02:26,142
辅助函数都是基于

51
00:02:26,146 --> 00:02:28,146
"表单完全就是模型的视图"这个理念，但这是一个可更新的视图

52
00:02:28,148 --> 00:02:31,148
因为用户可以输入内容。那么，我们先来谈谈

53
00:02:31,151 --> 00:02:33,151
如何创建表单。我们需要一个动作将表单提供给用户，

54
00:02:33,153 --> 00:02:36,153
好让他们可以填写。

55
00:02:36,156 --> 00:02:39,156
出于这个目的，我们将看一个非常简化的HTML表单。

56
00:02:39,159 --> 00:02:49,159
那么，一个简单的HTML表单有几点需要注意。

57
00:02:49,169 --> 00:02:54,169
这是一个简化版的表单，用于创建一部新电影。

58
00:02:54,174 --> 00:02:57,174
需要注意几点。首先，

59
00:02:57,177 --> 00:03:01,177
包含一切内容的实际表单标签，必须至少

60
00:03:01,181 --> 00:03:04,181
要有一个动作和方法。这将真正决定

61
00:03:04,184 --> 00:03:08,184
表单提交的地点。记住我们一直说

62
00:03:08,188 --> 00:03:11,188
路由是由HTTP方法和一个URI组成的，

63
00:03:11,191 --> 00:03:14,191
这里两者都有。HTTP方法将使用post，

64
00:03:14,194 --> 00:03:19,194
而这里是URI的路由部分。然后，表单内

65
00:03:19,199 --> 00:03:22,199
有一些元素。用户可以指定值，

66
00:03:22,202 --> 00:03:25,202
比如输入框和选择框。

67
00:03:25,205 --> 00:03:29,205
然后大家会注意到，所有输入信息都对应一个名称属性，

68
00:03:29,209 --> 00:03:31,209
这个名称属性将会成为我们在控制器方法中

69
00:03:31,211 --> 00:03:34,211
获得这些信息的关键字。现在，也许看起来有点奇怪。

70
00:03:34,214 --> 00:03:36,214
如果你来自另一个web环境，

71
00:03:36,216 --> 00:03:39,216
这些属性的名称都有括号，比如电影-括号-标题、电影-括号-评级。

72
00:03:39,219 --> 00:03:42,219
稍后我们将看到

73
00:03:42,222 --> 00:03:44,222
为什么这是一个有用的命名惯例。

74
00:03:44,224 --> 00:03:46,224
名称确实可以随意书写，但是按惯例做非常合理。

75
00:03:46,226 --> 00:03:52,226
我们生成名称表单。

76
00:03:52,232 --> 00:03:55,232
只有那些有名称属性的输入数据才会被提交。

77
00:03:55,235 --> 00:03:59,235
我们可以经常使用URI辅助函数和表单的动作部分。

78
00:03:59,239 --> 00:04:00,239
记住，我们说过Rails路径子系统的重点

79
00:04:00,000 --> 00:04:04,240
在于避免到处进行硬编码连接URI。

80
00:04:04,244 --> 00:04:06,244
事实上，它提供的这些辅助函数方法

81
00:04:06,246 --> 00:04:10,246
生成关联各种REST风格的动作，

82
00:04:10,250 --> 00:04:13,250
包括crud动作。实际上，我们已经看到过

83
00:04:13,253 --> 00:04:17,253
一个这样的例子。现在我们来看看

84
00:04:17,257 --> 00:04:20,257
用于创建这个简单表单的Rails代码。那么，这是表单，

85
00:04:20,260 --> 00:04:23,260
它将在到达浏览器时出现，但是简要地看看

86
00:04:23,263 --> 00:04:30,263
Haml里的内容。我的做法是，

87
00:04:30,270 --> 00:04:34,270
在Haml的每一行下面，插入一行或多行

88
00:04:34,274 --> 00:04:37,274
从Haml生成的HTML，

89
00:04:37,277 --> 00:04:41,277
这样你就能看到映射关系了。所以，这一行，

90
00:04:41,281 --> 00:04:45,281
包含之前我们在HTML表单中所看到的动作和方法，实际上来自于

91
00:04:45,285 --> 00:04:49,285
这个Haml标签。这是一种称为表单标签的Ruby方法。

92
00:04:49,289 --> 00:04:54,289
它要求一个参数，也就是这个表单的接收动作的URI。

93
00:04:54,294 --> 00:04:57,294
我们正使用一个URI辅助函数，所以在这里不需要硬编码一个URI。

94
00:04:57,297 --> 00:05:00,297
所以它才显示为表单标签电影路径。

95
00:05:00,000 --> 00:05:03,300
也许我应该说表单标签引用/电影，

96
00:05:03,303 --> 00:05:06,303
这样我有办法明确即将接收表单的

97
00:05:06,306 --> 00:05:10,306
URI的路径部分。表单标签有一个主体。

98
00:05:10,310 --> 00:05:14,310
将传递给它一个执行模块，而在主体内部，可以看到，

99
00:05:14,314 --> 00:05:17,314
表单中的某些字段，

100
00:05:17,317 --> 00:05:20,317
这里有一个文本字段的例子，用户可以为一部新电影

101
00:05:20,320 --> 00:05:24,320
输入一个名称。它在Haml中的来源

102
00:05:24,324 --> 00:05:27,324
是这个文本字段辅助函数方法。这里的情况是你正在告诉文本字段

103
00:05:27,327 --> 00:05:30,327
有这样一个模型叫做电影。

104
00:05:30,330 --> 00:05:33,330
它的其中一个属性是标题。我希望大家做的是生成一个

105
00:05:33,333 --> 00:05:36,333
适合编辑该属性的表单元素。

106
00:05:36,336 --> 00:05:39,336
所以，视图并不是你在设计表单，

107
00:05:39,339 --> 00:05:42,339
而是设计一个已经关联到模型的信息的

108
00:05:42,342 --> 00:05:45,342
可编辑版本。所以这就是为什么

109
00:05:45,345 --> 00:05:48,345
表单标签辅助函数就像文本字段一样。你不一定要使用这些。

110
00:05:48,348 --> 00:05:52,348
如果你愿意，你可以在Haml里编辑原始HTML代码，

111
00:05:52,352 --> 00:05:55,352
但是那样做的好处是目的明确，

112
00:05:55,355 --> 00:05:58,355
能让我们直截了当地将表单与之该编辑的模型属性

113
00:05:58,358 --> 00:06:00,358
相连接。
