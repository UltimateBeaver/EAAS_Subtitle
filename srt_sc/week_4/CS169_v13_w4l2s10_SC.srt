1
00:00:00,000 --> 00:00:04,000
关于路由，哪些陈述是正确的。它们都是由

2
00:00:04,004 --> 00:00:06,004
一个URI和一个HTTP方法组成。你同时需要这两部分来实现路由的唯一性。

3
00:00:06,006 --> 00:00:10,006
它必须使用这些URI辅助函数才能生成。

4
00:00:10,010 --> 00:00:13,010
它可能由这些URI辅助函数生成。显然B和C选项都是错的

5
00:00:13,013 --> 00:00:17,013
所以我们注意到没有人选这两个，但是所有四个选项中，选择…

6
00:00:17,017 --> 00:00:28,017
我想说几乎是全体一致选择了蓝色。

7
00:00:28,028 --> 00:00:32,028
除了三四个人，但是让我们来演练一下

8
00:00:32,032 --> 00:00:35,032
看A、B、C哪些是对的。路由

9
00:00:35,035 --> 00:00:39,035
由URI和方法组成。这绝对是对的，事实上

10
00:00:39,039 --> 00:00:43,039
当我们把这里的路由重新翻出来就看到了…我只要再做一遍

11
00:00:43,043 --> 00:00:52,043
就能看到结果，我们已经看到…

12
00:00:52,052 --> 00:00:54,052
这里两个不同的路由实例，好的

13
00:00:54,054 --> 00:00:58,054
它们调用了不同的控制器动作。路由的URL部分是相同的

14
00:00:58,058 --> 00:01:01,058
但HTTP方法不同，从而两个路由也不同

15
00:01:01,061 --> 00:01:05,061
我们确实都需要URL部分和HETP方法，

16
00:01:05,065 --> 00:01:10,065
所以A是对的，那B和C呢？

17
00:01:10,070 --> 00:01:12,070
记住，从web浏览器的角度考虑，

18
00:01:12,072 --> 00:01:15,072
web浏览器只知道URL，它不在乎

19
00:01:15,075 --> 00:01:17,075
URL如何写入视图，它只在乎当你点击它时

20
00:01:17,077 --> 00:01:21,077
它知道将你送往哪个URL地址。关于需要辅助函数

21
00:01:21,081 --> 00:01:24,081
帮助生成URL的想法，那是Rails框架里的功能，

22
00:01:24,084 --> 00:01:26,084
因为这样做很方便。你不一定要用它们，

23
00:01:26,086 --> 00:01:29,086
尽管如果你用了会更简单。

24
00:01:29,089 --> 00:01:31,089
但打开web浏览器时，它不会有任何不同

25
00:01:31,091 --> 00:01:34,091
Web浏览器没有REST的概念，也没有

26
00:01:34,094 --> 00:01:38,094
URI、辅助函数一类的概念，它只知道当你点击一个链接

27
00:01:38,098 --> 00:01:40,098
最好有代码告诉它该去哪里。

28
00:01:40,100 --> 00:01:41,100
就这样。
