1
00:00:00,000 --> 00:00:03,000
基于此，这儿有一个有关迁移的问题。

2
00:00:03,003 --> 00:00:06,003
即便你在技术方面直到五分钟前才刚刚学到这些，不过

3
00:00:06,006 --> 00:00:09,006
基于你已经学到的有关Rails的内容，基于你知道的关于Ruby与产出的知识

4
00:00:09,009 --> 00:00:13,009
以及事物运转的方式，这是向上方法的片段， 

5
00:00:13,013 --> 00:00:16,013
这我之前在示例中已经向大家展示过了。

6
00:00:16,016 --> 00:00:19,016
问题是创建表格并向相应块生成发回一定信息时，

7
00:00:19,019 --> 00:00:23,019
生成发回的信息类型可能是什么呢？

8
00:00:23,023 --> 00:00:26,023
对本示例内T是什么类型的

9
00:00:26,026 --> 00:00:29,026
合理推断是什么？这是表示数据库的对象吗？

10
00:00:29,029 --> 00:00:32,029
表示模型的实例的对象？

11
00:00:32,032 --> 00:00:36,032
表示数据库表格的对象，或考虑我们已有的信息，

12
00:00:36,036 --> 00:00:40,036
这可能是任何内容，同时这个问题可不公平。

13
00:00:40,040 --> 00:00:43,040
大家都觉得是什么？大家都觉得是什么？

14
00:00:43,043 --> 00:00:48,043
红色和绿色选项在投票的同学

15
00:00:48,048 --> 00:00:52,048
中间最受欢迎。那些没投票的同学，

16
00:00:52,052 --> 00:00:56,052
你们一定溜号了吧。再讨论一会儿，然后我们看看大家会倾向于

17
00:00:56,056 --> 00:00:59,056
红色与绿色间的哪个选项。

18
00:00:59,059 --> 00:01:06,059
我们应该再投一次票吧？再次投票结果显示，我认为红色

19
00:01:06,066 --> 00:01:13,066
在这个问题上胜出。虽然仍有些同学坚持

20
00:01:13,073 --> 00:01:16,073
绿色选项。让我们讲一遍这儿的答案。

21
00:01:16,076 --> 00:01:21,076
哪类内容会是TB……？你正查看代码， 

22
00:01:21,081 --> 00:01:24,081
但不熟悉代码apriori，这时

23
00:01:24,084 --> 00:01:28,084
软件工程师必须试着根据程序按路线

24
00:01:28,088 --> 00:01:30,088
发送的代码推测意图，这对工程师们来说可是个好技能。

25
00:01:30,090 --> 00:01:33,090
如果程序按照部分习俗确定代码的写法，我们会尽量向大家教授所有这样的习惯，

26
00:01:33,093 --> 00:01:36,093
那么在某些情况下，大家应该

27
00:01:36,096 --> 00:01:38,096
使用代码的相关内容，像是方法名称与背景，

28
00:01:38,098 --> 00:01:42,098
在该背景内，即便你之前从未见过，也可

29
00:01:42,102 --> 00:01:46,102
运用它们做一些推论。如果我们在本示例中加一运用，

30
00:01:46,106 --> 00:01:49,106
我们在此有几个事情可以讲一讲。T是否有可能是表示

31
00:01:49,109 --> 00:01:52,109
数据库的对象？我们使用T可以做什么？

32
00:01:52,112 --> 00:01:55,112
对此有一个方法称为日期时间。

33
00:01:55,115 --> 00:01:59,115
你们在我的原来的代码片段中注意到几种方法

34
00:01:59,119 --> 00:02:02,119
，例如字符串、文本与整数。讨论像那样对整个数据库

35
00:02:02,122 --> 00:02:05,122
调用方法，有什么意义吗？我对此持怀疑态度，

36
00:02:05,125 --> 00:02:09,125
这是因为数据库由表格集合构成。

37
00:02:09,129 --> 00:02:12,129
这是用于他们中的任何一个。这会是表示

38
00:02:12,132 --> 00:02:15,132
模型用例的对象吗？我们大体上讲解了模型的

39
00:02:15,135 --> 00:02:18,135
属性。我们说电影一般有

40
00:02:18,138 --> 00:02:21,138
发布时间、有字符串、还有别的什么。

41
00:02:21,141 --> 00:02:24,141
这些是将类作为整体的相关语句；

42
00:02:24,144 --> 00:02:27,144
它们并非关于特定类用例的语句。

43
00:02:27,147 --> 00:02:30,147
它会表示模型用例，这看上去不太可能。

44
00:02:30,150 --> 00:02:33,150
关于它可表示表格的假设如何？让我们看看。

45
00:02:33,153 --> 00:02:37,153
这是创建表格调用的参数。

46
00:02:37,157 --> 00:02:40,157
它讲的是各类事项表格关注的内容。表格关注属性，

47
00:02:40,160 --> 00:02:43,160
而这类属性就像名为发布日期且类型为日期时间的属性， 

48
00:02:43,163 --> 00:02:47,163
具有名称与类型。在我看来，这是最合理的假设，

49
00:02:47,167 --> 00:02:49,167
事实上这也是正确的假设。

50
00:02:49,169 --> 00:02:52,169
实际上在此生成的是

51
00:02:52,172 --> 00:02:55,172
基本表示待建表格，借助这种表格，

52
00:02:55,175 --> 00:02:58,175
你可以设定该表格的相关事项。从某种意义上说，

53
00:02:58,178 --> 00:03:00,178
你可以这样看待它，“这个问题不公平， 

54
00:03:00,000 --> 00:03:02,180
因为不允许你们查看文档等等。不过我认为

55
00:03:02,182 --> 00:03:05,182
这也是一个机会，即便你不熟悉Rails的相关内容， 

56
00:03:05,185 --> 00:03:08,185
你可以借此机会看看其他人尝试编写

57
00:03:08,188 --> 00:03:11,188
代码、命名方法并使用它们，借此你也许

58
00:03:11,191 --> 00:03:13,191
会就他们想要做什么掌握到某个线索。” 就是本课的

59
00:03:13,193 --> 00:03:14,193
这全部内容。

