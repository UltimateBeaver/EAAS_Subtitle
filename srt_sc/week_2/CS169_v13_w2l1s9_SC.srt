1
00:00:00,000 --> 00:00:06,000
好的，了解了这些，关于结对编程，哪一个表述是正确的？

2
00:00:06,006 --> 00:00:09,006
结对编程比单独编程速度更快、质量更好、成本更低、更轻松。

3
00:00:09,009 --> 00:00:13,009
Driver负责着手眼前的任务，

4
00:00:13,013 --> 00:00:17,013
而Observer负责对未来的任务进行战略思考。

5
00:00:17,017 --> 00:00:19,017
两人最终可以弄清楚谁是最好的Driver而谁是最好的Observer，

6
00:00:19,019 --> 00:00:22,019
然后便坚守各自的角色。

7
00:00:22,022 --> 00:00:26,022
我最喜欢的答案，对于编程人员人数不足的问题，无序结对是一种长期的解决方案。

8
00:00:26,026 --> 00:00:33,026
我认为这是很好的。

9
00:00:33,033 --> 00:00:44,033
各就各位，预备，投票。橙色和绿色混杂啊。

10
00:00:44,044 --> 00:00:50,044
你们互相聊一聊，然后我们再谈谈，然后再投票。

11
00:00:50,050 --> 00:00:52,050
让我们试着再次投票，各就各位，预备，投票。

12
00:00:52,052 --> 00:00:59,052
现在是绿色混着……绿色更多了。

13
00:00:59,059 --> 00:01:02,059
结对编程速度更快、质量更好、成本更低、更轻松。

14
00:01:02,062 --> 00:01:04,062
有一项研究表明，可能不见得更轻松。

15
00:01:04,064 --> 00:01:10,064
所以这个不正确。Driver负责着手眼前的任务，Observer

16
00:01:10,070 --> 00:01:12,070
负责对未来任务进行战略思考。第二个，我认为是正确的。

17
00:01:12,072 --> 00:01:15,072
并不是无序编程不能增加程序员的数量。

18
00:01:15,075 --> 00:01:23,075
我侥幸猜测。

19
00:01:23,083 --> 00:01:26,083
一个人负责努力前行，一个人负责观察前方，这是人的本性。

20
00:01:26,086 --> 00:01:29,086
这不是系统的运行方式。

21
00:01:29,089 --> 00:01:30,089
其实应该两人交替进行。这样对你有好处，对另一人也有好处。

22
00:01:30,090 --> 00:01:32,090


