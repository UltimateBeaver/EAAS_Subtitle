1
00:00:00,000 --> 00:00:05,000
好的， 快速问题。那么，哪种软件是彻底的失败呢？

2
00:00:05,005 --> 00:00:10,005
漂亮代码是一种彻底的失败吗？

3
00:00:10,010 --> 00:00:13,010
我们真的要选这个嘛？遗留代码，出乎意外的短命代码。

4
00:00:13,013 --> 00:00:18,013
遗留代码和出乎意外的短命代码都是彻底的失败，而C.其具有多样性。

5
00:00:18,018 --> 00:00:24,018
各就各位，预备，啊！我们其实，我找到了一个能让你们好好聊聊的问题了，

6
00:00:24,024 --> 00:00:27,024
好，那你们就好好跟身边的人聊聊吧

7
00:00:27,027 --> 00:00:32,027
然后互相讨论，看哪一答案最好。好了，让我们再投一次票试试，

8
00:00:32,032 --> 00:00:36,032
你们应该两两一起投票，

9
00:00:36,036 --> 00:00:42,036
好，各就各位，预备，投票。我感觉这次比上次红的更多了，

10
00:00:42,042 --> 00:00:45,042
那么，漂亮代码明显不是一种失败。

11
00:00:45,045 --> 00:00:49,045
出乎意外的短命代码是一种失败，你们知道，

12
00:00:49,049 --> 00:00:52,049
这种事情发生在联邦调查局文件档案，挺可悲的，实在太短命了，

13
00:00:52,052 --> 00:00:55,052
甚至都没怎么活过，就被取消了，他们没能成功。

14
00:00:55,055 --> 00:00:57,055
所以说这种事是会发生的，你们不应该想做这种事。

15
00:00:57,057 --> 00:01:00,057
所以，为什么说遗留代码不是失败呢？遗留代码可以为人们赚很多钱，

16
00:01:00,000 --> 00:01:04,060
对，它可以满足客户的需求，它只是质量不行，

17
00:01:04,064 --> 00:01:07,064
它只是，只是难以进化，所以没什么吸引力，

18
00:01:07,067 --> 00:01:11,067
但是它能用。所以说，彻底的失败，不一定是遗留代码。

19
00:01:11,071 --> 00:01:19,071
好了，我们继续。而这其实也相当于介绍了软件测试里的质量保证了。

20
00:01:19,079 --> 00:01:23,079
所以，什么是软件质量？什么是质量？

21
00:01:23,083 --> 00:01:27,083
质量保证是什么意思？你们知道，它对于软件而言是什么意思，

22
00:01:27,087 --> 00:01:30,087
而且你们可能听说过这个名词。

23
00:01:30,090 --> 00:01:34,090
V&V，或者叫检验与确认，这两者有何区别呢，

24
00:01:34,094 --> 00:01:36,094
它们听着像是近义词嘛，它俩有什么区别呢？

25
00:01:36,096 --> 00:01:40,096
那么，总得来说，如果你要上一门课，一门商务课程，

26
00:01:40,100 --> 00:01:43,100
他们所说的产品质量这个词，是指适用性。

27
00:01:43,103 --> 00:01:47,103
那么质量的意义，

28
00:01:47,107 --> 00:01:51,107
则是指对于顾客与生产者双方的商业价值。而质量保证Q.A.

29
00:01:51,111 --> 00:01:56,111
则是指能带来高质量产品的流程或标准，

30
00:01:56,116 --> 00:02:00,116
而且也能改进生产流程，

31
00:02:00,000 --> 00:02:04,120
QA包含这两方面内容。

32
00:02:04,124 --> 00:02:09,124
那么软件质量是什么意思呢，如我们说遗留代码的那些，它能满足顾客需求，

33
00:02:09,129 --> 00:02:12,129
而且易于使用，得出好的答案，不会崩溃之类的，

34
00:02:12,132 --> 00:02:15,132
但是更重要的是对于相当于生产者的开发者，

35
00:02:15,135 --> 00:02:20,135
它也易于调试。

36
00:02:20,140 --> 00:02:24,140
所以，软件质量保证，就是保证代码质量，优化软件组织流程。

37
00:02:24,144 --> 00:02:27,144
所以QA团队会着眼于软件本身的价值，

38
00:02:27,147 --> 00:02:31,147
然后看看有没有什么流程可以优化，

39
00:02:31,151 --> 00:02:38,151
而这通常被称为质量保证。

40
00:02:38,158 --> 00:02:41,158
检验与确认有什么区别呢？

41
00:02:41,161 --> 00:02:44,161
检验是指你是否达到了规格，

42
00:02:44,164 --> 00:02:48,164
这是这个词的意思。另一种表述方法就是，

43
00:02:48,168 --> 00:02:53,168
你有没有正确地构件东西。

44
00:02:53,173 --> 00:02:57,173
而确认，是指客户需要的真正的规格，

45
00:02:57,177 --> 00:03:01,177
这些规格可以正确反映出顾客想要的东西，

46
00:03:01,181 --> 00:03:04,181
所以另一种表述方法就是，你有没有构件正确的东西。

47
00:03:04,184 --> 00:03:08,184
好了，那这就是检验与确认。而大致上对于硬件，

48
00:03:08,188 --> 00:03:11,188
人们真的很清楚硬件应该是什么样的，

49
00:03:11,191 --> 00:03:14,191
对于处理器，通常是进行检验，而对于软件，则实际是进行确认，

50
00:03:14,194 --> 00:03:17,194
因为客户，就像你们在这门课上学到的，

51
00:03:17,197 --> 00:03:21,197
客户在看到东西之前，其实不是很清楚他们想要什么的。

52
00:03:21,201 --> 00:03:23,201
而一旦他们看到成品运行了，那并不是我真正想要的，

53
00:03:23,203 --> 00:03:27,203
然后他们就会要你修改它。

54
00:03:27,207 --> 00:03:31,207
而我们保证软件质量的方式是测试。所以测试，你们知道，是做不到穷尽的，

55
00:03:31,211 --> 00:03:34,211
即使你只有一个64位变量，

56
00:03:34,214 --> 00:03:38,214
即使你可以在1纳秒内完成64位变量的测试，

57
00:03:38,218 --> 00:03:41,218
一秒钟有2的30次方纳秒，

58
00:03:41,221 --> 00:03:44,221
而2的34次方纳秒则是500年。

59
00:03:44,224 --> 00:03:47,224
所以要穷尽测试一个64位变量，也要花500年时间，

60
00:03:47,227 --> 00:03:51,227
所以很明显，你是做不到的。所以，人们的做法是，

61
00:03:51,231 --> 00:03:54,231
分而治之，他们有不同级别的各种各样的测试，

62
00:03:54,234 --> 00:03:57,234
而你们依靠低级别的测试来进行工作，

63
00:03:57,237 --> 00:04:00,237
然后再进行更高级别的部分。

64
00:04:00,000 --> 00:04:03,240
所以，系统的经典方式是，在底层进行的单类别的测试，

65
00:04:03,243 --> 00:04:06,243
也叫单元测试，这种方法可以测试期望的模块化功能，

66
00:04:06,246 --> 00:04:11,246
测试会跨类别或跨单元进行，

67
00:04:11,251 --> 00:04:14,251
集成测试会把高级别的东西综合在一起，

68
00:04:14,254 --> 00:04:17,254
来确保得出正确假设。

69
00:04:17,257 --> 00:04:22,257
回忆一下火星轨道卫星的问题，他们使用了不同的单元。

70
00:04:22,262 --> 00:04:25,262
集成测试应当注意到这一点。

71
00:04:25,265 --> 00:04:28,265
然后是系统测试或验收测试，是指客户对其满意，并接受。

72
00:04:28,268 --> 00:04:33,268
另一些你会听到的关于测试的词，是黑盒测试

73
00:04:33,273 --> 00:04:37,273
和白盒测试。黑盒是指你只能看到规格说明，

74
00:04:37,277 --> 00:04:40,277
而白盒是指你可以深入了解到这些限制，从而得出原因。

75
00:04:40,280 --> 00:04:43,280
测试覆盖率是指代码路径被覆盖到的百分比，

76
00:04:43,283 --> 00:04:46,283
你对一切进行测试所用的，

77
00:04:46,286 --> 00:04:49,286
是尚未进行测试的那部分代码。

78
00:04:49,289 --> 00:04:53,289
回归测试的概念，{是指使你自己修改成这样}，而不是说，

79
00:04:53,293 --> 00:04:56,293
我认为，所有的测试都行得通。你尝试所有的测试，

80
00:04:56,296 --> 00:05:00,296
那你每一次做的时候，都要看有没有在编辑时破坏了什么。

81
00:05:00,000 --> 00:05:03,300
持续集成，有时也被称为C.I.

82
00:05:03,303 --> 00:05:07,303
是指每次你添加了什么新功能，都要彻夜一直持续地运行代码，

83
00:05:07,307 --> 00:05:13,307
而不是在之后进行测试。

84
00:05:13,313 --> 00:05:16,313
这样每次你检查时，它都在不断地被测试。

85
00:05:16,316 --> 00:05:18,316
我们可以进入下一个问题了。

