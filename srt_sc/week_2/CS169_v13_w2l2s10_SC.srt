1
00:00:00,000 --> 00:00:04,000
如果我定义...这里有三个储蓄帐户，

2
00:00:04,004 --> 00:00:08,004
我用不同的余额进行了初始化。

3
00:00:08,008 --> 00:00:10,008
假设我想把三个帐户组成数组，

4
00:00:10,010 --> 00:00:15,010
对这个数组调用sort，会发生什么？

5
00:00:15,015 --> 00:00:17,015
由于余额都是数字，我们知道如何比较，

6
00:00:17,017 --> 00:00:20,017
所以这个就可行吗？如果不可行，那是不是

7
00:00:20,020 --> 00:00:24,020
我添加一个比较方法或向sort传递比较方法

8
00:00:24,024 --> 00:00:28,024
就可行了吗？是不是认为不可行，

9
00:00:28,028 --> 00:00:31,028
但如果为储蓄帐户定义一个宇宙飞船操作符就可行了？

10
00:00:31,031 --> 00:00:34,031
还是说，这个就是不可行，因为这不是基本类型，

11
00:00:34,034 --> 00:00:37,034
太麻烦了，而且没有内置方式与操作符进行比较。

12
00:00:37,037 --> 00:00:39,037
第一轮投票。问题还没读完我就已经看到有人举牌了。

13
00:00:39,039 --> 00:00:44,039
大多数选红色的。

14
00:00:44,044 --> 00:00:49,044
你们今天不得了啊。现在把答案过一遍。

15
00:00:49,049 --> 00:00:52,049
“它是可行的，因为可以比较帐户余额。”

16
00:00:52,052 --> 00:00:54,052
我们当然希望是这样的情况，但帐户比较

17
00:00:54,054 --> 00:00:58,054
不同于整数型比较，所以不对。

18
00:00:58,058 --> 00:01:01,058
如果向sort传递一个比较方法，那不是Ruby的方式，

19
00:01:01,061 --> 00:01:04,061
对吧？在Ruby里面，sort会对你想要排序的内容做出假设，

20
00:01:04,064 --> 00:01:06,064
尤其是它知道如何与排序对象的实例进行比较。

21
00:01:10,070 --> 00:01:12,070
正确答案是：

22
00:01:10,070 --> 00:01:12,070
如果我们为储蓄帐户定义宇宙飞船操作符，

23
00:01:12,072 --> 00:01:15,072
对了，如何定义呢？

24
00:01:15,075 --> 00:01:23,075
简单的做法是，就和这个例子一样：

25
00:01:23,083 --> 00:01:29,083
这是对银行帐户定义比较的办法。就是这样，结果出来了。

26
00:01:29,089 --> 00:01:33,089
我们还剩下两分钟。是的，这就是对银行帐户定义比较的方式。

27
00:01:33,093 --> 00:01:36,093
我很懒，所以我只定义宇宙飞船，然后把

28
00:01:36,096 --> 00:01:40,096
{[comp- pra- bowl 00:01:40]包含起来，

29
00:01:40,100 --> 00:01:43,100
免费得到其它的东西。}如果你不相信，

30
00:01:43,103 --> 00:01:48,103
我会把代码拷贝和粘贴过来。

31
我已经定义了类帐户，那么现在...记不记得

32
这些帐户余额是很高的？可以说...OK？发言人2：[ 无法听清 00:02:03]

33
00:02:03,123 --> 00:02:08,123
发言人1：千真万确。（大笑）

34
00:02:08,128 --> 00:02:12,128
这里传达的意思是什么？Ruby提供了很多有用的功能来

35
00:02:12,132 --> 00:02:16,132
做你想做的事。你的任务...已经变化...

36
00:02:16,136 --> 00:02:19,136
你应该以最少的劳动

37
00:02:19,139 --> 00:02:22,139
获取需要的功能。

38
00:02:22,142 --> 00:02:25,142
如果你想重复使用某些行为，可以把它们放进模块里。

39
00:02:25,145 --> 00:02:28,145
模块是可以融入很多类的，

40
00:02:28,148 --> 00:02:30,148
只要你表达清楚它期望从融入的类中得到什么。

41
00:02:30,150 --> 00:02:34,150
如果你要重复使用implementation（实现），

42
00:02:34,154 --> 00:02:37,154
那应该用传统的办法。类是有祖先的，

43
00:02:37,157 --> 00:02:41,157
也有子类。和你们学JAVA的人想的相反，

44
00:02:41,161 --> 00:02:43,161
大多数时候你们想要的是第一种。

45
00:02:43,163 --> 00:02:46,163
你们不想重复使用implementation（实现），

46
00:02:46,166 --> 00:02:48,166
而是想定义行为并重复使用它们。




