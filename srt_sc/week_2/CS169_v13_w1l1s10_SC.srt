1
00:00:00,000 --> 00:00:03,000
那么，关于测试，哪一个说法不正确呢：凭借更好的测试覆盖率，

2
00:00:03,003 --> 00:00:07,003
你更可能找出错误。

3
00:00:07,007 --> 00:00:10,007
虽然很难达到，但是100%测试覆盖率可以保证设计可靠性，

4
00:00:10,010 --> 00:00:14,010
每一种高级测试都要把更详细的测试委托给低级测试，

5
00:00:14,014 --> 00:00:18,014
或是，单元测试是在模块测试的同一个类中进行或跨类进行。

6
00:00:18,018 --> 00:00:22,018
那么，这四句话里的哪一个是不正确的，错误的呢。我。

7
00:00:22,022 --> 00:00:28,022
那么C.K.，你为何不再考虑一秒呢，

8
00:00:28,028 --> 00:00:38,028
各就各位，预备，投票。好了，好，跟我想的一样，好吧。

9
00:00:38,038 --> 00:00:42,038
你们再讨论一下吧，我要做点事情。

10
00:00:42,042 --> 00:00:47,042
好了，让我们再试着投一次票，各就各位，预备，投票！

11
00:00:47,047 --> 00:00:53,047
好……这……好的，那么让我们让我们过一遍吧。

12
00:00:53,053 --> 00:00:56,053
凭借更好的测试覆盖率，你更可能找出错误：对。

13
00:00:56,056 --> 00:01:01,056
每一种高级测试都要把更详细的测试委托给低级测试，这是正确的。

14
00:01:01,061 --> 00:01:05,061
但是很难达到100%测试覆盖率来确保设计可靠性。

15
00:01:05,065 --> 00:01:10,065
这句话的问题就是，

16
00:01:10,070 --> 00:01:13,070
因为，你测试一切不意味着都测试得很好。

17
00:01:13,073 --> 00:01:16,073
所以这是在说，你可能已经测试了所有可能路径了，但做的测试其实很愚蠢，

18
00:01:16,076 --> 00:01:19,076
而你已经测试了。所以，

19
00:01:19,079 --> 00:01:22,079
达到100%测试覆盖率是一个很好的目标，但是没告诉你，你的测试进行得多好。

20
00:01:22,082 --> 00:01:25,082
所以你仍然可能有些重大的…

21
00:01:25,085 --> 00:01:28,085
容易在你们的软件里仍然可能出现重大漏洞，

22
00:01:28,088 --> 00:01:31,088
即便在单元测试和模块测试认可中做到了100%测试覆盖率。

23
00:01:31,091 --> 00:01:35,091
好，我们做得很好。好到我都可以进行下一部分了，

24
00:01:35,095 --> 00:01:41,095
很棒，我还担心呢，我不是过分乐观。

25
00:01:41,101 --> 00:01:45,101
那么，有一个情况，嗯，你们知道，

26
00:01:45,105 --> 00:01:49,105
在我们的领域里，那就是，我们一直要应对变化。

27
00:01:49,109 --> 00:01:52,109
而因为我们一直要应对变化，所以我们需要变得更高效。

28
00:01:52,112 --> 00:01:55,112
然后我们即将说说怎么做到这点。

29
00:01:55,115 --> 00:01:58,115
基本上，就是摩尔定律。我们在这个领域，

30
00:01:58,118 --> 00:02:02,118
期望事情每两年都可以翻倍。没有别的，

31
00:02:02,122 --> 00:02:04,122
没有别的技术可以做到这一点。这已经持续了几十年了。

32
00:02:04,124 --> 00:02:08,124
那么这个意思就是，硬件设计变得越来越大，

33
00:02:08,128 --> 00:02:12,128
处理器越来越快，储存越来越多，意味着软件变得越来越大，

34
00:02:12,132 --> 00:02:16,132
因为更快了嘛，而你们也会留下更大的足迹。

35
00:02:16,136 --> 00:02:19,136
而我们必须要做的就是提升软件生产率。

36
00:02:19,139 --> 00:02:22,139
那么到底大了多少呢，你们知道，这，

37
00:02:22,142 --> 00:02:25,142
这已经是100万倍的成本效益了，10亿倍……相当大的数字，是吧？

38
00:02:25,145 --> 00:02:29,145
假设我们仍然用50年前的方式写软件，

39
00:02:29,149 --> 00:02:32,149
写出一个大的，你们知道，一亿行的软件会花费上无限的时间

40
00:02:32,152 --> 00:02:35,152
但是我们有工具

41
00:02:35,155 --> 00:02:39,155
今天我们来做这个吧。所以，人们用的，其实有四种技术，只有四种技术。

42
00:02:39,159 --> 00:02:42,159
首先，是通过写短量的信息，使其简洁。

43
00:02:42,162 --> 00:02:45,162
他们从大量的信息转变而来，

44
00:02:45,165 --> 00:02:49,165
这是一个增加效率的好办法。

45
00:02:49,169 --> 00:02:52,169
合成代码：你甚至不用写。

46
00:02:52,172 --> 00:02:55,172
它自己就会为你生成，通过再用已经构件好的部分，

47
00:02:55,175 --> 00:02:58,175
这是一个提升效率的重大举措。以及最后，自动化和工具。

48
00:02:58,178 --> 00:03:04,178
让我们来过一遍。那么，第一个是简洁。

49
00:03:04,184 --> 00:03:09,184
所以，这里的这行，你们看到，这是一种写法，对吧？

50
00:03:09,189 --> 00:03:12,189
这是一些用你们写代码的方法的语言。

51
00:03:12,192 --> 00:03:15,192
但是有更紧凑的版本，这是，这是合法的Ruby语句，对吧？

52
00:03:15,195 --> 00:03:19,195
A应该大于等于7，

53
00:03:19,199 --> 00:03:21,199
读一下就明白了。更短了，

54
00:03:21,201 --> 00:03:25,201
字数更少了，也更好理解了。

55
00:03:25,205 --> 00:03:30,205
所以这是30大小的例子。总的来说，这是增加抽象度的例子。

56
00:03:30,210 --> 00:03:33,210
这也是高级语言为什么被发明的原因。

57
00:03:33,213 --> 00:03:36,213
其他的想法，像自动内存管理……你们知道，

58
00:03:36,216 --> 00:03:40,216
三十年前，我的朋友们会争论，你们知道，

59
00:03:40,220 --> 00:03:43,220
这是自动管理，不会帮到你很多，

60
00:03:43,223 --> 00:03:45,223
没有那么多漏洞。现在我们知道了，像C语言，

61
00:03:45,225 --> 00:03:49,225
如果你手动远程管理，会有很多漏洞。

62
00:03:49,229 --> 00:03:52,229
任何像Ruby这样的脚本语言，都有想法反映编程计划

63
00:03:52,232 --> 00:03:57,232
提升抽象度的水平。

64
00:03:57,237 --> 00:04:00,237
合成代码是这么一个想法，你生成你即将使用的代码，

65
00:04:00,000 --> 00:04:03,240
而不是亲自去写。

66
00:04:03,243 --> 00:04:08,243
一个例子就是BitBit，它就能生成代码，适应不同情况，

67
00:04:08,248 --> 00:04:12,248
因此而有一个循环，来进行{少量比特运动，一点条件语句，

68
00:04:12,252 --> 00:04:16,252
它将会生成情况，所以条件语句不必作为其第一示例}，

69
00:04:16,256 --> 00:04:20,256
而且现在在研究中，甚至在产品中

70
00:04:20,260 --> 00:04:22,260
有一种通过实例编程，

71
00:04:22,262 --> 00:04:26,262
所以你获得微软Excel的最新版本软件后，

72
00:04:26,266 --> 00:04:29,266
你可以给它一个实例，告诉它你想要它做什么，

73
00:04:29,269 --> 00:04:33,269
然后它就会生成一个宏，来为你执行。所以我们即将看到

74
00:04:33,273 --> 00:04:38,273
合成代码真的要出现在产品中了。

75
00:04:38,278 --> 00:04:41,278
再用，当然是用过第一代计算机的人都尝试过去做的事情。

76
00:04:41,281 --> 00:04:43,281
我们为何必须得去亲自写所有东西呢？

77
00:04:43,283 --> 00:04:47,283
我们干嘛不再用已经有了的代码呢？所以，首先，

78
00:04:47,287 --> 00:04:50,287
过程和函数几乎是处于计算机时代刚来临时就有，

79
00:04:50,290 --> 00:04:55,290
我们有这种标准化的库，一旦我们拥有了函数

80
00:04:55,295 --> 00:04:59,295
然后我们创造库，那么很多很多的人便可以使用它们了

81
00:04:59,299 --> 00:05:02,299
在我们能够将任务集合放在一起20年后左右，

82
00:05:02,302 --> 00:05:06,302
出现了面向对象编程。然后是设计模式，而我们

83
00:05:06,306 --> 00:05:08,306
在书里会讲到一整章关于设计模式的，

84
00:05:08,308 --> 00:05:11,308
在这门课上我们也会讲到，

85
00:05:11,311 --> 00:05:15,311
即使实施不同，我们也可以将其作为策略使用。

86
00:05:15,315 --> 00:05:20,315
最后的话题是自动化工具，我认为工具是计算机科学家做的：

87
00:05:20,320 --> 00:05:23,320
用来看问题，很繁琐

88
00:05:23,323 --> 00:05:27,323
让我们来构建一个工具，使其更易于使用。

89
00:05:27,327 --> 00:05:29,327
事实上，在这门课上，你们将做很多我们一直在做的事情，

90
00:05:29,329 --> 00:05:33,329
正是一些rails程序员发现有些事做起来很繁琐，

91
00:05:33,333 --> 00:05:36,333
于是构建了工具，因为在这种环境中比较容易构建工具，

92
00:05:36,336 --> 00:05:39,336
于是突然之间，它成了一个我们使用的工具。

93
00:05:39,339 --> 00:05:42,339
我想这是五年来我们第五次在课上教了。

94
00:05:42,342 --> 00:05:45,342
每一次我在班上教的时候，都会有一些新的工具，

95
00:05:45,345 --> 00:05:48,345
都是前一年还没有而这一年必须要用的工具，

96
00:05:48,348 --> 00:05:53,348
如果没有它们，我们都想象不到该如何使用rails。

97
00:05:53,353 --> 00:05:56,353
所以问题就是，很多程序在产生工具，好的，程序在产生工具。

98
00:05:56,356 --> 00:05:59,356
那么它们可靠吗，

99
00:05:59,359 --> 00:06:03,359
有好的用户界面吗？你如何从中选择呢？

100
00:06:03,363 --> 00:06:06,363
好，在这门课上，我们会帮助你们的，我和Armando和员工们会

101
00:06:06,366 --> 00:06:08,366
选出你们必须要学的工具。

102
00:06:08,368 --> 00:06:10,368
大概有五六种，但是你们知道，它们很管用，而且很可靠，

103
00:06:10,370 --> 00:06:13,370
而且在课程结束之后，你们必须要自己来弄明白这些。

104
00:06:13,373 --> 00:06:17,373
但是如我之前所说，软件工程，因为我们处在这个迅速发展的行业，这是……

105
00:06:17,377 --> 00:06:20,377
需要我们进行终身学习，

106
00:06:20,380 --> 00:06:23,380
在这里，你们将得一个实例，会得到很多学习工具的实例，

107
00:06:23,383 --> 00:06:27,383
你们会爱上它们的

108
00:06:27,387 --> 00:06:28,387


