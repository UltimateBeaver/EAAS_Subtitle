1
00:00:00,000 --> 00:00:09,000
好的，让我们来说说敏捷开发吧。一个问题就是，

2
00:00:09,009 --> 00:00:11,009
使用什么样的计划和文档，从而使其像土木工程一样可靠？

3
00:00:11,011 --> 00:00:16,011
它能工作得多好？

4
00:00:16,016 --> 00:00:19,016
有很多……，但是，它能工作得多好呢？

5
00:00:19,019 --> 00:00:23,019
这需要大量的文档、计划，而且要依靠经验丰富的经理，

6
00:00:23,023 --> 00:00:27,023
而且他或她得具有项目的资质与责任。

7
00:00:27,027 --> 00:00:30,027
还有什么可另选的模型吗？没有强大的项目经理，没有所有这些文档，

8
00:00:30,030 --> 00:00:32,030
我们还可以构建出来吗？

9
00:00:32,032 --> 00:00:36,032
如果可以的话，我们如何避免只是拼命进行编程呢？

10
00:00:36,036 --> 00:00:39,036
现在，在1970年之前，当时人们刚开始聚在一起，开始编程，

11
00:00:39,039 --> 00:00:41,039
当时的情况是怎样的呢？是不是只要能编程就是好的，

12
00:00:41,041 --> 00:00:44,041
而且这就是最好的构建方式呢？

13
00:00:44,044 --> 00:00:46,044
我不想花时间计划。我想现在立刻就开始拼命编程了。这是最好方法。

14
00:00:46,046 --> 00:00:49,046
现在我们已经知道这是一个坏方法了。

15
00:00:49,049 --> 00:00:52,049
好吧，如果不靠文档、程序员、强大的经理，那么其余选择是什么呢？

16
00:00:52,052 --> 00:01:02,052
你们回忆一下上一次，我们提到有四个……项目。

17
00:01:02,062 --> 00:01:05,062
好的，还有另外27个，

18
00:01:05,065 --> 00:01:09,065
都在一篇2005年的文章里有报道，

19
00:01:09,069 --> 00:01:14,069
他们损失了170亿没有，而且他们使用的方式就是“计划与文档”。

20
00:01:14,074 --> 00:01:17,074
这些可不是1960年代的项目了，对比？

21
00:01:17,077 --> 00:01:20,077
人们使用这些项目，所以事情会出错。

22
00:01:20,080 --> 00:01:24,080
事实上，我发现，三个调查，通过这些饼状图表示，

23
00:01:24,084 --> 00:01:27,084
“按时、符合预算的有多少？”让我来过一遍吧。

24
00:01:27,087 --> 00:01:33,087
1995年的这个写到：“基本上，六分之一，是按时、符合预算的。

25
00:01:33,093 --> 00:01:39,093
其中一半都超时超出预算了。

26
00:01:39,099 --> 00:01:42,099
而三分之一则被取消或作废。

27
00:01:42,102 --> 00:01:45,102
就是有这么糟糕，正如联邦调查局关注的：”似乎我们要放弃了。

28
00:01:45,105 --> 00:01:48,105
他们超出预算有多糟糕呢？他们的预算超出了三倍。

29
00:01:48,108 --> 00:01:52,108
超预算或超时达到三倍。我认为这得花六个月。

30
00:01:52,112 --> 00:01:57,112
不，18个月。这是一项调查。

31
00:01:57,117 --> 00:02:02,117
第二个项目调查说，只有八分之一按时按预算了，

32
00:02:02,122 --> 00:02:05,122
但是其实是乐观的看法。

33
00:02:05,125 --> 00:02:08,125
因为大概有一般的项目——总共约有1000个项目——其中一半仅仅是对

34
00:02:08,128 --> 00:02:11,128
遗留代码进行一些小小的改动，或者数据转换。

35
00:02:11,131 --> 00:02:15,131
其中约一半是新的开发项目。

36
00:02:15,135 --> 00:02:19,135
500个新的里面只有三个成为了项目，

37
00:02:19,139 --> 00:02:24,139
所以当时我们可能都在想，我们按时按预算了，那就是1%。

38
00:02:24,144 --> 00:02:29,144
最后这个调查是针对非常大型的项目的。是在2004年。

39
00:02:29,149 --> 00:02:31,149
人们开始使用一些效果稍稍好一点的流程了，

40
00:02:31,151 --> 00:02:38,151
但是仍然只有10%按时按预算完成了。20%或至少35%有可能，

41
00:02:38,158 --> 00:02:41,158
而剩下的那些都有着严重的延迟或者被取消。好吧。

42
00:02:41,161 --> 00:02:45,161
听起来这事儿进行得不怎么样啊。

43
00:02:45,165 --> 00:02:48,165
我们最喜欢的一句名言来自西蒙•佩雷斯，可不是每天都会在计算机科学班上

44
00:02:48,168 --> 00:02:52,168
被引用的。那句话是“一个问题如果没有解决办法，

45
00:02:52,172 --> 00:02:58,172
那可能就不是一个问题，而是一个客观事实

46
00:02:58,178 --> 00:03:01,178
——无须解决，让时间来处理好了。”

47
00:03:01,181 --> 00:03:05,181
所以，也许这些计划所导致的问题……或者变化，是导致问题的原因。

48
00:03:05,185 --> 00:03:08,185
我们不得不应对它。

49
00:03:08,188 --> 00:03:12,188
十几年前，有一群人遭遇了开发流程的挫折，

50
00:03:12,192 --> 00:03:14,192
聚到一起，然后他们又撤退了，

51
00:03:14,194 --> 00:03:17,194
依着山，撤退，然后又回来，逐字逐句解决，

52
00:03:17,197 --> 00:03:22,197
在下一张幻灯片上，就是他们所谓的“敏捷宣言”。他们是这么写的：

53
00:03:22,202 --> 00:03:24,202
“我们正在发现开发软件更好的方式，

54
00:03:24,204 --> 00:03:27,204
通过这么做，也帮助其他人来做到。通过这些努力，

55
00:03:27,207 --> 00:03:31,207
我们开始珍视这个团队了。”

56
00:03:31,211 --> 00:03:35,211
个人与交互大于流程与工具。有用的软件大于全面的文档。

57
00:03:35,215 --> 00:03:39,215
这对于文档流程的计划，是个直接的工作。

58
00:03:39,219 --> 00:03:43,219
客户合作大于合同谈判。

59
00:03:43,223 --> 00:03:46,223
所以，你与其坐在那里，不如想个计划出来，

60
00:03:46,226 --> 00:03:49,226
你能想出合同，然后就能达成合同。

61
00:03:49,229 --> 00:03:53,229
让我们与客户合作，让客户高兴吧。

62
00:03:53,233 --> 00:03:57,233
应对变化大于遵循计划。一大部分是，

63
00:03:57,237 --> 00:04:00,237
“嘿！把这做得像造桥一样可靠吧，

64
00:04:00,000 --> 00:04:03,240
我们必须有一个计划，然后坚持执行。”“不，我们还是不要……

65
00:04:03,243 --> 00:04:06,243
我们还是随机应变，而不是死守计划吧。”就是说，

66
00:04:06,246 --> 00:04:10,246
如果当右边的东西有价值时，我们就会更加在乎左边的东西。

67
00:04:10,250 --> 00:04:13,250
所以，这是十几年前了。他们在计划与文档大楼上，

68
00:04:13,253 --> 00:04:16,253
写下了这些涂鸦，并且说：

69
00:04:16,256 --> 00:04:18,256
“我们要做得与众不同。”

70
00:04:18,258 --> 00:04:22,258
好的。有这么一个支持者。

71
00:04:22,262 --> 00:04:25,262
他有一个敏捷的版本，被其称为“极限编程”或“XP”。

72
00:04:25,265 --> 00:04:29,265
那么他说了什么呢？他说，基本上，如果什么是好的话，

73
00:04:29,269 --> 00:04:35,269
就让我们把它做到极限吧。如果短迭代好，

74
00:04:35,275 --> 00:04:38,275
那么就把它们做得尽量短，让我们几天或几周做一次，

75
00:04:38,278 --> 00:04:42,278
而不是几个月或几年。如果简化好，

76
00:04:42,282 --> 00:04:46,282
那么就永远做可行的最简洁的东西。不要预期复杂。

77
00:04:46,286 --> 00:04:49,286
只要做你不得不做的最少的事情就行了。如果测试是好的，

78
00:04:49,289 --> 00:04:52,289
那就让我们一直测试吧，

79
00:04:52,292 --> 00:04:55,292
让我们在写代码之前就开始写测试吧。没有测试的话，你写不了代码的。

80
00:04:55,295 --> 00:05:00,295
最后，如果代码审查好的话，

81
00:05:00,000 --> 00:05:02,300
就让我们一直进行代码审查吧，

82
00:05:02,302 --> 00:05:07,302
用结对编程的方式，不断回头看。这是一个方法论的大变革。

83
00:05:07,307 --> 00:05:12,307
事实上，敏捷把变化视为一种无法改变的事实而接受。

84
00:05:12,312 --> 00:05:15,312
它不断改进着这些阶段，就像我们在瀑布式模型上看到的一样。

85
00:05:15,315 --> 00:05:19,315
基本思路就是，

86
00:05:19,319 --> 00:05:23,319
开发者要不断完善一个可用的、但不完整的原型，

87
00:05:23,323 --> 00:05:27,323
直到客户满意位置。你每一两周就要见一次客户，

88
00:05:27,327 --> 00:05:31,327
所以会有与客户合作的连续循环。

89
00:05:31,331 --> 00:05:34,331
然后，敏捷强调所谓的“测试驱动开发”。

90
00:05:34,334 --> 00:05:37,334
就是因为这个，你得在写代码之前写测试，然后我们会再聊聊这个的。

91
00:05:37,337 --> 00:05:41,337
我们的确会利用我们的故事，而我们也会在一两节课上讨论它们。

92
00:05:41,341 --> 00:05:44,341
基本上，你们要以一种非正式的方式与客户进行合作，

93
00:05:44,344 --> 00:05:48,344
来看看你会如何使用这个软件。

94
00:05:48,348 --> 00:05:50,348
速度就是我们衡量进度的方式。

95
00:05:50,350 --> 00:05:56,350
根据我们在过去所做的，来预测性能。

96
00:05:56,356 --> 00:06:02,356
这里就是书中的敏捷流程图。

97
00:06:02,362 --> 00:06:05,362
这本书分为两部分。第一部分是关于软件即服务。

98
00:06:05,365 --> 00:06:09,365
第二部分则关于敏捷。我们从与客户交谈开始。

99
00:06:09,369 --> 00:06:12,369
行为驱动设计，以及利用故事。这样达到了一个高水平的设计，

100
00:06:12,372 --> 00:06:15,372
然后实施测试驱动开发。

101
00:06:15,375 --> 00:06:18,375
我们用速度衡量进度。我们部署到……

102
00:06:18,378 --> 00:06:21,378
到客户，让客户看它，然后再和客户交流。

103
00:06:21,381 --> 00:06:25,381
所以，在这门课上的项目中，你们要重复这个环四次，

104
00:06:25,385 --> 00:06:29,385
那么，如何处理遗留项目呢？

105
00:06:29,389 --> 00:06:31,389
这是五六个业界领先的软件公司的第一要求。

106
00:06:31,391 --> 00:06:35,391
好的，我们来做一个关于遗留项目的作业吧。

107
00:06:35,395 --> 00:06:39,395
事实证明，同样的方法论适用于遗留项目、设计模式、乃至架构。

108
00:06:39,399 --> 00:06:41,399
另一个重要的软件给了我想法，我们也会说到的。

109
00:06:41,401 --> 00:06:46,401
现在在说着的，是一个关于敏捷是什么的话题。

110
00:06:46,406 --> 00:06:49,406
在它到来的十几年前，

111
00:06:49,409 --> 00:06:52,409
反应是什么，敏捷是什么？

112
00:06:52,412 --> 00:06:56,412
它对软件工程界有着强烈的过敏反应。

113
00:06:56,416 --> 00:07:00,416
这里有一个名言。这是有人出版的。

114
00:07:00,000 --> 00:07:02,420
他们关起门来是怎么说的，我不知道，

115
00:07:02,422 --> 00:07:07,422
但他们在书面上，在杂志上是这么说的。

116
00:07:07,427 --> 00:07:10,427
“敏捷只不过是对破坏软件工程原则的又一次尝试。

117
00:07:10,430 --> 00:07:15,430
它无非是试图将黑客行为合法化。”

118
00:07:15,435 --> 00:07:17,435
不仅有人写文章，还有人写一整本书来讲这些。

119
00:07:17,437 --> 00:07:21,437
在2001年到2002年期间，出了一本400页的书，

120
00:07:21,441 --> 00:07:28,441
说敏捷是个坏点子。400页都在给出答案。

121
00:07:28,448 --> 00:07:32,448
它吸引到人们的注意了。那今天如何呢？今天，它很管用。

122
00:07:32,452 --> 00:07:35,452
它是一个被接受的做法。我们看了一个66个软件工程项目的调查，

123
00:07:35,455 --> 00:07:39,455
大多数都使用了敏捷。

124
00:07:39,459 --> 00:07:43,459
虽然是在分布式环境中使用的。对于这个领域，

125
00:07:43,463 --> 00:07:46,463
有一本教科书，而且现在只介绍敏捷了，其实提出一系列问题，

126
00:07:46,466 --> 00:07:49,466
例如：“我们何时应该使用敏捷”、

127
00:07:49,469 --> 00:07:53,469
“这是不是一个好的理念呢？”基本上，回答“是”就意味着

128
00:07:53,473 --> 00:07:57,473
使用计划与文档，在我看来就是敏捷。你是不是必须得做一个规格说明呢？

129
00:07:57,477 --> 00:08:01,477
是不是没有客户了？它会变得很复杂吗？

130
00:08:01,481 --> 00:08:05,481
它会变成复杂的实时吗？

131
00:08:05,485 --> 00:08:08,485
它会有一个很长的产品寿命线吗？你们在使用差劲的工具吗？

132
00:08:08,488 --> 00:08:13,488
不论何故，如果你们使用了差劲的工具……进行敏捷开发，

133
00:08:13,493 --> 00:08:16,493
你需要用好的工具。

134
00:08:16,496 --> 00:08:20,496
项目团队是按地理分布的吗？面向文档，是一部分文化吗，

135
00:08:20,500 --> 00:08:24,500
也许是来自土木工程或别的什么？这些团队有差劲的程序员吗？

136
00:08:24,504 --> 00:08:28,504
如果你的程序员很搓，你抱怨然后记录到文档。

137
00:08:28,508 --> 00:08:32,508
它会受到监管吗？它必须要遵循特定的适用法律。

138
00:08:32,512 --> 00:08:35,512
基本上，如果你想一下我们所教的内容，

139
00:08:35,515 --> 00:08:38,515
答案几乎都是“不”。事实上，

140
00:08:38,518 --> 00:08:42,518
没有一题的答案是“是”，

141
00:08:42,522 --> 00:08:44,522
这也是为什么我们要在课上强调敏捷的原因。

