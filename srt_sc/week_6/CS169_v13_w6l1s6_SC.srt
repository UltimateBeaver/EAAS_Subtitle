1
00:00:00,000 --> 00:00:13,000
好的，首次投票。来看首次投票效果。好，我觉得有相当多人赞同，

2
00:00:13,013 --> 00:00:16,013
我觉得我们还是来看看具体答案是怎样吧。

3
00:00:16,016 --> 00:00:20,016
那么关于隐形要求，哪些说法是正确的呢？

4
00:00:20,020 --> 00:00:23,020
首先，隐形要求多数但不一定都是从显性要求导出。

5
00:00:23,023 --> 00:00:26,023
这当然是完全正确的。

6
00:00:26,026 --> 00:00:28,026
我们刚看到一个简单的示例，其中的显性示例表明

7
00:00:28,028 --> 00:00:31,028
具体方法应该做些什么，不过它没有表示当这种方法出现问题会怎样，

8
00:00:31,031 --> 00:00:33,031
或是可能失败的情况是什么，

9
00:00:33,033 --> 00:00:36,033
以及我们该如何应对这种情况。

10
00:00:36,036 --> 00:00:38,036
那么，我们还要导出部分隐形要求，

11
00:00:38,038 --> 00:00:40,038
即便这些并非是我们希望代码所要完成的任务，对不对？

12
00:00:40,040 --> 00:00:42,040
通常，当我们思考希望让代码做些什么时，

13
00:00:42,042 --> 00:00:46,042
我们常常会根据代码运行正常时的表现来进行考虑，这也没问题。

14
00:00:46,046 --> 00:00:48,046
我们常常希望是一切顺利。

15
00:00:48,048 --> 00:00:50,048
有时隐形要求是源自可能会出现的各种不利情况。

16
00:00:50,050 --> 00:00:54,050
隐形要求仅仅适用于单元和功能测试么？

17
00:00:54,054 --> 00:00:57,054
也不尽然。

18
00:00:57,057 --> 00:01:00,057
隐形要求也可以是来自集成测试，

19
00:01:00,000 --> 00:01:04,060
或是用户验收测试。实际上，用户常常会有同样的问题，对不对？

20
00:01:04,064 --> 00:01:07,064
他们基本也会以为是一切顺利，

21
00:01:07,067 --> 00:01:10,067
而在每一步，经常会有可能会出这样或那样的错。

22
00:01:10,070 --> 00:01:12,070
当用户出现错误，

23
00:01:12,072 --> 00:01:16,072
或用户想做一些自以为会奏效但其实毫无效果的事情时，

24
00:01:16,076 --> 00:01:18,076
大家要做出明智的反应。

25
00:01:18,078 --> 00:01:21,078
那么，在这些情况下，大家还是在导出这些隐形要求……

26
00:01:21,081 --> 00:01:23,081
那么如果我们并不顺利该怎么办呢？

27
00:01:23,083 --> 00:01:26,083
那么怎样才是合理的行为呢？

28
00:01:26,086 --> 00:01:29,086
大家也需要对此进行测试。

29
00:01:29,089 --> 00:01:33,089
测试隐形要求并非优先权较低，

30
00:01:33,093 --> 00:01:37,093
因为当用户出现问题，但是在意料之中时的反应在某种程度上

31
00:01:37,097 --> 00:01:38,097
与他们做对但也在意料之中时的反应具有相同的重要性。

32
00:01:38,098 --> 00:01:41,098
从用户的角度来看，如果他们看到一条神秘的错误信息，

33
00:01:41,101 --> 00:01:44,101
而不是更有帮助性的提示，如

34
00:01:44,104 --> 00:01:48,104
“哦，你想做X,但是你现在没法完成这一步的原因在这里。”

35
00:01:48,108 --> 00:01:50,108
大家需要实施并测试这些代码路径，

36
00:01:50,110 --> 00:01:52,110
因为在用户看来，如果他们不理解为何会失败，应用程序就无法运行，对不对？

37
00:01:52,112 --> 00:01:54,112
如果他们并未获得自己出错的反馈，

38
00:01:54,114 --> 00:01:58,114
那么就无法更有效地运行应用程序。

39
00:01:58,118 --> 00:02:00,118
那么，在我看来，问题的答案就是

40
00:02:00,000 --> 00:02:03,120
第一种说法是正确的，第二和第三种说法大部分不成立。

41
00:02:03,123 --> 00:02:06,123
也就导致第四种说法

42
00:02:06,126 --> 00:02:06,126
也不正确。

