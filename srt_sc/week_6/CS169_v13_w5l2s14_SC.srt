1
00:00:00,000 --> 00:00:09,000
好了，台上已投票。其他人投票吧。好了， 

2
00:00:09,009 --> 00:00:11,009
这是一个讨论的好话题。你们讨论的时候， 

3
00:00:11,011 --> 00:00:17,011
我会准备件有趣的事情，最后两分钟我们来做。好了，

4
00:00:17,017 --> 00:00:18,017
我们进行第二次投票，接下来要检查答案，

5
00:00:18,018 --> 00:00:24,018
还有4分钟玩推理。看来，我们

6
00:00:24,024 --> 00:00:28,024
大多数投绿色，少数人选蓝色。

7
00:00:28,028 --> 00:00:31,028
我们来检查一下。第一个结果不应为空。

8
00:00:31,031 --> 00:00:34,031
非常好。我们以前见过类似的。结果应

9
00:00:34,034 --> 00:00:37,034
不匹配正则表达式，绝对合理。

10
00:00:37,037 --> 00:00:40,037
这也是内置插件之一。但还是有点疑问，因为

11
00:00:40,040 --> 00:00:44,040
当你表达什么应是什么，你就在寻找一个

12
00:00:44,044 --> 00:00:49,044
{黄金参数}，对不对？无论5是不是结果。

13
00:00:49,049 --> 00:00:52,049
我们要去分辨一些属性的真假，

14
00:00:52,052 --> 00:00:55,052
<=>操作符不算对称，对不对？ 

15
00:00:55,055 --> 00:00:58,055
无论第一件事小于，等于还是大于第二件事，

16
00:00:58,058 --> 00:01:00,058
<=>会依据情况返回三个可能值之一。

17
00:01:00,000 --> 00:01:05,060
无论是否符合策略，这都有点离题。

18
00:01:05,065 --> 00:01:07,065
之所以混乱，是因为没有办法说明其涵义。

19
00:01:07,067 --> 00:01:10,067
如果我之前说过5应小于结果，那就可以说得通。

20
00:01:10,070 --> 00:01:12,070
“宇宙飞船”操作符不会返回真或假。

21
00:01:12,072 --> 00:01:15,072
事实上，技术上来讲， 

22
00:01:15,075 --> 00:01:19,075
它总是返回一个非假的值，对不对？0，1或-1

23
00:01:19,079 --> 00:01:21,079
......因为他们不是Ruby程序下的Nil,

24
00:01:21,081 --> 00:01:25,081
他们就成了“真”。这里的正确答案是，

25
00:01:25,085 --> 00:01:27,085
5应是飞船的结果，这并不很合适，

26
00:01:27,087 --> 00:01:30,087
因为它实际上想要一个二进制值的东西，一个常难得，

27
00:01:30,090 --> 00:01:32,090
而这个不是。

