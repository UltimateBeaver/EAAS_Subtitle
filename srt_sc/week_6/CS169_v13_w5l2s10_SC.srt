1
00:00:00,000 --> 00:00:08,000
让我们先来开始投票。大部分人投了红色，

2
00:00:08,008 --> 00:00:11,008
小部分投了黄色和橘色。让我们来思考30秒，这应该足够了。

3
00:00:11,011 --> 00:00:19,011
好，我们再投一次。大部分人都投给了红色，

4
00:00:19,019 --> 00:00:23,019
还有其他颜色。在我们讨论答案之前，

5
00:00:23,023 --> 00:00:28,023
让我们先来看看代码。记住我之前说的，

6
00:00:28,028 --> 00:00:31,028
我们的目标是让代码可以通过测试。

7
00:00:31,031 --> 00:00:33,031
我们很快就将实现这一点。在这个测试中，

8
00:00:33,033 --> 00:00:37,033
我们实际上是指明了被测试的代码需要实现什么功能。

9
00:00:37,037 --> 00:00:40,037
不论测试用例是什么，我们关心的是最终实现这些功能

10
00:00:40,040 --> 00:00:43,040
当我们实现这段代码

11
00:00:43,043 --> 00:00:46,043
实现测试代码所指明的。

12
00:00:46,046 --> 00:00:51,046
有人应该已经尝试了调用Movie类中的call_in_TMDB方法，

13
00:00:51,051 --> 00:00:54,051
并且已经尝试了传递hardware这个参数。

14
00:00:54,054 --> 00:00:57,054
如果我们尝试把之前讨论的

15
00:00:57,057 --> 00:01:00,057
关于method missing和元编程等内容结合在一起，

16
00:01:00,000 --> 00:01:03,060
我们应该很快能够意识到

17
00:01:03,063 --> 00:01:06,063
在Ruby中有一个非常简便的实现方法。大家可能会想

18
00:01:06,066 --> 00:01:09,066
“如果我们希望实现某些方法，

19
00:01:09,069 --> 00:01:12,069
或知道这个方法会如何被调用，那我就知道该怎么做了。”

20
00:01:12,072 --> 00:01:15,072
我们可以直接打开定义这个方法的类，

21
00:01:15,075 --> 00:01:18,075
重新定义一下这个方法，然后我们可以监控这个方法是否被调用过。

22
00:01:18,078 --> 00:01:21,078
之后运行测试用例，当测试用例运行完成后，

23
00:01:21,081 --> 00:01:24,081
我们就可以知道其他部分是否有调用过这个函数。

24
00:01:24,084 --> 00:01:29,084
有了这个想法，

25
00:01:29,089 --> 00:01:32,089
我们可以用这个方法替代掉实际调用的方法。

26
00:01:32,092 --> 00:01:35,092
所以第一个选项是正确的。即使该方法已经存在，

27
00:01:35,095 --> 00:01:38,095
这依然会覆盖掉这个实际调用的方法。所以第二个选项也是正确的。

28
00:01:38,098 --> 00:01:41,098
大家一定要记住这一点。

29
00:01:41,101 --> 00:01:45,101
下面我们来看第三个选项。

30
00:01:45,105 --> 00:01:47,105
代码实现在调用它的代码之前或之后完成都可以。

31
00:01:47,107 --> 00:01:50,107
这个是难住我们的选项。如果我们希望能监控一个方法，

32
00:01:50,110 --> 00:01:53,110
那么我们必须在这个方法被调用之前就明确这个需求。

33
00:01:53,113 --> 00:01:56,113
如果我们没有在调用之前就实现这个功能，

34
00:01:56,116 --> 00:01:58,116
那么我们就无法监控哪部分调用了这个方法。

35
00:01:58,118 --> 00:02:02,118
如果我们是通过重定义这个方法来实现监控，

36
00:02:02,122 --> 00:02:04,122
那么我们就可以检查这个方法是否被正确调用。

37
00:02:04,124 --> 00:02:08,124
他利用了开放类的特性，

38
00:02:08,128 --> 00:02:10,128
因为通过我们的实现，

39
00:02:10,130 --> 00:02:13,130
精妙地原地重新定义了方法。

40
00:02:13,133 --> 00:02:16,133
在课本中对这部分有很好的详述。我觉得这部分叙述很好。

41
00:02:16,136 --> 00:02:19,136
可能是因为那是我写的。这部分介绍了

42
00:02:19,139 --> 00:02:22,139
如何在静态编译语言，

43
00:02:22,142 --> 00:02:24,142
或在必须通过重新链接来重写

44
00:02:24,144 --> 00:02:26,144
某个特定类中的特定方法的语言中，实现以上方法。

45
00:02:26,146 --> 00:02:29,146
最下面一行，TLDR版本就是一个带有开放类的动态语言。

46
00:02:29,149 --> 00:02:33,149
现在大家都明白

47
00:02:33,153 --> 00:02:37,153
为什么只有第三个红色的选项是错误的了吧？

48
00:02:37,157 --> 00:02:40,157
好，这道题我们就讨论到这。

