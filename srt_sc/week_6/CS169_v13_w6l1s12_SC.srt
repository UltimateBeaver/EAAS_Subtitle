1
00:00:00,000 --> 00:00:03,000
投票。我希望能留一分钟来做上次没能完成的有趣内容。

2
00:00:03,003 --> 00:00:08,003
好的，大家可以用1分钟时间讨论，因为这样

3
00:00:08,008 --> 00:00:13,008
我们还可以留出两分钟时间给有趣的内容。修改投票。

4
00:00:13,013 --> 00:00:18,013
修改投票。我们需要给电子游戏留出时间。修改投票。

5
00:00:18,018 --> 00:00:22,018
修改投票。哎呀，这么多人表示不同意啊。

6
00:00:22,022 --> 00:00:25,022
我们先来看这些说法。

7
00:00:25,025 --> 00:00:28,025
正式方法造价不菲，但对验证重要应用非常必要。好吧，我真不愿意告诉大家

8
00:00:28,028 --> 00:00:30,028
如果你们认为Google搜索这类应用相当重要的话，

9
00:00:30,030 --> 00:00:32,030
我可以相当肯定的是Google搜索并未经正式验证。

10
00:00:32,032 --> 00:00:36,032
当大家可以使用正式方法时，这种方法相当棒，

11
00:00:36,036 --> 00:00:39,036
可是有时人们并不能真正掌握在非常大型的系统中该如何使用这些方法。

12
00:00:39,039 --> 00:00:42,039
还有些系统，即便大家希望对之进行正式验证，

13
00:00:42,042 --> 00:00:44,042
它们也无法真正做到这一点。

14
00:00:44,044 --> 00:00:46,044
另外，航天飞机软件也同样如此。

15
00:00:46,046 --> 00:00:49,046
它是认真遵照P&D策略完成的，不过并未经过正式验证。

16
00:00:49,049 --> 00:00:52,049
虽然大家觉得第一种说法非常亲切，应该是正确的，

17
00:00:52,052 --> 00:00:56,052
可事实并非如此。

18
00:00:56,056 --> 00:00:58,056
P＆D开发人员愿意在编写测试前进行编码。

19
00:00:58,058 --> 00:01:01,058
除了P＆D项目特别采用了测试驱动开发之外，一般情况下，这种说法没有问题。

20
00:01:01,061 --> 00:01:04,061
有时会有这种情况发生，

21
00:01:04,064 --> 00:01:08,064
不过这不是P＆D项目的规范。敏捷开发人员常常会亲自进行模块集成、

22
00:01:08,068 --> 00:01:10,068
系统验收测试等工作。

23
00:01:10,070 --> 00:01:14,070
这是正确的。在大多数P＆D机构中，

24
00:01:14,074 --> 00:01:16,074
会有单独的小组负责部分测试功能等工作，这也是正确的。

25
00:01:16,076 --> 00:01:19,076
三明治集成方法在试图充分发挥两种领域中的优点，

26
00:01:19,079 --> 00:01:22,079
在降低stub数量的同时，

27
00:01:22,082 --> 00:01:26,082
还在早期实现部分一般性功能。这也是正确的。

28
00:01:26,086 --> 00:01:28,086
这样来说，第一种说法是错误的：

29
00:01:28,088 --> 00:01:31,088
正式方法造价不菲，这部分说法没问题，不过对验证重要应用程序非常必要这部分并不正确。

30
00:01:31,091 --> 00:01:34,091
有些大型应用程序非常重要，

31
00:01:34,094 --> 00:01:37,094
不过我们还不能在其中使用正式方法，

32
00:01:37,097 --> 00:01:39,097
因为它们实在过于庞大。

