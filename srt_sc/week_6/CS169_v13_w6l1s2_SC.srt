1
00:00:00,000 --> 00:00:05,000
那我们来个初步投票。初步投票？初步投票？

2
00:00:05,005 --> 00:00:07,005
对于教室中的各位而言，当我把手举过头顶时，

3
00:00:07,007 --> 00:00:10,007
这并非是说我在伸展身体。这就是初步投票,

4
00:00:10,010 --> 00:00:16,010
虽然我的确也舒展了身体。我看到每种颜色至少都得了一票，

5
00:00:16,016 --> 00:00:20,016
那么这还真是值得我们花点时间好好研究。

6
00:00:20,020 --> 00:00:25,020
那我们再投一次。再投一次？看看再投一次的结果如何？

7
00:00:25,025 --> 00:00:30,025
蓝色和橙色看似得票最多，局面出现了分化。

8
00:00:30,030 --> 00:00:35,030
我们一次来看一种情况。

9
00:00:35,035 --> 00:00:39,035
我们可能要理出个头绪。如果我们试着来看每个句子，

10
00:00:39,039 --> 00:00:42,039
should_receive是与mock和期望值的结合，而stub仅仅是个mock。

11
00:00:42,042 --> 00:00:46,042
这一点有些不合乎情理，

12
00:00:46,046 --> 00:00:49,046
因为stub并不是mock。mock是个真实对象。

13
00:00:49,049 --> 00:00:52,049
它要切实代表某些事物，而stub更像是“不要调用这一过程。

14
00:00:52,052 --> 00:00:55,052
我会直接给你答案。”

15
00:00:55,055 --> 00:00:59,055
你绝对可以将个体方法针对模拟对象进行存根，

16
00:00:59,059 --> 00:01:02,059
但是“mock”这个术语代表的是身份。你可以模拟整个对象或是整个类。

17
00:01:02,062 --> 00:01:06,062
sutb通常表示对个体方法的调用。

18
00:01:06,066 --> 00:01:10,066
stub并非真是mock。这样我们就有了另外3种选择，

19
00:01:10,070 --> 00:01:14,070
我们可以认为stub是个期望值

20
00:01:14,074 --> 00:01:17,074
或可以认为stub是个seam，但是stub绝不是期望值。

21
00:01:17,077 --> 00:01:20,077
实际上，stub和should_receive之间的主要区别

22
00:01:20,080 --> 00:01:22,080
在于二者都会涉及调用对象的方法的概念，

23
00:01:22,082 --> 00:01:25,082
但是赎回值会表示“方法有错误，不应调用。”

24
00:01:25,085 --> 00:01:29,085
而存根会认为，“如果方法得到调用，”

25
00:01:29,089 --> 00:01:31,089
这里会有需要你们回应的认可响应。”

26
00:01:31,091 --> 00:01:33,091
它实际上并未检查调用方法。

27
00:01:33,093 --> 00:01:36,093
实际上，你们应该准确设置stub，而且部分stub不会被使用，

28
00:01:36,096 --> 00:01:38,096
虽然如果出现这种情况，你们应该扪心自问为何要做此设置。

29
00:01:38,098 --> 00:01:45,098
那么这就需要我们思考第二和第三个说法。

30
00:01:45,105 --> 00:01:49,105
should_receive和stub到底有什么相同之处？

31
00:01:49,109 --> 00:01:52,109
should_receive和stub基本上都……啊，不好意思

32
00:01:52,112 --> 00:01:59,112
不是第二和第三个说法：是第四个说法。should_receive和stub实际上有哪些相同？

33
00:01:59,119 --> 00:02:02,119
二者都扮演这样一个角色，当你们编写测试时

34
00:02:02,122 --> 00:02:06,122
这两者所在的位置均可让你们精确地改变程序的行为，

35
00:02:06,126 --> 00:02:08,126
而无需改变程序的源代码。

36
00:02:08,128 --> 00:02:11,128
所以二者都是seam。Seam 是两边都有的的概念，

37
00:02:11,131 --> 00:02:15,131
不过此外如果seam并未被用到，should_receive就会产生错误。

38
00:02:15,135 --> 00:02:18,135
这里的正确答案是

39
00:02:18,138 --> 00:02:22,138
should_receive既是seam 也是期望值，

40
00:02:22,142 --> 00:02:25,142
而stub仅是 seam。现在大家懂了么？

