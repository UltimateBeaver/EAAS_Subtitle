1
00:00:00,000 --> 00:00:03,000
今天我们要讨论的是作为客户服务器系统的网络

2
00:00:03,003 --> 00:00:05,003
与作为SaaS应用程序基础的结构，

3
00:00:05,005 --> 00:00:09,005
因为我们做出的结构性选择

4
00:00:09,009 --> 00:00:12,009
实际上适用于所有SaaS应用程序。

5
00:00:12,012 --> 00:00:16,012
它们比关于Ruby和Rails的大量材料要早得多。

6
00:00:16,016 --> 00:00:19,016
作为重点课程之一，在接下来的课时我们要讨论的是

7
00:00:19,019 --> 00:00:21,019
{不管你做什么结构，你都在做选择，

8
00:00:21,021 --> 00:00:24,021
决定在结构内各成分配合的方式，

9
00:00:24,024 --> 00:00:27,024
我们会围绕结构通过软件编程实现服务这个事实做选择，

10
00:00:27,027 --> 00:00:29,027
这时我们会用到开放式标准。}

11
00:00:29,029 --> 00:00:33,029
在我们做选择的同时，

12
00:00:33,033 --> 00:00:37,033
也在抛弃其他可行的选项。

13
00:00:37,037 --> 00:00:40,037
在这个从书本转载下来的框图上看，我们

14
00:00:40,040 --> 00:00:43,040
要从这儿的这个顶层开始学习。

15
00:00:43,043 --> 00:00:46,043
这里我们以最简单的方式看待网络浏览器，我们联想中间是一系列管子，

16
00:00:46,046 --> 00:00:48,046
而网站就是你想要前往取得内容的地方。

17
00:00:48,048 --> 00:00:53,048
我们拿高度作比，从100000英尺的高空逐渐接近地面，

18
00:00:53,053 --> 00:00:55,053
就会看到更多细节，大家可以把网站想

19
00:00:55,055 --> 00:00:58,055
成客户，服务器结构就表示

20
00:00:58,058 --> 00:01:01,058
它以请求与应答为主。

21
00:01:01,061 --> 00:01:04,061
客户是问问题的一方，

22
00:01:04,064 --> 00:01:07,064
而服务器是给出答案的一方。从本质上说，每个软件、

23
00:01:07,067 --> 00:01:10,067
客户和服务器都专门以某种方式扮演着相应的角色。

24
00:01:10,070 --> 00:01:13,070
现在，在我们的案例中，客户是像火狐浏览器或

25
00:01:13,073 --> 00:01:17,073
Safari或IE浏览器这样的网络浏览器。网站或网络服务器

26
00:01:17,077 --> 00:01:21,077
就是服务器部分，而在中间，我们让互联网像变魔术一样

27
00:01:21,081 --> 00:01:24,081
按规定的路径将内容从一端送往另一端，对于这个另一端，

28
00:01:24,084 --> 00:01:26,084
我们不打算多做解释，不过会给大家基础信息。

29
00:01:26,086 --> 00:01:30,086
最简单的互动就是网络浏览器

30
00:01:30,090 --> 00:01:32,090
向服务器索要信息。也就是客户向服务器问问题。

31
00:01:32,092 --> 00:01:35,092
服务器回应后，应答返回。

32
00:01:35,095 --> 00:01:39,095
这一切是怎么发生的呢？

33
00:01:39,099 --> 00:01:43,099
这里有历史悠久的一套协议，可以追溯到60年代，过去称TCP IP，

34
00:01:43,103 --> 00:01:46,103
用于传输控制协议与互联网协议。

35
00:01:46,106 --> 00:01:49,106
从那儿的后半段开始，这儿有个幻灯片速成课，介绍你需要知道的基础知识。

36
00:01:49,109 --> 00:01:53,109
互联网协议是

37
00:01:53,113 --> 00:01:56,113
计算机同意遵守的一套规则，

38
00:01:56,116 --> 00:01:59,116
这样在我们彼此交谈时，计算机就能实现互动。大家大概看到过

39
00:01:59,119 --> 00:02:02,119
这些互联网协议地址，IP地址。

40
00:02:02,122 --> 00:02:06,122
他们是以圆点分隔的四个整数。由于每

41
00:02:06,126 --> 00:02:10,126
个整数都可以是一个八位数，所以常称为四个八位字节。

42
00:02:10,130 --> 00:02:15,130
存在一个特殊地址，127.0.0.1，这始终表示这台计算机，

43
00:02:15,135 --> 00:02:19,135
无论我当前运行的是哪台计算机，这个地址是相对于其他

44
00:02:19,139 --> 00:02:21,139
地方某台设备的唯一地址存在的。一般说来，

45
00:02:21,141 --> 00:02:25,141
宇宙中每台设备或多或少都有个唯一的地址,

46
00:02:25,145 --> 00:02:27,145
虽然用路由器与网络地址表示的方法会复杂一点。

47
00:02:27,147 --> 00:02:30,147
同时存在一个叫做“本地主机”的特殊名

48
00:02:30,150 --> 00:02:34,150
称，在UNIX的世界和任何以

49
00:02:34,154 --> 00:02:38,154
UNIX为祖先的计算机上都找到他们最初的身影，

50
00:02:38,158 --> 00:02:41,158
“本地主机”表示我此时此刻运行中的设

51
00:02:41,161 --> 00:02:44,161
备，接下来我们立刻运用这一点做个简单的示例，以此揭示互联网的工作方式。

52
00:02:44,164 --> 00:02:48,164
现在，IP只是说你如果给我一台远程设

53
00:02:48,168 --> 00:02:51,168
备的地址，再来点信息，

54
00:02:51,171 --> 00:02:54,171
实际上只是几百字节信息包，

55
00:02:54,174 --> 00:02:57,174
我就会尽我所能把它送到那个设备那儿，

56
00:02:57,177 --> 00:02:59,177
不过可不保证一定送达。

57
00:02:59,179 --> 00:03:02,179
再比方说，如果你发送数个信息报，

58
00:03:02,182 --> 00:03:04,182
你有太多的信息，所以你要把它打散，

59
00:03:04,184 --> 00:03:06,184
那么（协议）既不能保证他们按顺序抵达（另一台设备），

60
00:03:06,186 --> 00:03:09,186
也不能保证会不会到达，甚至不能保证他们会不会毫不出错完整到达。

61
00:03:09,189 --> 00:03:13,189
在IP顶部，存在一个附加协议层，

62
00:03:13,193 --> 00:03:16,193
称为传输控制协议或TCP，它的作用是

63
00:03:16,196 --> 00:03:19,196
确保一切顺利。TCP从根本上

64
00:03:19,199 --> 00:03:23,199
监控IP数据包，确保交付顺序间存在

65
00:03:23,203 --> 00:03:25,203
间隙，这样它就可以重新请求遗失的数据包。

66
00:03:25,205 --> 00:03:28,205
如果数据包的传输过程中出现错误，

67
00:03:28,208 --> 00:03:30,208
它会重新请求损坏的数据包，从而确保

68
00:03:30,210 --> 00:03:32,210
正确获取所有数据包，再以适当的顺序重新组合。

69
00:03:32,212 --> 00:03:35,212
结果作为程序员，大家就会有种错觉，

70
00:03:35,215 --> 00:03:38,215
好像你把长串字符或字节塞进管子，

71
00:03:38,218 --> 00:03:41,218
而后在另一端他们以相同的顺序

72
00:03:41,221 --> 00:03:45,221
离开管子，

73
00:03:45,225 --> 00:03:47,225
{你想到这个过程大概只觉得打印出来的字符串漂亮多了。}

74
00:03:47,227 --> 00:03:50,227
现在，细微的差别是，我们想在同一台计算机上让多个

75
00:03:50,230 --> 00:03:54,230
不同的程序都使用TCP，我们需要一个方法确认那种流量供哪个程序使用，

76
00:03:54,234 --> 00:03:58,234
TCP实现这一点的方法就是使用端口号。

77
00:03:58,238 --> 00:04:01,238
端口号只是一个16位数字，

78
00:04:01,241 --> 00:04:04,241
可以本质上识别某个设备上正运行的特殊程序，

79
00:04:04,244 --> 00:04:07,244
同时说明这个流量就是专用于那个程

80
00:04:07,247 --> 00:04:10,247
序消耗的。我们注意到在万维网的案例中，

81
00:04:10,250 --> 00:04:14,250
{这由幂数决定}，这是因为

82
00:04:14,254 --> 00:04:17,254
端口号80是网络服务器应监听流量的标准端口。

83
00:04:17,257 --> 00:04:20,257
一会儿我们做个非常简单的演示，运行让我们伤脑筋的网络

84
00:04:20,260 --> 00:04:23,260
服务器，这样大家就明白协议到底有多

85
00:04:23,263 --> 00:04:27,263
简单了。当然，像这样协议方面的所有努力是

86
00:04:27,267 --> 00:04:30,267
很多人几十年工作的成果，

87
00:04:30,270 --> 00:04:34,270
不过，在我看来

88
00:04:34,274 --> 00:04:36,274
有两个人在实现这些想法并把他们作为TCP IP投入实践方面居功至伟，

89
00:04:36,276 --> 00:04:40,276
那就是温特•瑟夫与鲍勃•卡恩，

90
00:04:40,280 --> 00:04:44,280
这两人凭借网络协议的工作成就共同获得2004年的图灵奖，

91
00:04:44,284 --> 00:04:47,284
正是他们的成果，最终推动了TCP IP的发展，今天该协议

92
00:04:47,287 --> 00:04:51,287
影响了全球几十亿台计算机。这是怎样运作的呢？

93
00:04:51,291 --> 00:04:55,291
TCP IP之美就在于我可以假装我有一根管子，借助这根管子，

94
00:04:55,295 --> 00:04:58,295
我可以放入一个字符串，像是"get/bears"，而在管子的另一端，

95
00:04:58,298 --> 00:05:01,298
正在倾听的某个人可以以我放入该字符串的相同方式把

96
00:05:01,301 --> 00:05:05,301
同一字符串取出来。另一侧就会回答我的问题。

97
00:05:05,305 --> 00:05:08,305
比方说，这儿有一行说一切都好，

98
00:05:08,308 --> 00:05:11,308
这条内容发出去后，他们纷纷向我回信，

99
00:05:11,311 --> 00:05:15,311
然后我再把它取出来。

100
00:05:15,315 --> 00:05:18,315
这会让你有种在任

101
00:05:18,318 --> 00:05:21,318
一方向上字符序列都可靠无误的错觉。这就是双向或全双工协议。

102
00:05:21,321 --> 00:05:25,321
现在看来，之前我说在最简单的水平上

103
00:05:25,325 --> 00:05:28,325
只有客户和服务器时，这是假话。

104
00:05:28,328 --> 00:05:31,328
事实上，还有网络中的第三方，它的工作原理称得上是非常基本的概念，

105
00:05:31,331 --> 00:05:34,331
那就是DNS，域名系统，

106
00:05:34,334 --> 00:05:39,334
正因有这个服务，我们才能使用有意义的名称，例如Google.com或

107
00:05:39,339 --> 00:05:42,339
Microsoft.com，而不必费心去记那些由句号间隔的四个数字构成的地址。

108
00:05:42,342 --> 00:05:46,342
域名服务器

109
00:05:46,346 --> 00:05:49,346
实际上是单独的一种服务。

110
00:05:49,349 --> 00:05:51,349
我之前展示的图解，实际上应该是这样的。

111
00:05:51,351 --> 00:05:54,351
如果我有什么想要告诉网络服务器，我要做的第一件事就是去

112
00:05:54,354 --> 00:05:58,354
从DNS服务器查看那台服务器的互联网协议或IP地址，

113
00:05:58,358 --> 00:06:01,358
而DNS服务器通常是根据你的ISP进行配置的。

114
00:06:01,361 --> 00:06:05,361
一旦我得到该信息，现在我就有IP地址

115
00:06:05,365 --> 00:06:08,365
了，这样我就能做真正想做的事情。在这儿滑稽的是，

116
00:06:08,368 --> 00:06:11,368
尽管DNS是一个完全独立的服务，

117
00:06:11,371 --> 00:06:14,371
实际上，如果DNS不起作用，我们中的大部分人会以为互联网断了，这是因为多

118
00:06:14,374 --> 00:06:17,374
数网站浏览器与其他程序不再依赖于

119
00:06:17,377 --> 00:06:21,377
记取原IP地址，

120
00:06:21,381 --> 00:06:24,381
而是依赖于在运行期间完成这一（DNS提供的）映射。

121
00:06:24,384 --> 00:06:28,384
现在我们知道怎样通过TCP IP交谈，那么我们说些什么呢？

122
00:06:28,388 --> 00:06:31,388
我们在浏览器与网络服务器之间交换内容的方式实际上

123
00:06:31,391 --> 00:06:34,391
是一种非常简单的网络协议，称为超级文本传送协议或

124
00:06:34,394 --> 00:06:38,394
HTTP。该协议基于ASCII，这表示

125
00:06:38,398 --> 00:06:41,398
来回传输的所有信息请求获得一些东西，和

126
00:06:41,401 --> 00:06:44,401
这些东西是否可以返回的状态，

127
00:06:44,404 --> 00:06:46,404
这些信息只是普通的字符串而已。它们很容易读懂，

128
00:06:46,406 --> 00:06:50,406
以至于人也可以像网站一样（对信息作出应答）。HTTP请求非常简单。

129
00:06:50,410 --> 00:06:53,410
有一些请求方法，其中GET与POST是最常用的，

130
00:06:53,413 --> 00:06:56,413
不过在课程的剩余部分大家还会碰到三四个其他方法。

131
00:06:56,416 --> 00:06:59,416
大家之前已经见过了URI。

132
00:06:59,419 --> 00:07:02,419
URI命名了你想要检索的事物与HTTP协议版本，

133
00:07:02,422 --> 00:07:07,422
从有关网络的文献中汲取到的重要教训是

134
00:07:07,427 --> 00:07:10,427
当你配备一个

135
00:07:10,430 --> 00:07:13,430
会有数百万计的客户与服务器使用的协议时，

136
00:07:13,433 --> 00:07:17,433
你应该在协议里加入一种东西（机制），

137
00:07:17,437 --> 00:07:19,437
从而在一方说话时，来识别出它正使用的协议版本。

138
00:07:19,439 --> 00:07:22,439
这样做的原因是如果你更新协议或

139
00:07:22,442 --> 00:07:25,442
日后添加功能，那你就要确保如果有人

140
00:07:25,445 --> 00:07:28,445
使用旧版协议向你要东西，

141
00:07:28,448 --> 00:07:31,448
你不会一不小心使用这些

142
00:07:31,451 --> 00:07:35,451
老版客户尚未更新的新功能。

143
00:07:35,455 --> 00:07:39,455
HTTP中还有些协议报头。他们就客户观

144
00:07:39,459 --> 00:07:41,459
点与公司请求或答复的服务观点提供

145
00:07:41,461 --> 00:07:47,461
一些额外信息。

146
00:07:47,467 --> 00:07:50,467
我们注意到，HTTP请求与答复中最重要的一点是

147
00:07:50,470 --> 00:07:53,470
我们还会从所有服务器取回状态码。

148
00:07:53,473 --> 00:07:56,473
资源已经变动了，比如重定向，或者存在某种问题

149
00:07:56,476 --> 00:07:59,476
以至于我没法满足你的请求。这时，

150
00:07:59,479 --> 00:08:02,479
看演示比看幻灯片更有助于大家理解这一块，所以

151
00:08:02,482 --> 00:08:08,482
让我们做个非常简单的演示吧。现在我

152
00:08:08,488 --> 00:08:13,488
手上有一个谷歌浏览器，还有我要运行程序的终端窗口，

153
00:08:13,493 --> 00:08:17,493
这个程序是所谓净资本NC指数内的标

154
00:08:17,497 --> 00:08:24,497
准部分，接下来我要在端口8000接听。

155
00:08:24,504 --> 00:08:28,504
记住，我说过TCP使用端口号

156
00:08:28,508 --> 00:08:31,508
识别想要接收TCP流量的不同程序。

157
00:08:31,511 --> 00:08:35,511
我现在就是一个在端口8000等待别人

158
00:08:35,515 --> 00:08:38,515
向我发送流量的程序。我将去我们的网站浏览器

159
00:08:38,518 --> 00:08:42,518
创建流量。请记住，我说本地主机是一个神奇的名称，

160
00:08:42,522 --> 00:08:44,522
它表示我此时正在运行的这台设备，

161
00:08:44,524 --> 00:08:49,524
我会确保我们正在使用HTTP，而你们要

162
00:08:49,529 --> 00:08:52,529
在主机名称后使用冒号和端口号。记住，

163
00:08:52,532 --> 00:08:55,532
我说过端口80是流量的默认端口。

164
00:08:55,535 --> 00:08:58,535
如果我在URI中不指明端口号，就会假定端口号是80，不过

165
00:08:58,538 --> 00:09:01,538
在这个例子中，我想要确保引导部分流量到

166
00:09:01,541 --> 00:09:04,541
我们监听中的这个特定终端窗口来，

167
00:09:04,544 --> 00:09:08,544
让我们瞧瞧如果试图访问这个URL，会发生什么。

168
00:09:08,548 --> 00:09:11,548
大家可以看到网络浏览器已发送请求。这就是说，

169
00:09:11,551 --> 00:09:14,551
我想要得到根资源，这是因为我没在斜线后面加任何东西，

170
00:09:14,554 --> 00:09:19,554
也没有在URI主机名部分后面加东西。

171
00:09:19,559 --> 00:09:22,559
它正在确定它所知道的协议版本。我知道

172
00:09:22,562 --> 00:09:26,562
协议版本1.1，这就意味着服务器

173
00:09:26,566 --> 00:09:29,566
处于最佳判断状态下会答复并且只使用

174
00:09:29,569 --> 00:09:32,569
1.1与早前版本中当前可用的协议功能，这样它就不会使客户为难。

175
00:09:32,572 --> 00:09:36,572
客户会给我们有关本身的更多信息，例如

176
00:09:36,576 --> 00:09:39,576
我是一台什么类型的计算机等等。我可以查看我正在一台

177
00:09:39,579 --> 00:09:43,579
Macintosh上运行Mozilla浏览器等等。现在，大家可以

178
00:09:43,583 --> 00:09:45,583
看到我们的网络浏览器就放在这儿。我们已经得到一个旋

179
00:09:45,585 --> 00:09:47,585
转中的小圆圈，这表示浏览器正等待后面发生的事情，

180
00:09:47,587 --> 00:09:50,587
而这是因为它在等待答复。

181
00:09:50,590 --> 00:10:05,590
我们要给它一个最简单的答复。正如你所料想的那样，"hello world"。

182
00:10:05,605 --> 00:10:07,605
现在，你们在显示任何内容前注意到它了。

183
00:10:07,607 --> 00:10:10,607
我基本退出净资本程序，然后关闭连接，这是因为

184
00:10:10,610 --> 00:10:13,610
这是告诉浏览器我

185
00:10:13,613 --> 00:10:15,613
已经说完话的最简单的方法。

186
00:10:15,615 --> 00:10:17,615
这时，浏览器会从TCP管道取出字符串，然后显示出来。现在，

187
00:10:17,617 --> 00:10:21,617
我们要在此打破一些规则。

188
00:10:21,621 --> 00:10:24,621
在技术方面，我们本应该做的是像这样包含几个报头，

189
00:10:24,624 --> 00:10:27,624
告诉浏览器你想要什么。

190
00:10:27,627 --> 00:10:30,627
在我们的案例中，我们只想传输某个纯文本，

191
00:10:30,630 --> 00:10:33,630
而由于历史原因，浏览器会非常宽容地容忍你只

192
00:10:33,633 --> 00:10:35,633
返回某个纯文本，而没有任何其他识别信息。

193
00:10:35,635 --> 00:10:38,635
他们倾向于做正确的事。这儿的重要消息是你刚观察到的

194
00:10:38,638 --> 00:10:42,638
是最简单形式下HTTP干了什么。

195
00:10:42,642 --> 00:10:45,642
客户会问问题，而另一端有台服务器正等待你的提问，

196
00:10:45,645 --> 00:10:48,645
然后我们提供并回答该问题，

197
00:10:48,648 --> 00:10:50,648
这随后会回到客户那儿，也就是

198
00:10:50,650 --> 00:10:58,650
网络浏览器。现在，我们还有一个问题没有讨论，那就是

199
00:10:58,658 --> 00:11:01,658
早在HTTP设计之初，做出了一个决定，即

200
00:11:01,661 --> 00:11:04,661
协议是没有状态的，这尤其表示

201
00:11:04,664 --> 00:11:09,664
无论我何时向任一特定服务器发送新的HTTP请求，

202
00:11:09,669 --> 00:11:12,669
这就好像那台服务器在它有生之年从没见过我。

203
00:11:12,672 --> 00:11:15,672
如此的必然结果是，如果有任何信息需要

204
00:11:15,675 --> 00:11:18,675
在请求之后被保存下来，那么需要有某个独

205
00:11:18,678 --> 00:11:22,678
立的机制来实现这一点。在这方面有个简单的例子，即便是在

206
00:11:22,682 --> 00:11:25,682
早期的网络应用程序，也存在着浏览

207
00:11:25,685 --> 00:11:27,685
该应用中的一系列网页的需要。例如，你访问一个产品页面，

208
00:11:27,687 --> 00:11:30,687
在购物车内添加了某项产品，你进行检查的同时，

209
00:11:30,690 --> 00:11:33,690
服务器已经记住你正处于哪一步。

210
00:11:33,693 --> 00:11:36,693
如果你的每次请求都是独立的，就好像

211
00:11:36,696 --> 00:11:40,696
每次请求都像是头一次，它是怎么记住操作的呢。Cookies

212
00:11:40,700 --> 00:11:43,700
被发明用来实现这一点，基本上你第一次访问网站时，

213
00:11:43,703 --> 00:11:47,703
该网站就可以连同响应内容发回少量信息，

214
00:11:47,707 --> 00:11:50,707
这类信息就叫做cookie，多数情况下，

215
00:11:50,710 --> 00:11:53,710
它只是让服务器记得你的某个状态名称而已。

216
00:11:53,713 --> 00:11:56,713
{Wen浏览器}的作用就在于记住这种cookie，

217
00:11:56,716 --> 00:11:59,716
然后等你在任何时候再次访问同一网站时，

218
00:11:59,719 --> 00:12:02,719
确保随访问一同提供该cookie的数值。

219
00:12:02,722 --> 00:12:05,722
Cookies本质上就是在说，“

220
00:12:05,725 --> 00:12:08,725
嘿，还记得我是谁吗？你以前曾向我提供这个cookie值，

221
00:12:08,728 --> 00:12:10,728
现在你可以查阅我的信息。”你还记得我上次在你的应用程序里干过什么吧。

222
00:12:10,730 --> 00:12:15,730
正如你所期望的那样，作为一个框架，

223
00:12:15,735 --> 00:12:18,735
对运行SaaS应用程序来说已经很成熟了，Rails

224
00:12:18,738 --> 00:12:20,738
有不少功能可以处理Cookies，所以你多少可以松口气，

225
00:12:20,740 --> 00:12:23,740
不必为此担心。


