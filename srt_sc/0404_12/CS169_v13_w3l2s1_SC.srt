1
00:00:00,000 --> 00:00:04,000
接下来我们要开始讲一般SaaS应用程序的

2
00:00:04,004 --> 00:00:08,004
架构，再具体讲讲Rails中的一些机制。

3
00:00:08,008 --> 00:00:13,008
我们从架构模式，

4
00:00:13,013 --> 00:00:16,013
也就是称为模型视图控制器的一种软件架构模式开始学习。

5
00:00:16,016 --> 00:00:20,016
为了讲解所有这些材料，我们试图用问题激发大家的学习，

6
00:00:20,020 --> 00:00:24,020
那就是为什么你们要注意学习这些东西，

7
00:00:24,024 --> 00:00:28,024
本节课的问题是，我们一直在讲

8
00:00:28,028 --> 00:00:32,028
构架，有了构架，你就可以确定应用程序

9
00:00:32,032 --> 00:00:35,032
的共同性与不同种类。针对我们

10
00:00:35,035 --> 00:00:37,035
将在课内构建的SaaS应用程序，问题是

11
00:00:37,037 --> 00:00:41,037
什么是常用的应用程序，在这些互动与

12
00:00:41,041 --> 00:00:44,041
面向用户的应用程序中是否存在我们构建的部分，

13
00:00:44,044 --> 00:00:46,044
如果我们在结构内确定这些部分，是否能简化应用程序的开发。

14
00:00:46,046 --> 00:00:50,046
这就是我们想要在此讲解的内容。为了实现这一点，

15
00:00:50,050 --> 00:00:52,050
我们要再来看我们的框图。我们已经从这开始了。

16
00:00:52,052 --> 00:00:55,052
我们学习了网站应用程序中客户的服务器本质。

17
00:00:55,055 --> 00:00:59,055
我们还学了在网站程序的服务器端存在三个层次。

18
00:00:59,059 --> 00:01:01,059
现在我们要步入应用程序服务器内

19
00:01:01,061 --> 00:01:04,061
去研究其中一层，然后我们要学习

20
00:01:04,064 --> 00:01:08,064
按照名为模型视图控制器的设计模式，

21
00:01:08,068 --> 00:01:13,068
使用Rails构建应用程序服务器。那是什么？

22
00:01:13,073 --> 00:01:15,073
想法是如果你有一个应用程序，不仅能操纵某些数据还可以与用户互动，

23
00:01:15,075 --> 00:01:18,075
使用该程序你还可分割数据的组织与

24
00:01:18,078 --> 00:01:20,078
保存，那么我们称这部分为模型，

25
00:01:20,080 --> 00:01:23,080
从用户界面与数据的表现方法看，

26
00:01:23,083 --> 00:01:27,083
我们称这部分为视图。

27
00:01:27,087 --> 00:01:30,087
在他们之间负责调节互动的是成为控制器的这个中间物。

28
00:01:30,090 --> 00:01:33,090
用户请求访问数据时，

29
00:01:33,093 --> 00:01:37,093
控制器就是促成该访问的逻辑所在，

30
00:01:37,097 --> 00:01:40,097
模型想要呈现客户要求的数据时，

31
00:01:40,100 --> 00:01:42,100
控制器会调节从模型获取数据，

32
00:01:42,102 --> 00:01:46,102
然后使客户可以看见相应数据。在我们的例子中，

33
00:01:46,106 --> 00:01:51,106
我们看到的是，模型可以读取并更新

34
00:01:51,111 --> 00:01:54,111
由应用程序维护的数据。这儿有……

35
00:01:54,114 --> 00:01:58,114
以间接的形式，数据被提供给视图，不过这都要通过控制器，

36
00:01:58,118 --> 00:02:01,118
控制器还有正在看视图的用户，

37
00:02:01,121 --> 00:02:03,121
他们可以与之互动。例如，

38
00:02:03,123 --> 00:02:05,123
在网络的示例中，视图是你正在浏览器内阅览的页面，

39
00:02:05,125 --> 00:02:07,125
在该页面中存在可供性，像是点击某块，

40
00:02:07,127 --> 00:02:11,127
然后像这样提交表格与内容之类的。现在如果你想想看，

41
00:02:11,131 --> 00:02:13,131
这看起来就像是你构建网络应用程序

42
00:02:13,133 --> 00:02:16,133
的显见方法，不过事实上，

43
00:02:16,136 --> 00:02:18,136
还有其他替换方法，同时多数网络框架

44
00:02:18,138 --> 00:02:22,138
不必遵循此模式。我们过会儿再来讨论这些问题，

45
00:02:22,142 --> 00:02:25,142
现在让我们简单展示一下模型视图控制器的应用程序是如何工作的，

46
00:02:25,145 --> 00:02:29,145
每个实体都有模型、控制器与一组视图。

47
00:02:29,149 --> 00:02:32,149
例如，在我们设定的烂土豆应用程序中，

48
00:02:32,152 --> 00:02:34,152
我们要用这个来说明Rails如何工作，

49
00:02:34,154 --> 00:02:37,154
这儿有影片的概念，这是由应用程序操纵的一种项目。

50
00:02:37,157 --> 00:02:41,157
还有电影爱好者们，我们

51
00:02:41,161 --> 00:02:43,161
由电影观看人群的信息。我们甚至还有

52
00:02:43,163 --> 00:02:46,163
人们写的影评信息。

53
00:02:46,166 --> 00:02:49,166
上述实体类型中每种类型都有各自的模型、

54
00:02:49,169 --> 00:02:52,169
各自的控制器、还有与之关联的各自的视图。当然

55
00:02:52,172 --> 00:02:55,172
可能存在于他们间的关系中，例如，

56
00:02:55,175 --> 00:02:57,175
讨论评论真的没意义，除非你

57
00:02:57,177 --> 00:03:00,177
把它与写评论的电影爱好者以及相关电影连接在一起。

58
00:03:00,000 --> 00:03:02,180
你可以做的事情当中，有一件是

59
00:03:02,182 --> 00:03:05,182
在不同类型的模型间进行组合，

60
00:03:05,185 --> 00:03:08,185
然后在你想要收集呈现数据时反映这些组合。

61
00:03:08,188 --> 00:03:11,188
我们会向大家展示怎样才能完成这件事。

62
00:03:11,191 --> 00:03:14,191
用户与像烂土豆这样的应用程序相互操作相互影响时，

63
00:03:14,194 --> 00:03:16,194
他们会取决于数据是什么，发送请求获取不同类型的数据，

64
00:03:16,196 --> 00:03:19,196
最终会由数个不同的控制器中某一个

65
00:03:19,199 --> 00:03:22,199
控制器处理请求。

66
00:03:22,202 --> 00:03:25,202
我们要在接下来的几节课内讲解，

67
00:03:25,205 --> 00:03:28,205
像Rails这样的框架会给你哪些工具帮助你创建这类映射。

68
00:03:28,208 --> 00:03:31,208
我说过，如果你不适用模式视图控制器，

69
00:03:31,211 --> 00:03:34,211
还有其他方法组织网络应用程序，不是吗？其中一个方法就是你可以做个

70
00:03:34,214 --> 00:03:38,214
页面控制器。页面控制器表示用户浏览

71
00:03:38,218 --> 00:03:40,218
的几乎每个页面都有一个关联控制器。

72
00:03:40,220 --> 00:03:43,220
如果你有一个应用程序只能做几个简单的固定动作，

73
00:03:43,223 --> 00:03:47,223
这实际上许是更为简单的设计。这儿有个前端控制器，

74
00:03:47,227 --> 00:03:50,227
实际上是J2EE servlets功能的工作方式。

75
00:03:50,230 --> 00:03:53,230
基本上有一个主调度程序，所有项目都要经过该程序，这样就会……

76
00:03:53,233 --> 00:03:57,233
存在超出那一点与各个不同类交流的逻辑，

77
00:03:57,237 --> 00:04:00,237
不过会存在一个中央瓶颈，站们做出

78
00:04:00,000 --> 00:04:03,240
上述决定，同时使数据可通过视图呈

79
00:04:03,243 --> 00:04:06,243
现出来。如果大家之前用过PHP，

80
00:04:06,246 --> 00:04:10,246
PHP就是纯模板视图应用程序的例子，

81
00:04:10,250 --> 00:04:14,250
其中存在不同的模型。这儿有PHP代码，

82
00:04:14,254 --> 00:04:17,254
它操作数据，同时与数据库交流，不过

83
00:04:17,257 --> 00:04:20,257
这儿有的实际上指示视图的集合，其中穿插着那个模型数据。

84
00:04:20,260 --> 00:04:23,260
相对于模型视图控制器，关系切实

85
00:04:23,263 --> 00:04:26,263
存在于一组模型与一组视图之间，

86
00:04:26,266 --> 00:04:30,266
其中每个实体都有各类型的……应用程序中每个实体

87
00:04:30,270 --> 00:04:33,270
都有各自的模型，各自的视图组，以及

88
00:04:33,273 --> 00:04:35,273
各自的控制器，而控制器实际上只处理这类事情。

89
00:04:35,275 --> 00:04:40,275
此处的信息是他们的架构就是做选择，

90
00:04:40,280 --> 00:04:44,280
Rails选择支持含有模型视图控制器的SaaS应用程序，

91
00:04:44,284 --> 00:04:46,284
因为事实证明，这是构建

92
00:04:46,286 --> 00:04:49,286
各种SaaS应用程序的有效方法，

93
00:04:49,289 --> 00:04:52,289
不过，这并不表示这是唯一的选择，其他架构

94
00:04:52,292 --> 00:04:56,292
也许更适合其他应用程序。在本节课中我们随时在做选择，

95
00:04:56,296 --> 00:04:58,296
我们选择使用特别的框架，

96
00:04:58,298 --> 00:05:01,298
特别的工具组。这意味着

97
00:05:01,301 --> 00:05:04,301
我们几乎一直在放弃其它选项，虽然我们

98
00:05:04,304 --> 00:05:06,304
不会详细介绍所有选项，但是重要的是你明白

99
00:05:06,306 --> 00:05:09,306
正在做的选择与为什么会以这种方式

100
00:05:09,309 --> 00:05:10,309
做这些选择。


