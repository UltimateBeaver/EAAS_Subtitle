1
00:00:00,000 --> 00:00:05,000
在自检问题中，我们想问哪些测试类型

2
00:00:05,005 --> 00:00:08,005
可以重复并独立地运行，因为我们知道，一个良好的测试

3
00:00:08,008 --> 00:00:12,008
套件需要用到"FIRST"中的两个属性。

4
00:00:12,012 --> 00:00:15,012
其中一个是，“如果你有一个依赖随机性的代码，

5
00:00:15,015 --> 00:00:18,015
像洗扑克牌，你要怎样测试？”

6
00:00:18,018 --> 00:00:21,018
你会觉得，由于随机性是代码运行的一部分，所以

7
00:00:21,021 --> 00:00:24,021
你没法重复测试该代码，但事实上，有几个方法可以完成测试。

8
00:00:24,024 --> 00:00:26,024
如遇到像洗扑克牌一样的代码时，

9
00:00:26,026 --> 00:00:29,026
有个方法是记录

10
00:00:29,029 --> 00:00:32,029
你运行代码时随机数生成器的种子，

11
00:00:32,032 --> 00:00:35,032
然后捕获关联该种子的特定执行次序。

12
00:00:35,035 --> 00:00:39,035
随机数生成器的工作方式是

13
00:00:39,039 --> 00:00:42,039
如果存在软件或伪随机数生成器，一旦你确定了种子值，

14
00:00:42,042 --> 00:00:44,042
生成器产生的随机数次序就确定了。

15
00:00:44,044 --> 00:00:47,044
这实际上是能够重复且独

16
00:00:47,047 --> 00:00:51,047
立地运行A类型测试的一种方法。

17
00:00:51,051 --> 00:00:55,051
B类型测试依赖于它在一天中的运行时间，怎样测试呢？

18
00:00:55,055 --> 00:00:58,055
我们对测试谈论得越多，

19
00:00:58,058 --> 00:01:02,058
我们就会学到一个关键概念，

20
00:01:02,062 --> 00:01:05,062
那就是从测试中的类分离出合作者类后，欺骗合作者类行为的能力。

21
00:01:05,065 --> 00:01:09,065
在示例B中，

22
00:01:09,069 --> 00:01:12,069
合作者类的示例将是提供一天时间的程序库。

23
00:01:12,072 --> 00:01:15,072
我们要做的是使用所谓的“树桩”返回一天内一个已知的时间来欺骗程序库。

24
00:01:15,075 --> 00:01:19,075
我们基本上可以针对一天的时间

25
00:01:19,079 --> 00:01:21,079
返回一个全封闭的数值，

26
00:01:21,081 --> 00:01:24,081
然后我们就能测试看我们的代码是否能根据返回的封闭数值正常工作。

27
00:01:24,084 --> 00:01:28,084
对于含随机性的类型A，

28
00:01:28,088 --> 00:01:32,088
还有一个策略值得一提，

29
00:01:32,092 --> 00:01:35,092
那就是查看结果的谱性质，举个例子来说，要是你正测试一个抛硬币

30
00:01:35,095 --> 00:01:38,095
的代码，我们知道抛硬币应该有约一半的可能

31
00:01:38,098 --> 00:01:41,098
得到的是正面，这样你就可以编写一个测试套件，

32
00:01:41,101 --> 00:01:44,101
其中一个测试就是大量重复性地抛硬币（虚拟的硬币），

33
00:01:44,104 --> 00:01:47,104
然后检查看

34
00:01:47,107 --> 00:01:50,107
正面与背面的比例是否在数值50/50的某个相对适度的范围内。

35
00:01:50,110 --> 00:01:54,110
这个例子的寓意是即便

36
00:01:54,114 --> 00:01:57,114
有些事情看上去完全不确定或是取决于外部条件，

37
00:01:57,117 --> 00:01:59,117
你总能想到某个方法控制相应的取决条件，或

38
00:01:59,119 --> 00:02:02,119
从测试目的着眼确定可重复的条件。

39
00:02:02,122 --> 00:02:05,122
我们后面会反复讨论这个话题，

40
00:02:05,125 --> 00:02:08,125
所以每次大家考虑

41
00:02:08,128 --> 00:02:10,128
向代码添加新功能时，你都会自然地

42
00:02:10,130 --> 00:02:13,130
问自己一个问题，“我要怎么测试这个功能？”


