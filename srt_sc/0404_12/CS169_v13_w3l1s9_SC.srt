1
00:00:00,000 --> 00:00:03,000
如今几乎所有互联网系统都在使用无共享架构，

2
00:00:03,003 --> 00:00:07,003
什么是无共享架构、这对可扩展性有什么意义，我们的下个

3
00:00:07,007 --> 00:00:11,007
课题就来讨论这些问题。来看我们的图解，我们从最顶层开

4
00:00:11,011 --> 00:00:14,011
始研究客户与服务器间的连接。

5
00:00:14,014 --> 00:00:17,014
现在，我们要深入到下一层，往服务器这一块里面看，思考它的组成部分。

6
00:00:17,017 --> 00:00:20,017
正如我们看到的那样，

7
00:00:20,020 --> 00:00:23,020
目前的服务器一般由三个主要部分构成。

8
00:00:23,023 --> 00:00:26,023
这有表示层，或者叫前端，是一种类似

9
00:00:26,026 --> 00:00:29,026
Apache或微软IIS的的网络服务器。

10
00:00:29,029 --> 00:00:32,029
还有应用服务器。这就是行动的所在，也就是大家应用程序

11
00:00:32,032 --> 00:00:35,032
代码通常运行的地方。

12
00:00:35,035 --> 00:00:39,035
我们会用一个叫做机架的东西，支承用ruby编写的应用程序。

13
00:00:39,039 --> 00:00:42,039
然后，这儿有持久层，又叫存储层，或

14
00:00:42,042 --> 00:00:44,042
者永久关联应用程序的数据所在层，像

15
00:00:44,044 --> 00:00:49,044
你客户的数据都在这儿存储，一般类似数据库。

16
00:00:49,049 --> 00:00:52,049
过去，网络一开始只是人们交换静态文件 、

17
00:00:52,052 --> 00:00:56,052
图表等等的手段，

18
00:00:56,056 --> 00:00:59,056
早期的网络服务器工作轻松简单。它们要做的不过是接收

19
00:00:59,059 --> 00:01:02,059
发来的TCP请求，指出要用哪个文件，然后把该文件取回放入浏览器，

20
00:01:02,062 --> 00:01:06,062
不过很快这就变成了另一番景象，

21
00:01:06,066 --> 00:01:08,066
更有趣的网站事实上更像是运行程序，然

22
00:01:08,068 --> 00:01:11,068
后借助程序生成大家看到的网页。

23
00:01:11,071 --> 00:01:14,071
如果你想想看，这是一个装东西的盒子，里面的东西类似于商务网站，

24
00:01:14,074 --> 00:01:16,074
就是你访问页面、搜索一些商品的地方，这里发生的事就是程序需要借助运行

25
00:01:16,076 --> 00:01:20,076
找到符合搜索条件

26
00:01:20,080 --> 00:01:23,080
的所有产品，然后专为你个人动态建成网页。

27
00:01:23,083 --> 00:01:27,083
一开始，人们使用，嗯，什么东西，像这样编写网站，

28
00:01:27,087 --> 00:01:30,087
HTML是浏览器消耗掉的东西，

29
00:01:30,090 --> 00:01:33,090
而我们要做的是，找个方法到处贴点代码

30
00:01:33,093 --> 00:01:37,093
，使之融入HTML，由此这个代码就成了

31
00:01:37,097 --> 00:01:40,097
创建动态内容的契机。事情很快清楚了，

32
00:01:40,100 --> 00:01:43,100
代码实在是个有趣儿的部分。

33
00:01:43,103 --> 00:01:46,103
代码喧宾夺主，在应用层面把内容从网

34
00:01:46,106 --> 00:01:49,106
络服务器中搬出来、整理后放入自己家里。现在我们接着看

35
00:01:49,109 --> 00:01:52,109
这些各不相同的部分，学习他们的工作原理与

36
00:01:52,112 --> 00:01:56,112
他们对软件即服务构架的影响。

37
00:01:56,116 --> 00:01:59,116
如果网站本质上就是运行程序而非服务于静态文件，

38
00:01:59,119 --> 00:02:02,119
那么在你要运行程序时，即便

39
00:02:02,122 --> 00:02:05,122
从命令行运行，你也不免要担心

40
00:02:05,125 --> 00:02:08,125
要把哪些URI传入网站，为此又要怎样确定运行哪些程序，怎样将URI映射入

41
00:02:08,128 --> 00:02:12,128
正确的程序或子程序内之类的问题，怎样才能

42
00:02:12,132 --> 00:02:14,132
把参数传给该程序？你要

43
00:02:14,134 --> 00:02:17,134
怎么做才能让程序在服务器上运行？如果出现错误

44
00:02:17,137 --> 00:02:19,137
会发生什么情况？谁负责程序后的清理，还有谁提供错误消息？

45
00:02:19,139 --> 00:02:23,139
这些问题全部在SaaS应用程序内处理，

46
00:02:23,143 --> 00:02:27,143
只不过即不借助命令行运行程序，

47
00:02:27,147 --> 00:02:30,147
也不通过GUI直接运行，我们运行程序是

48
00:02:30,150 --> 00:02:34,150
为了响应网络浏览器的请求。

49
00:02:34,154 --> 00:02:36,154
无论你使用何种语言，运用哪种框架，

50
00:02:36,156 --> 00:02:39,156
都必须整体把握这种功能，

51
00:02:39,159 --> 00:02:42,159
所以框架经发展已可以支持

52
00:02:42,162 --> 00:02:45,162
前面提到的所有常见功能，这样你就不必为此多费心思了。

53
00:02:45,165 --> 00:02:49,165
事实上，现在的情况更像是你在填写应用程序的专用代码

54
00:02:49,169 --> 00:02:52,169
以及其他详细信息，像是将URI映射到哪段代码，还有

55
00:02:52,172 --> 00:02:55,172
怎样从客户键入的东西传递数据，

56
00:02:55,175 --> 00:02:58,175
你怎样传递那些层代码，

57
00:02:58,178 --> 00:03:00,178
所有这些问题现在都由框架解决，由此节省了大量工作。

58
00:03:00,000 --> 00:03:06,180
如今，即便在我们所说的有三个不同层次的逻辑架构范围内，

59
00:03:06,186 --> 00:03:08,186
也不过就是逻辑图而已。

60
00:03:08,188 --> 00:03:11,188
另一个问题是，怎样把这些东西映射到物理硬件上。

61
00:03:11,191 --> 00:03:15,191
现在，假设你正在处理本节课的作业，

62
00:03:15,195 --> 00:03:17,195
或者你正在开发自己的

63
00:03:17,197 --> 00:03:21,197
SaaS应用程序，通常你会有一台

64
00:03:21,201 --> 00:03:24,201
容纳所有部件的设备。就是这儿的灰色框，

65
00:03:24,204 --> 00:03:27,204
你可以想象自己的笔记本电脑，然后就在这台设备上，

66
00:03:27,207 --> 00:03:30,207
你在运行有一定内容的个人网络浏览器。

67
00:03:30,210 --> 00:03:33,210
你在运行某种表示层，而我们使用的Webrick

68
00:03:33,213 --> 00:03:37,213
实际上就是一个简单的开发网络服务器，它是rails的默认服务器。

69
00:03:37,217 --> 00:03:41,217
它一次只能处理一个客户，这对大型网站来说不是什么好事，

70
00:03:41,221 --> 00:03:43,221
可在你开发自己的代码时却很不错。

71
00:03:43,223 --> 00:03:47,223
紫色的这个是我们的应用程序层，其中含有应用程序服务

72
00:03:47,227 --> 00:03:50,227
器，{为允许ruby代码作为rail SaaS应

73
00:03:50,230 --> 00:03:54,230
用程序的组成部分运行，机架可以围绕这一点提供部分机械}。我们

74
00:03:54,234 --> 00:03:58,234
有rails程序库供你的代码使用。最后是我们的储存层，

75
00:03:58,238 --> 00:04:01,238
永久性数据都住在这里。你看，在开发模式下，

76
00:04:01,241 --> 00:04:04,241
唯一的永久性数据就是测试时刚好在

77
00:04:04,244 --> 00:04:06,244
你电脑上用着的数据。

78
00:04:06,246 --> 00:04:11,246
我们要使用的SQLite有个不赖的名字。听上去像是SQL的

79
00:04:11,251 --> 00:04:13,251
关系是数据库，这个内容我们在接下来的几节课会接着讲，

80
00:04:13,253 --> 00:04:16,253
不过SQLite是轻量级的数据库，以至于每次只有一个客户可以使用它，

81
00:04:16,256 --> 00:04:20,256
这就是配置的初级版，

82
00:04:20,260 --> 00:04:23,260
这对搞开发测试的一个人员来说很好用。在你转入生产环境时，

83
00:04:23,263 --> 00:04:26,263
通常你会看到类似于这个的东西，

84
00:04:26,266 --> 00:04:30,266
这就是你实际存放整个堆栈的数个副本的地方。

85
00:04:30,270 --> 00:04:33,270
你会看到我们已经用Thin替换了Webrick，前者是生产质量，

86
00:04:33,273 --> 00:04:38,273
非常迅速，非常低位的前端

87
00:04:38,278 --> 00:04:42,278
表示层。我们有应用程序堆栈的多个副本，这么说吧，

88
00:04:42,282 --> 00:04:47,282
其中包含表示层与

89
00:04:47,287 --> 00:04:50,287
我们的应用程序代码。我们可以这样做的原因，

90
00:04:50,290 --> 00:04:53,290
还记得我们之前说过，HTTP是一个无状态协议。

91
00:04:53,293 --> 00:04:57,293
每个请求实际上都是独立的。好啦，如果真的有东西把同一个客户的

92
00:04:57,297 --> 00:05:00,297
各种请求联系在一起，这唯一的东西就

93
00:05:00,000 --> 00:05:04,300
是输入这个持久层的数据，那么我们应该能够创建

94
00:05:04,304 --> 00:05:06,304
应用程序的多个副本，从而服务更多客户，

95
00:05:06,306 --> 00:05:10,306
这些客户应该能够将传入流量导向至这些里的人一个副本，

96
00:05:10,310 --> 00:05:12,310
因为他们全都是独立的请求，

97
00:05:12,312 --> 00:05:16,312
只依赖存储的数据才能将不同用户的请求

98
00:05:16,316 --> 00:05:19,316
绑在一起。这是事实上真实发生的事情。现在，

99
00:05:19,319 --> 00:05:22,319
考虑到这有点复杂，为什么我没绘制数据库的多个版本，

100
00:05:22,322 --> 00:05:25,322
而是使用McSQLogic作为这里的支架呢？

101
00:05:25,325 --> 00:05:28,325
这原因实在有点棘手，这是因为一旦你

102
00:05:28,328 --> 00:05:31,328
有了数据库的多个副本，这就意味着

103
00:05:31,331 --> 00:05:34,331
存在某些数据项的多个副本。现在，

104
00:05:34,334 --> 00:05:37,334
问题是如果存在数个数据库，

105
00:05:37,337 --> 00:05:40,337
这些副本会是否一直保持同步。这是个开放式的问题，

106
00:05:40,340 --> 00:05:43,340
如果你听过NoSQL运动或NoSQL数据库，

107
00:05:43,343 --> 00:05:45,343
这是他们想要解决的问题之一，我们会试着为大家解释

108
00:05:45,345 --> 00:05:48,345
{要暂时处理这个问题的难点}。

109
00:05:48,348 --> 00:05:51,348
这节课，我们将使用Heroku进行部署。

110
00:05:51,351 --> 00:05:54,351
他们有着极为相似的环境，

111
00:05:54,354 --> 00:05:57,354
不过他们采用定制设计的他们称其为Dynos的东西，

112
00:05:57,357 --> 00:06:00,357
这有几分像是可运行的轻量级应用服务器。每个应用程序同样有

113
00:06:00,000 --> 00:06:04,360
专门支持它的数据库。它使数据库隐藏内置起来，所以

114
00:06:04,364 --> 00:06:08,364
可以轻松重复常见的数据库查询，同时

115
00:06:08,368 --> 00:06:12,368
他们还对一组表示层HTTP拥有专有技术，因此

116
00:06:12,372 --> 00:06:15,372
可以从应用服

117
00:06:15,375 --> 00:06:18,375
务器对他们进行单独向外扩展，不过基本思路是

118
00:06:18,378 --> 00:06:21,378
返回时也是同样的情况。Sac的无状态部分，

119
00:06:21,381 --> 00:06:23,381
像表示层与应用层，

120
00:06:23,383 --> 00:06:27,383
基本上都借由制造他们的多个副本向外扩展。

121
00:06:27,387 --> 00:06:29,387
有了云计算，使用数台设备如此便宜，

122
00:06:29,389 --> 00:06:33,389
以致于这成了流行策略，不过迟早数据库

123
00:06:33,393 --> 00:06:35,393
会成为大家的瓶颈，

124
00:06:35,395 --> 00:06:40,395
而要规模扩展会变得更为棘手，这我们稍后再来讲解。

125
00:06:40,400 --> 00:06:43,400
是时候向外扩展数据库时，大家都做些什么呢？如果你听过术语分片

126
00:06:43,403 --> 00:06:46,403
与复制，你也许会说，

127
00:06:46,406 --> 00:06:49,406
要是我有一些数据元素没有在不同用户间共享过，

128
00:06:49,409 --> 00:06:52,409
例如，我的个人喜好，

129
00:06:52,412 --> 00:06:56,412
像my Yahoo之类网站内的个人用户配置文件，那么有一种可能，

130
00:06:56,416 --> 00:07:00,416
我可能会有多个数据库与客户，这些

131
00:07:00,000 --> 00:07:02,420
用不同字母开头的用户名称会存储在不同的数据库里。

132
00:07:02,422 --> 00:07:05,422
现在，只要你不需要梳理其中两个数据库的信息，这就会

133
00:07:05,425 --> 00:07:08,425
运行得很好，

134
00:07:08,428 --> 00:07:10,428
之后事情越来越多，多如牛毛，这就叫做分片，还有一个想法，如果在你的应用

135
00:07:10,430 --> 00:07:13,430
程序中你有些数据

136
00:07:13,433 --> 00:07:16,433
从没与不同用户的或不同实体的其他

137
00:07:16,436 --> 00:07:19,436
数据互动过，你可以把该数据存放在

138
00:07:19,439 --> 00:07:23,439
不同的数据库内。复制就是一个解决方法。

139
00:07:23,443 --> 00:07:27,443
这就是说，为什么不能有多个数据库的副本，

140
00:07:27,447 --> 00:07:30,447
只让一个副本接受升级，这是因为更新的计划比询问来说频率较低，

141
00:07:30,450 --> 00:07:34,450
同时，定期更新会

142
00:07:34,454 --> 00:07:36,454
传播到其他副本。这就是常说的主从复制，

143
00:07:36,456 --> 00:07:40,456
这是这样做的一种方法。哪类数据

144
00:07:40,460 --> 00:07:43,460
会出现读取比写入更频繁呢？

145
00:07:43,463 --> 00:07:46,463
想想脸谱社交网，还有在时间轴上记录或爱好什么的想法，

146
00:07:46,466 --> 00:07:49,466
相比于在任何给定时间更新结果的人，

147
00:07:49,469 --> 00:07:52,469
消费结果的人要多得多。

148
00:07:52,472 --> 00:07:55,472
存在一定程度上的不一致，

149
00:07:55,475 --> 00:07:58,475
这事实上一直是脸谱网的问题，

150
00:07:58,478 --> 00:08:01,478
所以他们做了很多工程来解决这个问题。

151
00:08:01,481 --> 00:08:04,481
问题就是，如果大家要更新自己的时间轴，会存在一定量的时间限制，

152
00:08:04,484 --> 00:08:07,484
在此时间内你所有的朋友

153
00:08:07,487 --> 00:08:10,487
都会立刻看到更新。他们看到更新的时间略有不同。如今，

154
00:08:10,490 --> 00:08:12,490
正是因为他们，脸谱网已经做了海量的工程

155
00:08:12,492 --> 00:08:15,492
试图尽量减小窗口，这样他们实践时大多数人都不会

156
00:08:15,495 --> 00:08:18,495
注意到这一点。这里的消息可不是免费的午餐。

157
00:08:18,498 --> 00:08:22,498
如果你借助复制扩展你的数据规模，

158
00:08:22,502 --> 00:08:24,502
你会在某种程度上遇到这样的问题，

159
00:08:24,504 --> 00:08:27,504
不同的数据副本未必都是最新的。

160
00:08:27,507 --> 00:08:30,507
如果你想要借助分片解决问题，你就可以避免问题的发生，

161
00:08:30,510 --> 00:08:33,510
不过现在你的数据问题是他们处于不同的数据库里。

162
00:08:33,513 --> 00:08:36,513
实在很难将他们结合起来，融合在一起。

163
00:08:36,516 --> 00:08:38,516
这两者中没有能解决数据库扩展问题的解决方案，

164
00:08:38,518 --> 00:08:41,518
而这直接来自于这三层架构，

165
00:08:41,521 --> 00:08:46,521
要扩展数据的所在实在难以实现。

166
00:08:46,526 --> 00:08:49,526
概括软件即服务架构方面的亮点，

167
00:08:49,529 --> 00:08:53,529
浏览器就是客户。他们会问问题，

168
00:08:53,533 --> 00:08:56,533
他们会向服务器发出请求。HTTP是

169
00:08:56,536 --> 00:09:00,536
使用的协议，他们运用URI与HTTP的方法，

170
00:09:00,000 --> 00:09:03,540
像是get和post来说明他们想要做的事。HTTP是请求应答协议，因此

171
00:09:03,543 --> 00:09:06,543
一切始于用户询问问题。服务没法主动把信息推给你，

172
00:09:06,546 --> 00:09:09,546
他们需要等待客户提问。

173
00:09:09,549 --> 00:09:11,549
即便有时看上去像是服务器推送信息的，

174
00:09:11,551 --> 00:09:14,551
通常只是客户在反复询问而已。

175
00:09:14,554 --> 00:09:18,554
在现代的SaaS应用程序中，

176
00:09:18,558 --> 00:09:20,558
你向服务器提出请求时，不会给你一个静态文件，

177
00:09:20,560 --> 00:09:23,560
而是为你动态生成某些内容。

178
00:09:23,563 --> 00:09:28,563
HTML是媒介，通过它内容代码化。CSS或

179
00:09:28,568 --> 00:09:31,568
级联样式表就是我们控制其外观的方法，

180
00:09:31,571 --> 00:09:34,571
由于HTTP设计为无状态协议，所以cookies

181
00:09:34,574 --> 00:09:38,574
允许服务器跟踪不同客户，同时记录

182
00:09:38,578 --> 00:09:42,578
反复多个请求的同一客户。

183
00:09:42,582 --> 00:09:44,582
在这里有一个重要的架构折中方案。

184
00:09:44,584 --> 00:09:47,584
这个架构折中方案是无状态的，这表示你可以

185
00:09:47,587 --> 00:09:51,587
在一定程度上复制应用服务器或复制表示层，由此扩展那些中间层，

186
00:09:51,591 --> 00:09:54,591
不过进行复制时你没法切实处理数据库。

187
00:09:54,594 --> 00:09:57,594
事后想想，你也许会说，虽然这些无状态性看上去会导致

188
00:09:57,597 --> 00:10:00,597
漏洞处需要cookies这种

189
00:10:00,000 --> 00:10:02,600
复杂情况，不过这不失为是个好的架构选择，

190
00:10:02,602 --> 00:10:05,602
因为借此可更轻松地扩展部分应用程序。

191
00:10:05,605 --> 00:10:10,605
像rails、像Django以及其他的各种架构均试图融入支持SaaS应用程序

192
00:10:10,610 --> 00:10:14,610
必需的常见机制，像我们一直讨论的

193
00:10:14,614 --> 00:10:17,614
这种构造，同时还要方便你随意使用，

194
00:10:17,617 --> 00:10:20,617
所以不是每个新程序都必须推倒重来。

195
00:10:20,620 --> 00:10:26,620
最后，这些逻辑层与无共享构架间的

196
00:10:26,626 --> 00:10:28,626
映射同样负责给你

197
00:10:28,628 --> 00:10:31,628
所需的应用程序。他们需要确认

198
00:10:31,631 --> 00:10:34,631
各种功能流向何处，架构如何

199
00:10:34,634 --> 00:10:36,634
支持每个部分，这就是我们

200
00:10:36,636 --> 00:10:37,636
接下来几节课要研究的课题。


