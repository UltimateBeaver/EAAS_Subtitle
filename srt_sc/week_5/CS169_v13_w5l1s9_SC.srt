1
00:00:00,000 --> 00:00:09,000
我感觉这就像一部科幻小说。我们有这些3x5卡片。

2
00:00:09,009 --> 00:00:13,009
我们为什么不拿上这些3x5卡片，

3
00:00:13,013 --> 00:00:15,013
将它们转变成用户要求的验收测试呢？

4
00:00:15,015 --> 00:00:17,015
用户说，“这就是我想要的，如果你能这么做，

5
00:00:17,017 --> 00:00:21,017
我就高兴。”所以你可以做到。

6
00:00:21,021 --> 00:00:23,021
你要如何做到？这些的语言都是英文，对吗？

7
00:00:23,023 --> 00:00:25,023
你要如何进行转变？

8
00:00:25,025 --> 00:00:31,025
我们还没有自然语言理解系统，所以这看起来似乎是不可能的。

9
00:00:31,031 --> 00:00:34,031
然后，即使你能做到这一点，你难道不还是要一个人

10
00:00:34,034 --> 00:00:37,034
坐在那里每次都按动按钮来测试你的用户界面吗？

11
00:00:37,037 --> 00:00:42,037
这就是 Cucumber的功能，将从

12
00:00:42,042 --> 00:00:47,042
客户友好的验收测试用户体验转变成

13
00:00:47,047 --> 00:00:49,047
同时完成验收测试和集成测试，如果从以前你还记得的话。

14
00:00:49,049 --> 00:00:53,049
它介于二者之间，

15
00:00:53,053 --> 00:00:59,053
所以它仍不是代码。语言是英语所以客户能看懂，

16
00:00:59,059 --> 00:01:02,059
但又不是完全的自由形式，

17
00:01:02,062 --> 00:01:07,062
所以计算机也能看懂。这就是用户在Cucumber中的体验。

18
00:01:07,067 --> 00:01:11,067
第一点称为功能。

19
00:01:11,071 --> 00:01:13,071
这基本上就是用户体验的内容。所以用户可以手动

20
00:01:13,073 --> 00:01:17,073
添加一部电影。你所拥有的，是每个用户体验或功能

21
00:01:17,077 --> 00:01:23,077
都有一个或多个场景…功能之一，

22
00:01:23,083 --> 00:01:26,083
然后这是程式化的英语，但依旧能被理解。

23
00:01:26,086 --> 00:01:29,086
假设我正在烂土豆网站主页，

24
00:01:29,089 --> 00:01:31,089
当我点击“添加新电影”，我应该就会

25
00:01:31,091 --> 00:01:34,091
进入“创建新电影”页面，当我在“标题”里填上“黑衣人”，

26
00:01:34,094 --> 00:01:38,094
然后从“评级”里选择“PG-13”，

27
00:01:38,098 --> 00:01:40,098
按“保存更改”，那么我在烂土豆页面，

28
00:01:40,100 --> 00:01:43,100
应该会看到一个“黑衣人”{这些是3到8}；

29
00:01:43,103 --> 00:01:47,103
这些被称为步骤。我们有一个功能，是用户体验。

30
00:01:47,107 --> 00:01:51,107
我们有多个场景，通常每个功能至少有一个场景，

31
00:01:51,111 --> 00:01:57,111
每个场景都有步骤。好了，我想我刚刚说过了。

32
00:01:57,117 --> 00:02:01,117
现在，你们把这个信息存放在哪里？这些是关键词:

33
00:02:01,121 --> 00:02:04,121
“功能”和“场景”，你将它们存储在

34
00:02:04,124 --> 00:02:10,124
rails框架中一个.features 文件里。现在我们需要做的是，

35
00:02:10,130 --> 00:02:13,130
执行这些我们已经定义或书写的步骤。

36
00:02:13,133 --> 00:02:17,133
这些步骤已经用given、when和then等词写好，

37
00:02:17,137 --> 00:02:20,137
我们必须将它们映射到实施测试的Ruby代码上。

38
00:02:20,140 --> 00:02:25,140
这些将会在.rb文件里，

39
00:02:25,145 --> 00:02:30,145
所以我们有.feature文件、.rb文件，还有一些控制器名称。

40
00:02:30,150 --> 00:02:34,150
这些“given”步骤意味着那些是先决条件，

41
00:02:34,154 --> 00:02:38,154
在你开始这次体验之前世界的状态。“when”步骤

42
00:02:38,158 --> 00:02:40,158
是动作。在某种程度上，我们要知道如何按下…

43
00:02:40,160 --> 00:02:44,160
让浏览器按下那些浏览器按钮，然后“then”步骤是结果，

44
00:02:44,164 --> 00:02:48,164
在你完成之后会发生的事情。

45
00:02:48,168 --> 00:02:51,168
然后为了让它更具可读性，那里还用了连词。

46
00:02:51,171 --> 00:02:54,171
你可以使用“and”和“but”，所以你可以使用“given”和这个还有这个，

47
00:02:54,174 --> 00:03:02,174
然后还有之后的几个条件。

48
00:03:02,182 --> 00:03:05,182
现在步骤与步骤定义之间的神奇之处在于使用正则表达式，

49
00:03:05,185 --> 00:03:07,185
所以我们要写我们前面所谈到的

50
00:03:07,187 --> 00:03:10,187
出色而古老的正则表达式。它们会匹配那些英语短语，

51
00:03:10,190 --> 00:03:14,190
将它们映射到写在Ruby中的测试代码。

52
00:03:14,194 --> 00:03:18,194
所以记住“given”我正在烂土豆主页。

53
00:03:18,198 --> 00:03:22,198
这是我们的正则表达式。它将匹配这个，

54
00:03:22,202 --> 00:03:25,202
还将得到那个捕获的字符串，对吗？

55
00:03:25,205 --> 00:03:29,205
捕获的字符串在括号里，它还将

56
00:03:29,209 --> 00:03:32,209
记住烂土豆主页，我们可能还会在步骤定义中用到它。

57
00:03:32,212 --> 00:03:38,212
要使用这个，如书上所说的，

58
00:03:38,218 --> 00:03:40,218
需要先安装。像其他所有东西一样，你要将它作为Cucumber的精华来安装。

59
00:03:40,220 --> 00:03:44,220
它将为你创建这种类型的记忆。

60
00:03:44,224 --> 00:03:47,224
Rails如何能这么多产？它做了一堆事情，

61
00:03:47,227 --> 00:03:49,227
你都可以不用做了。安装时，

62
00:03:49,229 --> 00:03:53,229
它将创建一些常用的步骤定义。

63
00:03:53,233 --> 00:03:57,233
Armando之前谈过在生产和开发过程中开展测试。

64
00:03:57,237 --> 00:04:00,237
你需要一个测试数据库来配合，

65
00:04:00,000 --> 00:04:05,240
还有编辑这些.feature文件来添加功能。

66
00:04:05,245 --> 00:04:08,245
这个问题的另一部分呢？我们让谁来按按钮？

67
00:04:08,248 --> 00:04:14,248
这个工具称为Capybara。

68
00:04:14,254 --> 00:04:18,254
班上可能没人知道除了Armando，

69
00:04:18,258 --> 00:04:22,258
Capybara是世界上最大的老鼠。它的个头和狗差不多，

70
00:04:22,262 --> 00:04:24,262
那是因为之前的工具被称为WebRAT，所以这个名字更好。

71
00:04:24,264 --> 00:04:31,264
这是一只大老鼠，Capybara。它与应用程序交互，

72
00:04:31,271 --> 00:04:34,271
接收页面和HTML部分并提交表单，

73
00:04:34,274 --> 00:04:36,274
正是我们刚刚所谈论到的，对吗？我们正在谈论表单。

