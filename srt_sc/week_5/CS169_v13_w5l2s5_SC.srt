1
00:00:00,000 --> 00:00:07,000
准备好，投票。结果如何？有红色和蓝色。

2
00:00:07,007 --> 00:00:12,007
红色和蓝色。好的。大家讨论一下。红色和蓝色不可能都正确。

3
00:00:12,012 --> 00:00:19,012
讨论一下，然后做个决定。我们再试一次。

4
00:00:19,019 --> 00:00:26,019
一起投票。准备，投票。

5
00:00:26,026 --> 00:00:30,026
颜色仍然很多彩，那么让我来看看。看较简单的，第一个选项。

6
00:00:30,030 --> 00:00:33,030
Lo-FI UI的目的，在编写程序之前，需要购买UI。

7
00:00:33,033 --> 00:00:36,033
没错，这就是我们正在努力做的，调试并与客户达成一致。

8
00:00:36,036 --> 00:00:41,036
我猜，这两点都有。

9
00:00:41,041 --> 00:00:44,041
BDD的一个缺点是要求不断与客户联系，

10
00:00:44,044 --> 00:00:47,044
这可能做不到。我们努力为你找到

11
00:00:47,047 --> 00:00:50,047
极度关心你的需求、想见你的客户。

12
00:00:50,050 --> 00:00:53,050
但有时候客户不关心，他们只想

13
00:00:53,053 --> 00:00:58,053
让你解决问题后返回来，然后BDD起不到很好的效果。

14
00:00:58,058 --> 00:01:02,058
BDD的一个缺点是它可能造成糟糕的软件架构，

15
00:01:02,062 --> 00:01:05,062
因为重点在于行为。另一个

16
00:01:05,065 --> 00:01:08,065
我们还没怎么谈到的选项如何？肯特贝克，

17
00:01:08,068 --> 00:01:15,068
敏捷宣言的签名者之一，他在上面写下了他的亲笔签名，

18
00:01:15,075 --> 00:01:17,075
并想出了极限编程，

19
00:01:17,077 --> 00:01:21,077
也就是我们在这门课里所练习的Agile软件的形式。

20
00:01:21,081 --> 00:01:25,081
他曾这样说，“你有可能最终造成

21
00:01:25,085 --> 00:01:27,085
糟糕的软件架构吗？”他说，“不是可能，而是肯定会。

22
00:01:27,087 --> 00:01:31,087
你肯定会有一个糟糕的软件架构

23
00:01:31,091 --> 00:01:34,091
因为行为是重点。”

24
00:01:34,094 --> 00:01:39,094
Agile软件的神奇魔力之一，是你能够持续升级代码，

25
00:01:39,099 --> 00:01:44,099
而阿曼德将谈论两个重要的思想，

26
00:01:44,104 --> 00:01:47,104
重构和设计模式是取得良好软件架构的方式。

27
00:01:47,107 --> 00:01:51,107
那是Agile模型的一部分。

28
00:01:51,111 --> 00:01:54,111
开始、创建、然后重构变得更加精致的代码，

29
00:01:54,114 --> 00:01:57,114
使它拥有一个良好的软件架构。

30
00:01:57,117 --> 00:02:00,117
是的，这是一个合理的批评，

31
00:02:00,000 --> 00:02:02,120
尽管我们还没展开讨论。
