1
00:00:00,000 --> 00:00:04,000
我说过控制器方法中的一个实例方法，

2
00:00:04,004 --> 00:00:12,004
它的值能保留多长时间？读一读然后思考。初次投票。

3
00:00:12,012 --> 00:00:20,012
我肯定你们有足够的时间思考。我说得对吗？

4
00:00:20,020 --> 00:00:25,020
花30秒时间讨论一下。我只说对了一部分。

5
00:00:25,025 --> 00:00:33,025
好了，我们来进行第二次投票。第二次投票，举起来。

6
00:00:33,033 --> 00:00:38,033
好了，大片的红色。我们来一个一个过一遍。

7
00:00:38,038 --> 00:00:40,038
如果我说控制器方法中的一个实例变量，

8
00:00:40,040 --> 00:00:42,040
好的，在这里这是关键词，控制器方法的实例变量。

9
00:00:42,042 --> 00:00:45,042
这里的提示是控制器实际上就是

10
00:00:45,045 --> 00:00:49,045
HTTP请求的接收端。HTTP是无状态的，

11
00:00:49,049 --> 00:00:52,049
我们一直反复提及这一点。一旦控制器方法

12
00:00:52,052 --> 00:00:56,052
完成工作…控制器是什么？控制器是

13
00:00:56,056 --> 00:00:59,056
对象的一个实例。它是控制器对象

14
00:00:59,059 --> 00:01:02,059
处理传入的HTTP请求的一个实例。

15
00:01:02,062 --> 00:01:06,062
控制器对象一旦完成自己的工作，那个控制器的实例

16
00:01:06,066 --> 00:01:08,066
就会同所有的实例变量一起蒸发不见。

17
00:01:08,068 --> 00:01:12,068
实例变量使用一次就消失。

18
00:01:12,072 --> 00:01:14,072
一旦你将它们用于视图，就可以对它们永远说再见了。

19
00:01:14,074 --> 00:01:17,074
现在，有一些特殊情况，比如flash和session。

20
00:01:17,077 --> 00:01:21,077
我们有理由将一些信息从一个请求保持到另一个请求，

21
00:01:21,081 --> 00:01:23,081
所以那些东西才有单独的抽象

22
00:01:23,083 --> 00:01:27,083
比如flash和session。只有当前请求

23
00:01:27,087 --> 00:01:29,087
和下一个即将用于视图的请求

24
00:01:29,089 --> 00:01:32,089
会在flash中放置内容。它看起来像一个散列表，使用起来也像散列表，

25
00:01:32,092 --> 00:01:36,092
但它在当前请求之后会被保持到下一个请求。

26
00:01:36,096 --> 00:01:38,096
如果你将它放进session，它确实会持续服务所有的后续请求。

27
00:01:38,098 --> 00:01:41,098
只要你不让你的session过于臃肿，

28
00:01:41,101 --> 00:01:45,101
以致无法放入cookie里。红色答案是正确的，

29
00:01:45,105 --> 00:01:48,105
蓝色答案，如果你选择了蓝色答案，说明你现在在课程169，

30
00:01:48,108 --> 00:01:50,108
现在不是Java。事实上，我甚至不确定在Java中这种陈述是否可行。

31
00:01:50,110 --> 00:01:53,110
没有声明，也没有static关键字，如果有相应概念的话，

32
00:01:53,113 --> 00:01:55,113
它们将是类变量而不是实例变量。

33
00:01:55,115 --> 00:01:57,115
我只是想看看我能放入多少不同的关键字

34
00:01:57,117 --> 00:02:00,117
才会造成它不可行。

35
00:02:00,000 --> 00:02:04,120
每次你向应用程序发送一个新的HTTP请求，每个传入的新请求

36
00:02:04,124 --> 00:02:07,124
都将导致一个新的控制器对象实例被创建。

37
00:02:07,127 --> 00:02:10,127
与任何类型的对象一样，每当一个对象的实例消失，

38
00:02:10,130 --> 00:02:13,130
所有与之相关的实例变量

39
00:02:13,133 --> 00:02:15,133
也会消失不见。这就是

40
00:02:15,135 --> 00:02:16,135
解释。
