1
00:00:00,000 --> 00:00:03,000
我们要开始讨论RSpec和Rails。

2
00:00:03,003 --> 00:00:06,003
我们最近对RSpec做了一个简要介绍，我不知道你们中

3
00:00:06,006 --> 00:00:09,006
有多少人在写作业时衷心采纳我们的建议，

4
00:00:09,009 --> 00:00:11,009
尽管现在我们正在为你们提供测试用例，

5
00:00:11,011 --> 00:00:15,011
我们希望你们开始阅读测试用例，

6
00:00:15,015 --> 00:00:19,015
了解它们的样子，开始潜移默化地

7
00:00:19,019 --> 00:00:21,019
感受规范代码是什么样子。

8
00:00:21,021 --> 00:00:24,021
因为现在我们要开始非常详细地讨论。

9
00:00:24,024 --> 00:00:29,024
有趣的是，如戴夫所说，前面一波学生，

10
00:00:29,029 --> 00:00:32,029
当我们把BDD介绍给他们时，我还担心BDD和Cucumber

11
00:00:32,032 --> 00:00:35,032
会成为他们的学习症结所在，

12
00:00:35,035 --> 00:00:38,035
因为它是一个新工具，一种新语言，

13
00:00:38,038 --> 00:00:42,038
它不是代码，介于代码和自然语言之间。

14
00:00:42,042 --> 00:00:46,042
事实上，那些学生们，一旦习惯了它的用法，

15
00:00:46,046 --> 00:00:48,046
就真的学会了，我认为他们接受了一个事实，

16
00:00:48,048 --> 00:00:51,048
就是它是与客户沟通

17
00:00:51,051 --> 00:00:55,051
及表达集成测试的一种自然方式。那非常好。令我们没想到的是，

18
00:00:55,055 --> 00:00:59,055
学生们比我们预期的更难以掌握

19
00:00:59,059 --> 00:01:01,059
与RSpec同等水平的单元测试和功能测试。

20
00:01:01,061 --> 00:01:06,061
希望这一次，我们能做得更好。

21
00:01:06,066 --> 00:01:08,066
我们已经介绍了RSpec是用于测试的

22
00:01:08,068 --> 00:01:11,068
特定域语言的概念。我们已经知道，因为我们

23
00:01:11,071 --> 00:01:13,071
一直在看你们的家庭作业，

24
00:01:13,073 --> 00:01:18,073
有一个spec目录，我们还未告诉你们的是，

25
00:01:18,078 --> 00:01:20,078
就像我们有一个使用过的生成器，

26
00:01:20,080 --> 00:01:22,080
例如当我们创建迁移时，它会为你在正确的位置创建一些空代码。

27
00:01:22,082 --> 00:01:26,082
有一个生成器你可以在你的Rails应用上运行，

28
00:01:26,086 --> 00:01:29,086
“rails generate rspec: install”，

29
00:01:29,089 --> 00:01:33,089
它将生成所有目录，以便将测试放置在正确的位置

30
00:01:33,093 --> 00:01:35,093
好让它能找到它们。现在，到目前为止，

31
00:01:35,095 --> 00:01:38,095
你们的家庭作业里，我们仅有两个子目录。

32
00:01:38,098 --> 00:01:41,098
一个是lib子目录，存放代码，

33
00:01:41,101 --> 00:01:45,101
一个是spec子目录，存放测试。事实上，

34
00:01:45,105 --> 00:01:47,105
为了将Rails应用中的测试组织得更好，

35
00:01:47,107 --> 00:01:50,107
我们将编写三种不同的测试。

36
00:01:50,110 --> 00:01:52,110
有单元测试，主要测试模型，

37
00:01:52,112 --> 00:01:56,112
有时候也测试辅助函数。有功能测试，

38
00:01:56,116 --> 00:01:59,116
主要测试控制器方法。集成测试呢？

39
00:01:59,119 --> 00:02:03,119
我们可以围绕视图写RSpec测试吗？

40
00:02:03,123 --> 00:02:07,123
有些人写了，有些人不写。对此的观点混杂不一。

41
00:02:07,127 --> 00:02:11,127
我们的观点是集成测试是与客户达成共识过程中的一部分。

42
00:02:11,131 --> 00:02:13,131
我们的观点是，可以使用Cucumber

43
00:02:13,133 --> 00:02:16,133
作为表达集成测试的方式，

44
00:02:16,136 --> 00:02:19,136
因为你可以表达诸如应该出现

45
00:02:19,139 --> 00:02:22,139
或不应该出现在视图中的内容。我们已经说过，

46
00:02:22,142 --> 00:02:24,142
要注意尽管我们在课堂上不会对此讨论太多，

47
00:02:24,144 --> 00:02:28,144
但事实上，你们可以为你们的视图写规范。

48
00:02:28,148 --> 00:02:31,148
我们会提供一些用例，你们也许可以放进规范中

49
00:02:31,151 --> 00:02:35,151
如果你们编写视图。在Rails应用程序方面，

50
00:02:35,155 --> 00:02:38,155
就像我们有模型子目录、控制器子目录和视图子目录，

51
00:02:38,158 --> 00:02:42,158
在spec目录下有一个并行分层结构，

52
00:02:42,162 --> 00:02:45,162
其中有我们的模型规范、控制器规范，如果我们写了视图规范，

53
00:02:45,165 --> 00:02:47,165
其中也会存放下来，但是我们可以接受

54
00:02:47,167 --> 00:02:51,167
让每个人都使用Cucumber。

55
00:02:51,171 --> 00:02:55,171
是回到BDD用例中，在那里我们添加了这个方法，

56
00:02:55,175 --> 00:02:57,175
假设呼叫TMDb服务，

57
00:02:57,177 --> 00:03:00,177
并能够使用其中的数据填充我们的电影数据库。

58
00:03:00,000 --> 00:03:05,180
记住，这个设置是在Cucumber测试的

59
00:03:05,185 --> 00:03:09,185
悲观路径中，有一个步骤，

60
00:03:09,189 --> 00:03:14,189
我按下“搜TMDb”，我们的想法是，

61
00:03:14,194 --> 00:03:16,194
在一个完全正常工作的应用程序中，它将调用一个控制器方法

62
00:03:16,196 --> 00:03:20,196
导致外部服务查询，返回数据，

63
00:03:20,200 --> 00:03:25,200
然后将这些数据放到我们的模型中。我们会做什么来填写这个用例？

64
00:03:25,205 --> 00:03:28,205
记住我们说过这个BDD/TDD交互。

65
00:03:28,208 --> 00:03:32,208
我们从一个Cucumber场景的一个步骤开始，

66
00:03:32,212 --> 00:03:35,212
因为没有代码，那个步骤将会失败，

67
00:03:35,215 --> 00:03:36,215
现在我们要到达的位置是，“好吧，是时候

68
00:03:36,216 --> 00:03:39,216
给那个把步骤写代码让它通过了。”我们递归地采取相同的想法。

69
00:03:39,219 --> 00:03:42,219
我们将首先思考我们想要代码做什么？

70
00:03:42,222 --> 00:03:45,222
我们希望代码如何表现？

71
00:03:45,225 --> 00:03:48,225
我们要写测试来描述这些行为，

72
00:03:48,228 --> 00:03:52,228
然后逐渐地，回填代码，

73
00:03:52,232 --> 00:03:54,232
以便它按照测试的要求去做。从概念上说不是很困难，

74
00:03:54,234 --> 00:03:58,234
第一次做会感到非常不自然，

75
00:03:58,238 --> 00:04:01,238
所以必须坚持。

76
00:04:01,241 --> 00:04:04,241
记得当我们说给一个Rails应用程序添加新功能，

77
00:04:04,244 --> 00:04:07,244
这些事情是你必须要做的。

78
00:04:07,247 --> 00:04:09,247
你必须添加一个新路由、新控制器方法和新视图。现在我们集中关注

79
00:04:09,249 --> 00:04:12,249
控制器方法，我们会问，“控制器方法接收到搜索表单时

80
00:04:12,252 --> 00:04:16,252
应该做什么？”

81
00:04:16,256 --> 00:04:18,256
我们之前说过，当我们规划这个特性时，

82
00:04:18,258 --> 00:04:20,258
它应该调用一个方法将在TMDb中搜索指定的电影，

83
00:04:20,260 --> 00:04:24,260
如果找到匹配的电影，

84
00:04:24,264 --> 00:04:27,264
它应该选择“搜索结果”视图，显示匹配结果，等等。

85
00:04:27,267 --> 00:04:30,267
让我们从这里开始。当它说，“控制器方法

86
00:04:30,270 --> 00:04:34,270
应该做这些事情，”我们可以在正常代码中捕捉到这个…

87
00:04:34,274 --> 00:04:38,274
好吧，这是我刚刚说的RSpec的中心版本。

88
00:04:38,278 --> 00:04:42,278
我说，当我们有搜索TMDb的控制器方法，

89
00:04:42,282 --> 00:04:44,282
它应该调用模型方法执行搜索，

90
00:04:44,284 --> 00:04:47,284
它应该选择返回搜索结果模板，

91
00:04:47,287 --> 00:04:50,287
假设这个问题解决了，

92
00:04:50,290 --> 00:04:52,290
它应该让搜索结果模板可用，

93
00:04:52,292 --> 00:04:55,292
以便模板有内容可显示。其实我真正完成的是翻译…

94
00:04:55,295 --> 00:04:58,295
将它视为用户故事，

95
00:04:58,298 --> 00:05:02,298
但是是对于程序员而言的。正如我们能够采用客户指定的行为，

96
00:05:02,302 --> 00:05:05,302
编写一个Cucumber故事，我们现在正在谈论

97
00:05:05,305 --> 00:05:08,305
我们想写的代码，这段代码能够做什么？

98
00:05:08,308 --> 00:05:11,308
这实际上是合法RSpec。

99
00:05:11,311 --> 00:05:15,311
这三个测试用例都以“It”开始，我们都还没有写。

100
00:05:15,315 --> 00:05:17,315
如果你们已经研究过家庭作业中的测试用例，

101
00:05:17,317 --> 00:05:20,317
你们会知道，如果我们在这些每一个后面加上Do ... End模块，

102
00:05:20,320 --> 00:05:22,320
它就是代码的去处，

103
00:05:22,322 --> 00:05:25,322
实际执行每个测试。让我们来看看这需要什么。

104
00:05:25,325 --> 00:05:30,325
我们先来做一下完整性检查。

105
00:05:30,330 --> 00:05:34,330
记住，我们要给我们的应用程序添加新功能，

106
00:05:34,334 --> 00:05:37,334
在某种程度上我们要使用这种方法

107
00:05:37,337 --> 00:05:40,337
联系TMDb和搜索电影。这样我们在需要做的事情上

108
00:05:40,340 --> 00:05:43,340
就达成一致了，方法将成为电影中的一个类方法，

109
00:05:43,343 --> 00:05:47,343
电影中的一个实例方法，

110
00:05:47,347 --> 00:05:50,347
控制器方法或者辅助函数方法？
