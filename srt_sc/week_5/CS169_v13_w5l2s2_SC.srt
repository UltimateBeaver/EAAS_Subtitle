1
00:00:00,000 --> 00:00:07,000
下一站是显式与隐式，

2
00:00:07,007 --> 00:00:09,007
命令式与声明式之间的对比，即不同类型的场景

3
00:00:09,009 --> 00:00:13,009
与不同的考虑场景方式的对比。我们开始一切的动力都是

4
00:00:13,013 --> 00:00:17,013
直接来自用户故事的要求吗？

5
00:00:17,017 --> 00:00:22,017
我们说有3到8个场景。

6
00:00:22,022 --> 00:00:25,022
我们如何让他们接近3个而不是8个，

7
00:00:25,025 --> 00:00:28,025
这样就不需要花很长时间去编写和理解它们？

8
00:00:28,028 --> 00:00:35,028
用户故事的结果方面，

9
00:00:35,035 --> 00:00:38,035
指的是显式和隐式场景的区别。

10
00:00:38,038 --> 00:00:43,038
显式场景直接来自用户，

11
00:00:43,043 --> 00:00:46,043
来自客户。它们基本上是验收测试。

12
00:00:46,046 --> 00:00:55,046
我们添加了搜索TMDD，也就是列出所有电影。

13
00:00:55,055 --> 00:00:57,055
这是客户在该页面希望看到的内容的举例。

14
00:00:57,057 --> 00:01:01,057
客户也许并不关心一些内容，

15
00:01:01,061 --> 00:01:04,061
就像例子里显示的那样，当你列出电影，

16
00:01:04,064 --> 00:01:08,064
是按输入顺序，字母顺序

17
00:01:08,068 --> 00:01:10,068
还是按上映时间排序，

18
00:01:10,070 --> 00:01:12,070
也许客户并不关心，所以你要自己想该如何做。

19
00:01:12,072 --> 00:01:17,072
这是一个隐式故事的例子。

20
00:01:17,077 --> 00:01:20,077
请记住这一点。有些内容直接来自3x5卡，

21
00:01:20,080 --> 00:01:22,080
而有些内容需要你自己想，

22
00:01:22,082 --> 00:01:31,082
客户会一直问问题。现在，当我们

23
00:01:31,091 --> 00:01:33,091
写下这些内容，我们一直以命令式的方式在写。

24
00:01:33,093 --> 00:01:38,093
这是给定的状态，

25
00:01:38,098 --> 00:01:42,098
还有一系列步骤让我们进入下一个状态，

26
00:01:42,102 --> 00:01:45,102
所以我们准备好做我们想看的测试，

27
00:01:45,105 --> 00:01:50,105
看看它是否如我们所想地做验收测试。如果你有许多用户故事都是命令式的，

28
00:01:50,110 --> 00:01:53,110
它们中很多将会使用完全相同的步骤。

29
00:01:53,113 --> 00:01:57,113
再来一次，[听不清 00:01:55]，我们看到很多相同的内容。

30
00:01:57,117 --> 00:01:59,117
必须有一些方法来努力避免这种情况，

31
00:01:59,119 --> 00:02:03,119
因为我们自己希望不要重复。基本上，尝试这么做的方式

32
00:02:03,123 --> 00:02:07,123
就是所谓的声明式，声明式方法就是，

33
00:02:07,127 --> 00:02:10,127
我们试着给出我们想要的状态。

34
00:02:10,130 --> 00:02:16,130
如果你想对比声明式编程语言与命令式编程语言，

35
00:02:16,136 --> 00:02:18,136
那是这些名字的灵感来源。

36
00:02:18,138 --> 00:02:22,138
这个采取的步骤应该少得多。让我来说得更具体点。

37
00:02:22,142 --> 00:02:24,142
我将谈论按字母顺序列出电影。

38
00:02:24,144 --> 00:02:27,144
我将先向你们展示如何用许多步骤命令式地进行，

39
00:02:27,147 --> 00:02:30,147
然后展示声明式的。

40
00:02:30,150 --> 00:02:34,150
我们如何说这是按字母顺序？

41
00:02:34,154 --> 00:02:38,154
我们要做的就是完成这些步骤。

42
00:02:38,158 --> 00:02:41,158
这是命令式方法。鉴于我在Rotten Potatoes主页，

43
00:02:41,161 --> 00:02:45,161
点击添加新电影，

44
00:02:45,165 --> 00:02:48,165
然后填入标题《佐罗》，点击保存更改，然后它就应该在

45
00:02:48,168 --> 00:02:53,168
Rotten Potatoes主页上，添加新电影，添加标题

46
00:02:53,173 --> 00:02:57,173
《现代启示录》，然后给它一个评级，保存更改。

47
00:02:57,177 --> 00:03:00,177
在Rotten Potatoes主页，

48
00:03:00,000 --> 00:03:05,180
我应该看到《现代启示录》在佐罗之前。这里有很多步骤要写，

49
00:03:05,185 --> 00:03:08,185
要完成，要变更我想要的最初的状态之一，

50
00:03:08,188 --> 00:03:12,188
好让我可以做这个测试。

51
00:03:12,192 --> 00:03:16,192
那是我想要的行为，

52
00:03:16,196 --> 00:03:21,196
并且按字母顺序排列。记得在BDD中，B代表的就是行为。

53
00:03:21,201 --> 00:03:24,201
我们尝试描述行为看起来似乎有点奇怪。

54
00:03:24,204 --> 00:03:27,204
我们命令式地去做就像你在实施一样。

55
00:03:27,207 --> 00:03:33,207
这里的想法是将它视为域语言，

56
00:03:33,213 --> 00:03:36,213
不是特定领域的语言，而是域语言。

57
00:03:36,216 --> 00:03:39,216
尝试，思考，从你的应用程序角度思考，

58
00:03:39,219 --> 00:03:42,219
从你想要的特性和概念思考。

59
00:03:42,222 --> 00:03:46,222
这只是一种非正式的语言。你想用

60
00:03:46,226 --> 00:03:49,226
这门语言编写声明式步骤。

61
00:03:49,229 --> 00:03:55,229
你的步骤定义即可实现。以声明式版本的场景

62
00:03:55,235 --> 00:03:59,235
按字母顺序排列可能会是什么样子。

63
00:03:59,239 --> 00:04:05,239
特性是一样的。添加电影后查看列表。

64
00:04:05,245 --> 00:04:09,245
鉴于我已经添加了电影《佐罗》和评级，

65
00:04:09,249 --> 00:04:13,249
正是我想要的状态。

66
00:04:13,253 --> 00:04:16,253
鉴于我已经添加了电影《现代启示录》和评级，然后我应该看到《现代启示录》

67
00:04:16,256 --> 00:04:21,256
位于《佐罗》前面。这样好多了。这是3个步骤与15个步骤的对比。

68
00:04:21,261 --> 00:04:26,261
这3个步骤其中之一是行为。这样好多了。

69
00:04:26,266 --> 00:04:32,266
声明式场景的重点在于被测试的行为，

70
00:04:32,272 --> 00:04:39,272
而不是设置测试所需要的步骤。

71
00:04:39,279 --> 00:04:41,279
我们要如何做到？我们的方式是添加更多步骤定义。

72
00:04:41,281 --> 00:04:47,281
下一张幻灯片举了一个例子。

73
00:04:47,287 --> 00:04:51,287
这里有一个步骤定义，[听不清00:04:49]声明式。

74
00:04:51,291 --> 00:04:54,291
基本上，你将一个步骤拆分为多个较小的步骤。

75
00:04:54,294 --> 00:04:59,294
还记得我们说步骤就像方法调用，

76
00:04:59,299 --> 00:05:02,299
步骤定义就像方法定义。你可以认为我们已经做好了。

77
00:05:02,302 --> 00:05:04,302
分层次完成。你使用代码。

78
00:05:04,304 --> 00:05:07,304
同样的，你可以通过步骤和步骤定义来完成。

79
00:05:07,307 --> 00:05:11,307
左边的这个例子正在处理特定陈述声明，

80
00:05:11,311 --> 00:05:16,311
鉴于我想添加这部电影，而它需要这些步骤，

81
00:05:16,316 --> 00:05:21,316
这些更命令式的步骤。

82
00:05:21,321 --> 00:05:25,321
这里的想法是你可能会开始编写命令式代码，

83
00:05:25,325 --> 00:05:30,325
但是你应该开始注意它们，尝试从中制定步骤定义或方法定义，

84
00:05:30,330 --> 00:05:33,330
所以你能[听不清00:05:33]，

85
00:05:33,333 --> 00:05:36,333
所以你不需要写大量代码，你将从命令式开始，

86
00:05:36,336 --> 00:05:43,336
并希望能迁移到声明式。

87
00:05:43,343 --> 00:05:47,343
记住这一点，我们来看看这样如何操作。

88
00:05:47,347 --> 00:05:50,347
我来读一读这个。哪个是对的，关于这些类型的场景的描述，隐式和显式，

89
00:05:50,350 --> 00:05:54,350
声明式和命令式。显式需求

90
00:05:54,354 --> 00:05:58,354
通常由命令式场景定义，隐式需求

91
00:05:58,358 --> 00:06:02,358
通常由声明式场景定义。显式场景

92
00:06:02,362 --> 00:06:07,362
通常捕获集成测试。声明式场景旨在

93
00:06:07,367 --> 00:06:11,367
捕获实施以及行为。以上描述

94
00:06:11,371 --> 00:06:14,371
全部不对。
