1
00:00:00,000 --> 00:00:02,000
哪个表述有误……我没想到本次讲座

2
00:00:02,002 --> 00:00:05,002
讲了这么多内容。不过，这也没什么。

3
00:00:05,005 --> 00:00:09,005
关于SaaS应用程序的可扩展性，哪个表述不对？

4
00:00:09,009 --> 00:00:12,009
无分享集群的可扩展性通常说来要优于

5
00:00:12,012 --> 00:00:15,012
从主机构建的系统，关系数据库的可扩展性要优于

6
00:00:15,015 --> 00:00:18,015
所谓的“NoSQL”数据库，采用的编程语言

7
00:00:18,018 --> 00:00:22,018
并非可扩展性的主要因素，以及如应用程序成为瓶颈， 

8
00:00:22,022 --> 00:00:25,022
那么其中任何部分都可阻碍可扩展性。

9
00:00:25,025 --> 00:00:29,025
以上表述有一个不正确，其他表述一致。有误的一项。

10
00:00:29,029 --> 00:00:37,029
第一轮投票显示……我猜就是，持有人不同的话， 

11
00:00:37,037 --> 00:00:40,037
智能手机会呈深浅不同的绿色，可我想这……

12
00:00:40,040 --> 00:00:41,040
大家展示的东西有四个颜色，你们可不能这么干呀。

13
00:00:41,041 --> 00:00:48,041
这就好多了。绿色确实是正确的。

14
00:00:48,048 --> 00:00:50,048
这绝非世界上最具挑战性的问题，不过

15
00:00:50,050 --> 00:00:54,050
这实在是个围绕其他选项打破虚构的好理由。

16
00:00:54,054 --> 00:00:57,054
我们刚讲过使用NoSQL的原因之一就是

17
00:00:57,057 --> 00:01:01,057
你碰到扩展性问题了，这应该明显解释了

18
00:01:01,061 --> 00:01:04,061
为什么这些选项中绿色项是错误陈述。

19
00:01:04,064 --> 00:01:07,064
看看其他选项，无分享集群的

20
00:01:07,067 --> 00:01:10,067
可扩展性优于主机构建的系统。

21
00:01:10,070 --> 00:01:13,070
第一个凭借更大的词汇量打败AltaVista的

22
00:01:13,073 --> 00:01:17,073
搜索引擎就是这么构建而成的。在云计算

23
00:01:17,077 --> 00:01:21,077
集群中使用数百台服务器，这对大型SaaS网站

24
00:01:21,081 --> 00:01:25,081
来说很常见，而即便是构建过的最大主机， 

25
00:01:25,085 --> 00:01:28,085
其平均容量与此相比也要相形见绌。事实上，

26
00:01:28,088 --> 00:01:32,088
有个有趣的比较，要占用亚马逊EC2 

27
00:01:32,092 --> 00:01:36,092
多少容量才等于沃森的计算容量。

28
00:01:36,096 --> 00:01:39,096
正如戴夫•帕特森在早期选举中指出的那样， 

29
00:01:39,099 --> 00:01:43,099
相比于许多律师与会计师费用，你可以用

30
00:01:43,103 --> 00:01:47,103
每小时更低的费用租赁沃森计算容量中的等价物。

31
00:01:47,107 --> 00:01:49,107
无分享集群的可扩展性更佳，这话绝对正确。

32
00:01:49,109 --> 00:01:52,109
诀窍是你必须架构软件，以便软件在无分享

33
00:01:52,112 --> 00:01:55,112
集群上运行良好，我们讲过的这类应用

34
00:01:55,115 --> 00:01:58,115
程序架构很大程度上面向……我们已

35
00:01:58,118 --> 00:02:02,118
有这些扩展良好的集群，为保证部署应用程序， 

36
00:02:02,122 --> 00:02:05,122
我们要做怎样的选择？那么使用的编程语言

37
00:02:05,125 --> 00:02:08,125
不是可扩展性的主要因素吗？这个陈述是正确的，

38
00:02:08,128 --> 00:02:11,128
我认为有时这一点并没得到确认。

39
00:02:11,131 --> 00:02:14,131
很长一段时间，人们执着于语言的性能，

40
00:02:14,134 --> 00:02:17,134
“噢，你正在使用解释性语言，真是个笨蛋。

41
00:02:17,137 --> 00:02:19,137
如果你进行编译，速度肯定快得多。”计算机是什么， 

42
00:02:19,139 --> 00:02:23,139
现在的速度比C语言刚发明出来那会儿快了百万倍？

43
00:02:23,143 --> 00:02:26,143
摩尔定律为我们带来了福音，

44
00:02:26,146 --> 00:02:30,146
我们还是不要浪费这份福音吧。

45
00:02:30,150 --> 00:02:32,150
如果你要借助在云计算设置内增加更多计算机，以此扩展应用程序，

46
00:02:32,152 --> 00:02:36,152
那么只要够好，你从每台计算机得到的

47
00:02:36,156 --> 00:02:39,156
性能其实并不重要。人们对性能

48
00:02:39,159 --> 00:02:43,159
太过执着，正如约翰•奥斯特霍特

49
00:02:43,163 --> 00:02:46,163
等人指出的那样，最佳的性能改进是

50
00:02:46,166 --> 00:02:49,166
应用程序从非工作状态转为工作状态。

51
00:02:49,169 --> 00:02:53,169
我们已经发明出现代语言，

52
00:02:53,173 --> 00:02:56,173
虽然他们具有一定的性价比，相对于关注血淋淋的方式

53
00:02:56,176 --> 00:02:59,176
方法细节，借助它们大家可以更多关注本质。

54
00:02:59,179 --> 00:03:02,179
实际使用的编程语言并非可扩展性的影响因素，

55
00:03:02,182 --> 00:03:04,182
如果其他人使用更好的语言，比你更快地

56
00:03:04,184 --> 00:03:07,184
运行他们的应用程序，他们就会在客户

57
00:03:07,187 --> 00:03:11,187
方面击败你，对性能来说顶多就是这样。

58
00:03:11,191 --> 00:03:14,191
最后，如应用程序成为瓶颈，其中任一部分都会阻碍可扩展性。

59
00:03:14,194 --> 00:03:17,194
同样，从表面上看这显然是个正确陈述，

60
00:03:17,197 --> 00:03:19,197
不过这并没得到应有的重视。

61
00:03:19,199 --> 00:03:23,199
应用程序运行过慢时，人们立即开始争相改变， 

62
00:03:23,203 --> 00:03:25,203
例如“让我们换个使用语言吧，让我们换个

63
00:03:25,205 --> 00:03:28,205
更快的服务器吧，让我们添加更多的内存吧。”

64
00:03:28,208 --> 00:03:31,208
实际上你要做的是测定应用程序。你可以

65
00:03:31,211 --> 00:03:33,211
测定并确认是应用程序中的哪一部分导致速度降低， 

66
00:03:33,213 --> 00:03:38,213
之后我们讲操作，讲怎样处理开发操作时，

67
00:03:38,218 --> 00:03:40,218
你可以使用工具运行应用程序，然后说，

68
00:03:40,220 --> 00:03:43,220
“我的应用程序运行缓慢的唯一原因是

69
00:03:43,223 --> 00:03:46,223
这五行代码实在有够白痴的，他们是倒着写的， 

70
00:03:46,226 --> 00:03:51,226
我只要改变这五行，问题就迎刃而解了。”关于可扩展性，

71
00:03:51,231 --> 00:03:54,231
应用程序未能扩展可能存在许多原因，

72
00:03:54,234 --> 00:03:56,234
程序未按照你所想的方式运行或未运行你想的方法时，

73
00:03:56,236 --> 00:03:58,236
你要做的第一件事就是理解要打破

74
00:03:58,238 --> 00:04:02,238
究竟是怎么回事。这可以是任何地方。人们想， 

75
00:04:02,242 --> 00:04:06,242
“哦，数据库没法扩展。我的应用程序运行过慢。

76
00:04:06,246 --> 00:04:09,246
所以，问题一定是我遭遇了数据库限制，” 

77
00:04:09,249 --> 00:04:12,249
这不一定对。我们之后会讲到关键跟踪器，使用该工具你可以

78
00:04:12,252 --> 00:04:15,252
在网络与其他东西上保存应用程序的内容。

79
00:04:15,255 --> 00:04:18,255
整个世界的关键跟踪器都在附简单数据库

80
00:04:18,258 --> 00:04:21,258
的简单服务器上运行。说数据库是个

81
00:04:21,261 --> 00:04:24,261
问题的多数人在这各行业内的时间还不够久。

82
00:04:24,264 --> 00:04:27,264
查看可扩展性瓶颈，有时这比解决问题

83
00:04:27,267 --> 00:04:30,267
要简单多了。这个问题我们就处理完了。


