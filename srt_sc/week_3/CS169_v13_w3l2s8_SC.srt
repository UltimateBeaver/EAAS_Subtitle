1
00:00:00,000 --> 00:00:03,000
如果你嵌入直接作为模型动作的代码，会出现什么情况？

2
00:00:03,003 --> 00:00:07,003
借助我这里提到的活动记录，你基本上可以

3
00:00:07,007 --> 00:00:10,007
操作模型而无需明确命名数据库。

4
00:00:10,010 --> 00:00:13,010
在Rails随附的活动记录模块内隐藏有数据库工具。

5
00:00:13,013 --> 00:00:16,013
对此有个问题需要你考虑，

6
00:00:16,016 --> 00:00:20,016
如果你尝试在视图内操作，会发生什么呢？

7
00:00:20,020 --> 00:00:24,020
这会起作用吗，不过坏的格式会让你手忙脚乱吧，

8
00:00:24,024 --> 00:00:27,024
在你使用小型数据库开发时，这会起作用吗，

9
00:00:27,027 --> 00:00:30,027
不过肯定不会在生产环境中起效，

10
00:00:30,030 --> 00:00:33,030
如果它不起作用呢，由于视图没有直接与MVC内的模型通信，

11
00:00:33,033 --> 00:00:36,033
它只得经过控制器，又或者在它直接操纵

12
00:00:36,036 --> 00:00:39,036
视图的模型时，取决于应用程序尝试完成的任务，

13
00:00:39,039 --> 00:00:43,039
它会有所变化吗？

14
00:00:43,043 --> 00:00:49,043
大家先想一会儿，我喝口水。……第一轮投票

15
00:00:49,049 --> 00:00:55,049
显示大家偏向选择橙色项，不过也有选蓝色和绿色选项的。

16
00:00:55,055 --> 00:00:58,055
那么，选项一三四都有人选。

17
00:00:58,058 --> 00:01:01,058
我没看到有选绿色项的，那你们再商量商量

18
00:01:01,061 --> 00:01:07,061
这个选项吧……好啦，我宣布第二轮投票开始。让我们来投票吧。

19
00:01:07,067 --> 00:01:16,067
……支持橙色的人数见涨呀。

20
00:01:16,076 --> 00:01:18,076
这就证明我没想过这是个完全不同的

21
00:01:18,078 --> 00:01:23,078
随机顺序，二、三、四、一。使用小型数据库而非生产环境进行

22
00:01:23,083 --> 00:01:27,083
开发时，它会发挥效用。不对，不一定。

23
00:01:27,087 --> 00:01:29,087
你有很多操作可以做，

24
00:01:29,089 --> 00:01:33,089
这对你的生产数据库而言很不利，不过其中有些操作

25
00:01:33,093 --> 00:01:35,093
和这没半点关系。所以在这个例子中这实际上

26
00:01:35,095 --> 00:01:39,095
无关乎小型与实际数据库间的区分问题。

27
00:01:39,099 --> 00:01:41,099
实现这一点的另一方法是，无论是开发

28
00:01:41,101 --> 00:01:44,101
还是生产这始终是个坏主意。它不会起作用，因为

29
00:01:44,104 --> 00:01:47,104
视图无法与模型直接通信。记住，无论何时选择架构，

30
00:01:47,107 --> 00:01:49,107
你使用的结构如此严苛以至于完全

31
00:01:49,109 --> 00:01:52,109
没有办法脱离架构选项， 

32
00:01:52,112 --> 00:01:56,112
这种情况非常罕见。你总能践行你的坏习惯。

33
00:01:56,116 --> 00:02:01,116
所以模型视图控制器规定，在适当构建的MVC

34
00:02:01,121 --> 00:02:05,121
应用程序内，应该是视图不直接

35
00:02:05,125 --> 00:02:07,125
与模型通信，不过

36
00:02:07,127 --> 00:02:11,127
不存在任何结构明确阻止你去尝试一番。

37
00:02:11,131 --> 00:02:14,131
只不过你终将自食恶果。行为变化取决于应用程序。

38
00:02:14,134 --> 00:02:16,134
不对，它不会视应用程序而定进行变化。

39
00:02:16,136 --> 00:02:19,136
这一直是个糟糕想法。这会起作用，

40
00:02:19,139 --> 00:02:23,139
你可以这么做，事实上你可以辩解说许多PHP应用程序都是这么干的。

41
00:02:23,143 --> 00:02:26,143
不过这是个糟糕的格式。它违反了指导规则，

42
00:02:26,146 --> 00:02:29,146
它的作用本该是让你思考为什么你会像这样把代码放入视图内。

43
00:02:29,149 --> 00:02:32,149
视图查阅的对象是什么，竟会这么重要，

44
00:02:32,152 --> 00:02:34,152
以至于需要直接与模型通信？

45
00:02:34,154 --> 00:02:36,154
如果它真那么重要，为什么那个代码还算不上是

46
00:02:36,156 --> 00:02:39,156
模型的一部分呢？所以这种事你该问问你自己。

47
00:02:39,159 --> 00:02:41,159
我们偶然学到的另一个指导规则非常

48
00:02:41,161 --> 00:02:43,161
相似，那就是如果你在编写控制器动作，

49
00:02:43,163 --> 00:02:47,163
控制器动作会做什么？它们会处理

50
00:02:47,167 --> 00:02:50,167
用户发来的什么东西。它们会对模型说

51
00:02:50,170 --> 00:02:52,170
“嗨，这是我需要的东西，”然后它们通常通过 

52
00:02:52,172 --> 00:02:55,172
某类视图提供数据，借此确保数据可用。

53
00:02:55,175 --> 00:02:58,175
这就是它们所做的全部。这并不是复杂的工作说明。

54
00:02:58,178 --> 00:03:00,178
所以如果你编写控制方法，不只五行或十行那么长，

55
00:03:00,000 --> 00:03:03,180
就会出现问题。代码倾向于

56
00:03:03,183 --> 00:03:07,183
蔓延到它不该去的地方。

57
00:03:07,187 --> 00:03:09,187
计算有趣内容与处理数据的部位就是

58
00:03:09,189 --> 00:03:12,189
模型部位。所以如果你发现自己正在处理

59
00:03:12,192 --> 00:03:15,192
像是控制器内或视图内的内容，

60
00:03:15,195 --> 00:03:18,195
就应该反省问问为什么我之前没把这个

61
00:03:18,198 --> 00:03:21,198
放进模型里，为什么它现在会在这儿？


