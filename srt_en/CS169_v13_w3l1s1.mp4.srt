00:00:00,000 --> 00:00:05,000
Last time we started our high level introduction to the Ruby 

2
00:00:05,005 --> 00:00:08,005
language and some of the cooler things about it that you might 

3
00:00:08,008 --> 00:00:09,008
have been unfamiliar with if you're coming from a language like 

4
00:00:09,009 --> 00:00:14,009
Java. We briefly saw one of the interesting things about Ruby is 

5
00:00:14,014 --> 00:00:16,014
how you can handle iterating through elements of a collection. I 

6
00:00:16,016 --> 00:00:19,016
want to spend a little more time on that because the iterators 

7
00:00:19,019 --> 00:00:22,019
we saw using each and when I mentioned that you actually 

8
00:00:22,022 --> 00:00:25,022
shouldn't be doing iteration in an imperative four loop kind of 

9
00:00:25,025 --> 00:00:27,025
style, but you should be letting the data structures manage 

10
00:00:27,027 --> 00:00:31,027
their own traversal that's really just one example of a much 

11
00:00:31,031 --> 00:00:33,031
more general mechanism in Ruby called, yield, which is what 

12
00:00:33,033 --> 00:00:37,033
we're going to talk about next. I'm going to start by looking at 

13
00:00:37,037 --> 00:00:40,037
the way that iterators are typically handled in imperative 

14
00:00:40,040 --> 00:00:43,040
languages like Java. If you've seen this kind of Java code 

15
00:00:43,043 --> 00:00:45,043
before, typically, you have some kind of collection. In this 

16
00:00:45,045 --> 00:00:49,045
case a list and if you want to iterate over the collection, you 

17
00:00:49,049 --> 00:00:52,049
hope that it implements the interface for iteration and you have 

18
00:00:52,052 --> 00:00:55,052
to setup a new iterator you periodically ask the iterator if 

19
00:00:55,055 --> 00:00:59,055
there's any more elements in the collection. If so, you ask it 

20
00:00:59,059 --> 00:01:01,059
give you the next element and then you do some stuff with that 

21
00:01:01,061 --> 00:01:04,061
element. The reason I'm calling this inelegant is that it mixes 

22
00:01:04,064 --> 00:01:08,064
up two things. In red, there's code that is concerned with doing 

23
00:01:08,068 --> 00:01:13,068
stuff with elements of the list. In blue, is stuff that's really 

24
00:01:13,073 --> 00:01:15,073
just the mechanics of getting those elements out. It would be 

25
00:01:15,075 --> 00:01:18,075
nice if those things could be better separated. For those of you 

26
00:01:18,078 --> 00:01:20,078
who are Berkeley students and took 61A when it was still taught 

27
00:01:20,080 --> 00:01:24,080
in Scheme, one of my personal favorite languages, you actually 

28
00:01:24,084 --> 00:01:27,084
have already seen this mechanism. If you remember things like 

29
00:01:27,087 --> 00:01:30,087
map and filter, the idea is that you would say, “ map,” you 

30
00:01:30,090 --> 00:01:32,090
would give it a function and you would give it a list. In 

31
00:01:32,092 --> 00:01:34,092
Scheme, a list is the only type, so you don't have to worry 

32
00:01:34,094 --> 00:01:38,094
about what types of things are able to be mapped because the 

33
00:01:38,098 --> 00:01:42,098
list was your only choice. In Ruby, this more or less becomes 

34
00:01:42,102 --> 00:01:45,102
the same thing. Remember that the braces can be used in some 

35
00:01:45,105 --> 00:01:48,105
cases as substitute for the do and end that would go around a 

36
00:01:48,108 --> 00:01:52,108
block. Map takes a block of one argument and it just applies the 

37
00:01:52,112 --> 00:01:55,112
block to each element in the collection. If you remember filter 

38
00:01:55,115 --> 00:01:58,115
from the days of Scheme. We have select which does pretty much 

39
00:01:58,118 --> 00:02:00,118
the same thing in Ruby. This time I've actually written it out 

40
00:02:00,000 --> 00:02:03,120
using " do" and " end" instead of the brackets. In fact, you can 

41
00:02:03,123 --> 00:02:07,123
combine things. I can take a map of a lambda expression that 

42
00:02:07,127 --> 00:02:11,127
operates over a filter and similarly in Ruby. I can take a list. 

43
00:02:11,131 --> 00:02:14,131
I can call select to filter out some elements of it. That will 

44
00:02:14,134 --> 00:02:16,134
return a new copy of the list containing only the filtered 

45
00:02:16,136 --> 00:02:20,136
elements and then I can call a map on the result of that. This 

46
00:02:20,140 --> 00:02:24,140
is one of the ways that Ruby inherits spiritually from 

47
00:02:24,144 --> 00:02:28,144
functional languages of which Scheme is an example. I think of 

48
00:02:28,148 --> 00:02:31,148
it as turning iterators inside out compared to what you would do 

49
00:02:31,151 --> 00:02:34,151
in a language like C+ plus or Java. Java you say, you hand me 

50
00:02:34,154 --> 00:02:37,154
every element of the collection, I'll do some of the element and 

51
00:02:37,157 --> 00:02:39,157
then I'll ask you if there's any more elements left. Whereas in 

52
00:02:39,159 --> 00:02:41,159
Ruby you go the other way around, you say, “ Here's the thing 

53
00:02:41,161 --> 00:02:44,161
that I want to do to each element of the collection.” You, the 

54
00:02:44,164 --> 00:02:48,164
data structure, you go ahead and manage the collection so that 

55
00:02:48,168 --> 00:02:51,168
you can give me each element as needed and I'm not worried about 

56
00:02:51,171 --> 00:02:55,171
that part. Let's do a real example of this to show how it would 

57
00:02:55,175 --> 00:03:02,175
work. Here, I've defined. What I said before, was in Ruby, the 

58
00:03:02,182 --> 00:03:05,182
only thing we care about is what methods do you respond to? 

59
00:03:05,185 --> 00:03:09,185
Here, I'm creating a class called, random sequence. What this 

60
00:03:09,189 --> 00:03:12,189
class is going to do is give me back an object that will 

61
00:03:12,192 --> 00:03:16,192
generate a list of random numbers between one and some limit and 

62
00:03:16,196 --> 00:03:22,196
it will generate up to num numbers in that list. For example. I 

63
00:03:22,202 --> 00:03:26,202
can call it with “ 10,4,” meaning I want a new sequence of four 

64
00:03:26,206 --> 00:03:30,206
random numbers between 1 and 10. How does this actually work? 

65
00:03:30,210 --> 00:03:34,210
First of all, I'm going to prove to you that it does work by 

66
00:03:34,214 --> 00:03:38,214
just pasting this into a Ruby Interpreter window. Of course, I 

67
00:03:38,218 --> 00:03:46,218
have to actually start the Ruby Interpreter, and now I can grab, 

68
00:03:46,226 --> 00:03:51,226
here's just a little chunk of code that … There we go. This 

69
00:03:51,231 --> 00:03:53,231
little chunk of code actually created a new random sequence 

70
00:03:53,233 --> 00:03:56,233
object and it called each on it. Remember, we said, as long as 

71
00:03:56,236 --> 00:04:00,236
it responds to each. Each is a promise that I can manage a 

72
00:04:00,000 --> 00:04:04,240
traversal of my own data structure. In this case, we generated a 

73
00:04:04,244 --> 00:04:07,244
new random sequence object and we returned each element one at a 

74
00:04:07,247 --> 00:04:10,247
time. What is that actually mean? How’ d we do that? Look at our 

75
00:04:10,250 --> 00:04:14,250
definition of each. We already saw it times before. It just 

76
00:04:14,254 --> 00:04:17,254
says, “ Repeat this block some number of times.” However may 

77
00:04:17,257 --> 00:04:21,257
that second argument was and what's going on in the block? This 

78
00:04:21,261 --> 00:04:23,261
is the first exposure many of you have had to this. This is 

79
00:04:23,263 --> 00:04:27,263
yield. Yield says, “ Transfer control back to the thing that 

80
00:04:27,267 --> 00:04:31,267
called me because it has a block waiting for me.” Down here, 

81
00:04:31,271 --> 00:04:34,271
when we called random sequence and the argument to each is this 

82
00:04:34,274 --> 00:04:38,274
block right here. This block is what's going to get called with 

83
00:04:38,278 --> 00:04:42,278
the argument of Yield. You can see Yield is yielding one value 

84
00:04:42,282 --> 00:04:45,282
and this block is setup to take one value. It's one value 

85
00:04:45,285 --> 00:04:49,285
between the vertical bars. What happens is each is actually 

86
00:04:49,289 --> 00:04:53,289
called and each time we hit yield, yield essentially transfers 

87
00:04:53,293 --> 00:04:57,293
control back to this point. This is turning the iterator inside 

88
00:04:57,297 --> 00:05:01,297
out. All we had to do was define some way that each would be 

89
00:05:01,301 --> 00:05:04,301
able to use yield to give back objects one at a time. It is a 

90
00:05:04,304 --> 00:05:11,304
pretty nifty construct. Iterators are actually just one nifty 

91
00:05:11,311 --> 00:05:14,311
use of Yield that it used to we've already seen and that's why I 

92
00:05:14,314 --> 00:05:16,314
wanted to start with them. Let me show another interesting thing 

93
00:05:16,316 --> 00:05:19,316
you can do. This is when you start to see how Yield can help you 

94
00:05:19,319 --> 00:05:22,319
clean up and dry out your code a lot better. On the left is a 

95
00:05:22,322 --> 00:05:24,322
very typical idiom and languages that provide a way to 

96
00:05:24,324 --> 00:05:27,324
manipulate files. There's a library called to open a file. 

97
00:05:27,327 --> 00:05:30,327
There's a library called to close the file. Typically what you 

98
00:05:30,330 --> 00:05:33,330
have to do is you call, file open. You do some stuff on the file 

99
00:05:33,333 --> 00:05:36,333
and then you close the file. That's probably the way that you're 

100
00:05:36,336 --> 00:05:38,336
used to thinking about things but we don't believe in doing 

101
00:05:38,338 --> 00:05:40,338
things just because we've always done in that way. What would be 

102
00:05:40,340 --> 00:05:43,340
a more Rubyistic way to do this? It would be to realize that the 

103
00:05:43,343 --> 00:05:47,343
pattern of open a file, do some stuff and close a file is a very 

104
00:05:47,347 --> 00:05:50,347
common pattern. The open and close parts are the same for 

105
00:05:50,350 --> 00:05:52,350
everybody. The only part that's different is what happens in 

106
00:05:52,352 --> 00:05:55,352
between the two. We can actually use yield to extract them and 

107
00:05:55,355 --> 00:05:59,355
this is actually how Ruby's file call works. Instead, we define 

108
00:05:59,359 --> 00:06:01,359
an open filename method, which does whatever it has to do to 

109
00:06:01,361 --> 00:06:04,361
open the file to get a file descriptor and then it yields that 

110
00:06:04,364 --> 00:06:07,364
file descriptor back to a block. How does that look like when 

111
00:06:07,367 --> 00:06:11,367
you use it? In your code, you could say, “ file open with a 

112
00:06:11,371 --> 00:06:14,371
filename” and then present it was a block. Inside the block, you 

113
00:06:14,374 --> 00:06:17,374
can do stuff with the file. What's going to happen here? I'm 

114
00:06:17,377 --> 00:06:20,377
going to call file open. That's going to transfer control up to 

115
00:06:20,380 --> 00:06:23,380
the open call. The open call will actually open the file. It 

116
00:06:23,383 --> 00:06:26,383
will yield the descriptor back to me. Now I'm here and I can do 

117
00:06:26,386 --> 00:06:30,386
stuff with the file. When my block is over, where am I? I'm back 

118
00:06:30,390 --> 00:06:34,390
in this function after the yield. In here, I can close my file 

119
00:06:34,394 --> 00:06:36,394
and do any other clean up. I've extracted out the common parts 

120
00:06:36,396 --> 00:06:39,396
and I've essentially used, yield to put something around as 

121
00:06:39,399 --> 00:06:41,399
opposed to having two separate function calls. I've exposed one 

122
00:06:41,401 --> 00:06:46,401
call instead of two. Blocks are closures. This is another 

123
00:06:46,406 --> 00:06:49,406
concept, although it's taught in 61A and in Scheme, it's not 

124
00:06:49,409 --> 00:06:52,409
present or at least not present in an obvious way in a lot of 

125
00:06:52,412 --> 00:06:55,412
modern language. A closure is basically the set of all the 

126
00:06:55,415 --> 00:06:58,415
variable bindings, all the variables with their values that you 

127
00:06:58,418 --> 00:07:01,418
can see at a given point in time. If you remember in 61A, they 

128
00:07:01,421 --> 00:07:04,421
called this an environment and you drew diagrams about them. 

129
00:07:04,424 --> 00:07:07,424
That's what this is. What does this mean in terms of yield and 

130
00:07:07,427 --> 00:07:10,427
why do we care about it? If we go back to our random sequence 

131
00:07:10,430 --> 00:07:13,430
example and what was happening here, when we call random 

132
00:07:13,433 --> 00:07:16,433
sequence new and then recall each on it, what's this variable, “ 

133
00:07:16,436 --> 00:07:22,436
i?” This is just a random local variable. Here it is, “ i” as in 

134
00:07:22,442 --> 00:07:25,442
scope, but remember what the flow of control is. We're going to 

135
00:07:25,445 --> 00:07:29,445
call, each. Now we're in this function. Each calls numtimes. The 

136
00:07:29,449 --> 00:07:33,449
first time we hit yield, we're back down here. If you think 

137
00:07:33,453 --> 00:07:37,453
about where in time is this block getting executed? It's getting 

138
00:07:37,457 --> 00:07:40,457
executed at the time that yield is called, but despite that 

139
00:07:40,460 --> 00:07:44,460
fact, it has access to the variable, “ i” which was in scope at 

140
00:07:44,464 --> 00:07:47,464
the place where the block was defined. This is actually a pretty 

141
00:07:47,467 --> 00:07:50,467
deep concept. It means that when you create a do block, all of 

142
00:07:50,470 --> 00:07:53,470
the variables visible inside that do block are going to be 

143
00:07:53,473 --> 00:07:56,473
visible and have those values, even if the block is being 

144
00:07:56,476 --> 00:07:59,476
executed at a place in time far away from where you defined it, 

145
00:07:59,479 --> 00:08:02,479
and a place later in the course or in the case of the online 

146
00:08:02,482 --> 00:08:05,482
courses in part two where we're going to see this again is in 

147
00:08:05,485 --> 00:08:08,485
JavaScript. JavaScript makes extensive use of closures, and it's 

148
00:08:08,488 --> 00:08:11,488
one of the reasons the beginners in JavaScript tend to write 

149
00:08:11,491 --> 00:08:13,491
horrible, horrible code because they don't understand this very 

150
00:08:13,493 --> 00:08:16,493
powerful concept that you can define a procedural environment 

151
00:08:16,496 --> 00:08:19,496
that always carries its variables around with it. 


