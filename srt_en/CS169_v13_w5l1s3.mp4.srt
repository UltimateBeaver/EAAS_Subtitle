1
00:00:00,000 --> 00:00:03,000
So, we're partway there. We said we need two actions to take 

2
00:00:03,003 --> 00:00:06,003
care of dealing with forms. We need to serve the form itself. We 

3
00:00:06,006 --> 00:00:09,006
saw how to do that. We also need to get the results when the 

4
00:00:09,009 --> 00:00:11,009
user submits the form, having filled it in, and so that's what 

5
00:00:11,011 --> 00:00:15,011
we're going to talk about next. When we receive the form, let's 

6
00:00:15,015 --> 00:00:18,015
actually take time to kill two birds with one stone here. We're 

7
00:00:18,018 --> 00:00:21,018
going to use the debugger to inspect what's coming from the 

8
00:00:21,021 --> 00:00:23,021
user. So, I'm going to go into a browser now, and I'm going to 

9
00:00:23,023 --> 00:00:26,023
bring up that form that we just saw. I'm going to fill it in 

10
00:00:26,026 --> 00:00:29,026
myself. I'm going to submit it, and then we're going to pause 

11
00:00:29,029 --> 00:00:32,029
right in the action that receives the form submission and see 

12
00:00:32,032 --> 00:00:44,032
what's going on there. Okay, so, here is- I'm going to start my 

13
00:00:44,044 --> 00:00:54,044
Rails server with debugging turned on. I've got my Rotten 

14
00:00:54,054 --> 00:01:02,054
Potatoes homepage, and I'm going to add a new movie. That was a 

15
00:01:02,062 --> 00:01:04,062
great movie, by the way. Now, before I click " save changes," 

16
00:01:04,064 --> 00:01:07,064
which is actually going to submit the form, I want you to notice 

17
00:01:07,067 --> 00:01:10,067
that, over here in the movies controller, I have stuck in the 

18
00:01:10,070 --> 00:01:13,070
line " debugger," and it's in the create action. The create 

19
00:01:13,073 --> 00:01:16,073
action is going to be the one that receives the form submission, 

20
00:01:16,076 --> 00:01:20,076
because we already saw, based on Rake Routes, we can tell where 

21
00:01:20,080 --> 00:01:23,080
this form is going to go. Let's scroll down and find it here. 

22
00:01:23,083 --> 00:01:25,083
Here's the form. There's a bunch of other stuff that you don't 

23
00:01:25,085 --> 00:01:28,085
need to worry about just yet, but here's the important part, 

24
00:01:28,088 --> 00:01:32,088
right? We're going to the URI, movies with a post method, and 

25
00:01:32,092 --> 00:01:37,092
Rake Routes would tell us that where that's going is this create 

26
00:01:37,097 --> 00:01:40,097
action right here. So, let's actually see what happens when we 

27
00:01:40,100 --> 00:01:45,100
push the button. And, although nothing happens over in my web 

28
00:01:45,105 --> 00:01:48,105
browser, in my terminal window, you can see that we've dropped 

29
00:01:48,108 --> 00:01:50,108
into the debugger. So, if you've used any interactive debugger 

30
00:01:50,110 --> 00:01:53,110
before, that's kind of where we are. What I really want to take 

31
00:01:53,113 --> 00:01:57,113
a look at is, what's going with this params hash, right? Params 

32
00:01:57,117 --> 00:02:00,117
is how any parameter is either entered by the user or passed in 

33
00:02:00,000 --> 00:02:04,120
the URI are getting captured, and we can see the value of that 

34
00:02:04,124 --> 00:02:06,124
hash here. Later in the course, we'll talk about this 

35
00:02:06,126 --> 00:02:08,126
authenticity token. It's a way to prevent certain malicious 

36
00:02:08,128 --> 00:02:11,128
attacks on your website. But what we're really interested in 

37
00:02:11,131 --> 00:02:16,131
here is the value of params[:movie]. Now remember I mentioned, 

38
00:02:16,136 --> 00:02:19,136
why would you want to name your form elements with things like " 

39
00:02:19,139 --> 00:02:24,139
movie[:title]," " movie[:rating]," and so forth? The 

40
00:02:24,144 --> 00:02:28,144
reason is that, if you do that, the value of params[:movie] is 

41
00:02:28,148 --> 00:02:32,148
itself a hash. Does that make sense? Because we're actually 

42
00:02:32,152 --> 00:02:35,152
gathering together all of the form elements whose names begin 

43
00:02:35,155 --> 00:02:40,155
with params[: movie]. The reason it's useful for it to be a hash 

44
00:02:40,160 --> 00:02:42,160
is because, you remember, back when we talked about using active 

45
00:02:42,162 --> 00:02:46,162
record to create, one way of calling the create action is to 

46
00:02:46,166 --> 00:02:48,166
pass it a hash of the attributes of the thing you want to 

47
00:02:48,168 --> 00:02:51,168
create. And lo and behold, what is params[: movie]? It is 

48
00:02:51,171 --> 00:02:54,171
exactly a hash of movie attributes for a movie that we want to 

49
00:02:54,174 --> 00:02:58,174
create. So, this is why the Rails views work the way they do. 

50
00:02:58,178 --> 00:03:01,178
Those form- tag helpers that we use, so that we wouldn't have to 

51
00:03:01,181 --> 00:03:04,181
generate each element manually, by default, they will generate 

52
00:03:04,184 --> 00:03:06,184
nicely named form elements, so that when they arrive in your 

53
00:03:06,186 --> 00:03:09,186
controller method, you already are ready to essentially hand it 

54
00:03:09,189 --> 00:03:13,189
right off to the create action. So, here's where we are in the 

55
00:03:13,193 --> 00:03:18,193
code. As soon as I continue, we're going to fall off the end of 

56
00:03:18,198 --> 00:03:20,198
this method, and that's going to leave us with a little bit of a 

57
00:03:20,200 --> 00:03:23,200
dilemma, because remember that every controller action 

58
00:03:23,203 --> 00:03:25,203
ultimately has to render something, and by convention over 

59
00:03:25,205 --> 00:03:28,205
configuration, since we haven't said otherwise, it's going to 

60
00:03:28,208 --> 00:03:32,208
look for a view template called create. html. haml, and we 

61
00:03:32,212 --> 00:03:35,212
don't have one. There's nowhere for this action to go. So, I'm 

62
00:03:35,215 --> 00:03:37,215
going to keep you in suspense, and I'm not going to continue the 

63
00:03:37,217 --> 00:03:44,217
debugger just yet. But don't worry. We will come back to your 

64
00:03:44,224 --> 00:03:47,224
debugger friends soon enough. The important thing to notice 

65
00:03:47,227 --> 00:03:49,227
there is that params[:movie] is already a hash because of the 

66
00:03:49,229 --> 00:03:52,229
way we named the form field. Conveniently, that's exactly what 

67
00:03:52,232 --> 00:03:57,232
Movie.create! wants to consume. So, now back to this question 

68
00:03:57,237 --> 00:03:59,237
of, what happens when we fall off the end of the controller 

69
00:03:59,239 --> 00:04:02,239
method? We're expected to render a view. So, let's think about 

70
00:04:02,242 --> 00:04:07,242
it from the point of view of the user. If you're about to get 

71
00:04:07,247 --> 00:04:08,247
information about a movie, well, it's pretty clear what we 

72
00:04:08,248 --> 00:04:10,248
should be rendering there, right? It's the actual information 

73
00:04:10,250 --> 00:04:14,250
you asked for. But if you're trying to create a new movie, 

74
00:04:14,254 --> 00:04:16,254
what's the appropriate thing that we should render to show you 

75
00:04:16,256 --> 00:04:19,256
the result of what you did? We could probably show you a page 

76
00:04:19,259 --> 00:04:21,259
that said, " Thanks for creating a new movie," and then you'd 

77
00:04:21,261 --> 00:04:24,261
have to click to go somewhere else, or, given that that's mostly 

78
00:04:24,264 --> 00:04:28,264
useless, you could just say, once it succeeds, we'll actually 

79
00:04:28,268 --> 00:04:31,268
redirect the user to a more useful page. In other words, we'll 

80
00:04:31,271 --> 00:04:33,271
finish the http request, we'll create the movie, but we'll 

81
00:04:33,273 --> 00:04:36,273
immediately take you to another page that's actually useful and 

82
00:04:36,276 --> 00:04:39,276
represents a reasonable user experience. A very common choice 

83
00:04:39,279 --> 00:04:42,279
is, if I was looking at the list of movies, I create a new 

84
00:04:42,282 --> 00:04:44,282
movie. On success, I'll go back to the list of movies, and look, 

85
00:04:44,284 --> 00:04:47,284
I can see the movie that I just created. So, that's the way that 

86
00:04:47,287 --> 00:04:52,287
we're going to do it. To keep in mind here, we said before that 

87
00:04:52,292 --> 00:04:55,292
http is a stateless protocol. Every request is independent. I've 

88
00:04:55,295 --> 00:04:58,295
just told you that we could redirect the user. Well, that's 

89
00:04:58,298 --> 00:05:00,298
going to trigger a whole new http request, and that leaves us 

90
00:05:00,000 --> 00:05:03,300
with a dilemma, because we would like to tell the user something 

91
00:05:03,303 --> 00:05:05,303
like, " Movie creation was successful." We want to give them 

92
00:05:05,305 --> 00:05:09,305
some feedback about what happened. If there's a whole new http 

93
00:05:09,309 --> 00:05:12,309
request, that means, by definition, we're not carrying over 

94
00:05:12,312 --> 00:05:15,312
instance variables from the previous one. So, how do we remember 

95
00:05:15,315 --> 00:05:18,315
the fact that we need to tell the user something? Of course, 

96
00:05:18,318 --> 00:05:21,318
because this is a common problem in SaaS applications, Rails has 

97
00:05:21,321 --> 00:05:24,321
a way to do it. It's called the flash. It quacks like a hash. 

98
00:05:24,324 --> 00:05:27,324
That means that you can expect it to do all the things that a 

99
00:05:27,327 --> 00:05:30,327
normal hash would do. But, it's special in that it will persist 

100
00:05:30,330 --> 00:05:33,330
until the end of the next request, as opposed to just the end of 

101
00:05:33,333 --> 00:05:36,333
this one. So, if I finish this request, before I'm done, I put 

102
00:05:36,336 --> 00:05:40,336
something into the flash. On the very next request, I can look 

103
00:05:40,340 --> 00:05:42,340
into the flash and grab out that piece of information, and it 

104
00:05:42,342 --> 00:05:44,342
will automatically be cleared out for me after that. By 

105
00:05:44,344 --> 00:05:48,344
convention, typically we use flash[:notice] for information and 

106
00:05:48,348 --> 00:05:50,348
flash[:warning] for error messages, but that's purely a 

107
00:05:50,350 --> 00:05:56,350
convention. So, putting those pieces together, what we probably 

108
00:05:56,356 --> 00:06:00,356
want to put in here is something like this. Notice that I'm 

109
00:06:00,000 --> 00:06:03,360
using the dangerous version of create. I'm kind of crossing my 

110
00:06:03,363 --> 00:06:05,363
fingers and hoping nothing goes wrong. That's fine for a lecture 

111
00:06:05,365 --> 00:06:08,365
example, not so fine for your applications. This is fine for 

112
00:06:08,368 --> 00:06:10,368
development. Don't use this in real life. But I'm going to 

113
00:06:10,370 --> 00:06:13,370
populate this with a nice little message, and then I'll have to 

114
00:06:13,373 --> 00:06:18,373
redirect somewhere. Where can I redirect to? Well, redirect is a 

115
00:06:18,378 --> 00:06:21,378
whole new action, right? So, let's just send the user back to 

116
00:06:21,381 --> 00:06:26,381
the page that shows the list of all movies. That's easy enough, 

117
00:06:26,386 --> 00:06:30,386
and I have a URI helper that I can use for that. Okay, now I'm 

118
00:06:30,390 --> 00:06:35,390
going to continue, and am I going to get an error message? Why, 

119
00:06:35,395 --> 00:06:39,395
yes, because by the time I made the change to my app, we had 

120
00:06:39,399 --> 00:06:41,399
already fallen into that method with the debugger. But rest 

121
00:06:41,401 --> 00:06:43,401
assured that if we repeat this- by the way, this is just the 

122
00:06:43,403 --> 00:06:47,403
error we expect, right? By default, create was going to fall off 

123
00:06:47,407 --> 00:06:48,407
the end of the create action, and it was going to look for a 

124
00:06:48,408 --> 00:06:51,408
template called create, and sure enough, it looked everywhere it 

125
00:06:51,411 --> 00:06:53,411
could think of, including under the couch, and it couldn't find 

126
00:06:53,413 --> 00:06:56,413
it, so we got a compliant. But rest assured that if we were to 

127
00:06:56,416 --> 00:07:06,416
do this again- add a new movie, and I have no idea when this 

128
00:07:06,426 --> 00:07:12,426
movie was released. We're still in the debugger. There. But this 

129
00:07:12,432 --> 00:07:17,432
time, no error message, because we added- what did we add? We 

130
00:07:17,437 --> 00:07:20,437
added this flash message, which my template is set to print out, 

131
00:07:20,440 --> 00:07:23,440
and we added a redirect that took us back to the list of movies. 

132
00:07:23,443 --> 00:07:26,443
This is a pretty standard idiom. When you're doing an operation 

133
00:07:26,446 --> 00:07:29,446
that results in changing the database, instead of just 

134
00:07:29,449 --> 00:07:31,449
displaying a passive page whose only purpose in life's to say, " 

135
00:07:31,451 --> 00:07:35,451
Your change succeeded". we usually acknowledge with a message, 

136
00:07:35,455 --> 00:07:37,455
like in the flash, and then send the user back to a page that's 

137
00:07:37,457 --> 00:07:43,457
otherwise more useful. So, we talked about the flash. The flash 

138
00:07:43,463 --> 00:07:47,463
is really a special case of a more general mechanism. In this 

139
00:07:47,467 --> 00:07:50,467
case, the session mechanism, think of it as a hash that persists 

140
00:07:50,470 --> 00:07:52,470
more or less forever. Now, there's a lot of qualifiers around " 

141
00:07:52,472 --> 00:07:54,472
forever," but basically, if I put something in the session for 

142
00:07:54,474 --> 00:07:57,474
this user, I can expect to get it out of the session for this 

143
00:07:57,477 --> 00:08:00,477
user during the entire time that they're continuously 

144
00:08:00,000 --> 00:08:03,480
interacting with my app. I can reset sessions and nuke the whole 

145
00:08:03,483 --> 00:08:06,483
thing. I can delete specific things out of the session that I 

146
00:08:06,486 --> 00:08:10,486
put there, and by default, cookies store the entire contents of 

147
00:08:10,490 --> 00:08:12,490
the session and the flash. Now, this is an important thing to 

148
00:08:12,492 --> 00:08:15,492
realize, because there's actually limits on how large a cookie 

149
00:08:15,495 --> 00:08:17,495
is allowed to be, right? Remember, a cookie, this is part of the 

150
00:08:17,497 --> 00:08:20,497
http protocol spec. So, if a cookie is only allowed to be a 

151
00:08:20,500 --> 00:08:24,500
certain number of characters long, and the session is just like 

152
00:08:24,504 --> 00:08:26,504
any other Ruby hash, you can put things of arbitrary size in 

153
00:08:26,506 --> 00:08:29,506
there. You could see where this is an accident about to happen, 

154
00:08:29,509 --> 00:08:31,509
right? I keep saying that all these frameworks try to give you 

155
00:08:31,511 --> 00:08:34,511
abstractions to help you out, but that those abstractions are 

156
00:08:34,514 --> 00:08:37,514
leaky. They are not perfect, and this is another example of 

157
00:08:37,517 --> 00:08:39,517
where the abstraction leaks. The session quacks like a 

158
00:08:39,519 --> 00:08:42,519
persistent hash that's available forever, but if you put 

159
00:08:42,522 --> 00:08:45,522
something in the session that's way too big to deserialize, 

160
00:08:45,525 --> 00:08:48,525
there might be a problem if it overflows the size of the cookie. 

161
00:08:48,528 --> 00:08:50,528
Now, you could be storing your sessions in the database. There's 

162
00:08:50,530 --> 00:08:53,530
a way to do that. If you've forgotten how to use the Google, you 

163
00:08:53,533 --> 00:08:56,533
take the important words out of the sentence and type them into 

164
00:08:56,536 --> 00:09:00,536
Google. Some people with really, really big systems, there's so 

165
00:09:00,000 --> 00:09:02,540
many sessions that they use a NoSQL system, like Memcached, to 

166
00:09:02,542 --> 00:09:06,542
store the sessions. But really, the thing to ask yourself is, 

167
00:09:06,546 --> 00:09:09,546
why are you putting complicated things in the session at all? If 

168
00:09:09,549 --> 00:09:11,549
you're putting things in the session that are more than object 

169
00:09:11,551 --> 00:09:14,551
IDs, you need to ask yourself what it is that's not restful 

170
00:09:14,554 --> 00:09:15,554
about your application. Because if you're putting them in the 

171
00:09:15,555 --> 00:09:18,555
session, then that must mean you're somehow relying on that to 

172
00:09:18,558 --> 00:09:21,558
survive from one operation to another, and that might be 

173
00:09:21,561 --> 00:09:24,561
jeopardizing trying to do a restful app. 


