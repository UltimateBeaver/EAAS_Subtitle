1
00:00:00,000 --> 00:00:03,000
Our next topic is to talk about the shared- nothing architecture 

2
00:00:03,003 --> 00:00:07,003
that substantially all internet systems used today and what that 

3
00:00:07,007 --> 00:00:11,007
means for scalability. Going back to our diagram, we started out 

4
00:00:11,011 --> 00:00:14,011
at the top level asking about the connection between clients and 

5
00:00:14,014 --> 00:00:17,014
servers. Now, we're going to go one level deeper and look inside 

6
00:00:17,017 --> 00:00:20,017
the server box to see what it's made up of. As we'll see, 

7
00:00:20,020 --> 00:00:23,020
there's three major building blocks that servers are generally 

8
00:00:23,023 --> 00:00:26,023
composed of these days. There is the presentation tier or front 

9
00:00:26,026 --> 00:00:29,026
end, that's a web server like Apache or Microsoft IIS. There is 

10
00:00:29,029 --> 00:00:32,029
the application server. That's where the action is, it's where 

11
00:00:32,032 --> 00:00:35,032
your application code usually runs. We're going to be using one 

12
00:00:35,035 --> 00:00:39,035
called rack which supports application written in ruby. Then, 

13
00:00:39,039 --> 00:00:42,039
there's a persistence layer or storage layer or tier where data 

14
00:00:42,042 --> 00:00:44,042
that's permanently associated with your application like your 

15
00:00:44,044 --> 00:00:49,044
customer data would get stored, typically like a database. In 

16
00:00:49,049 --> 00:00:52,049
the old days, the web really began as a way for people to 

17
00:00:52,052 --> 00:00:56,052
exchange static documents, graphics and so forth and early web 

18
00:00:56,056 --> 00:00:59,056
servers had a pretty job. All they had to do was accept an 

19
00:00:59,059 --> 00:01:02,059
incoming TCP request, figure out which file to serve and get 

20
00:01:02,062 --> 00:01:06,062
that file back into the browser but very quickly it became the 

21
00:01:06,066 --> 00:01:08,066
case that the more interesting sites were actually more like 

22
00:01:08,068 --> 00:01:11,068
running a program and having the program generate the page you 

23
00:01:11,071 --> 00:01:14,071
saw. If you think about it, this is the case for things like e- 

24
00:01:14,074 --> 00:01:16,074
commerce sites where you visit a page, you search for some 

25
00:01:16,076 --> 00:01:20,076
products and what happens is a program has to get run to find 

26
00:01:20,080 --> 00:01:23,080
all the products matching your search criteria and build the 

27
00:01:23,083 --> 00:01:27,083
page on the fly just for you. Originally, people authored sites 

28
00:01:27,087 --> 00:01:30,087
like this by saying, well, HTML is what the browser consumes but 

29
00:01:30,090 --> 00:01:33,090
what we'll do is we'll find a way to stick a little bit of code 

30
00:01:33,093 --> 00:01:37,093
here and there into the HTML and that code is what's going to 

31
00:01:37,097 --> 00:01:40,097
create the content on the fly. It very quickly became clear that 

32
00:01:40,100 --> 00:01:43,100
the code was the interesting part. The code became the tail that 

33
00:01:43,103 --> 00:01:46,103
wags the dog, it sort of moved out of the web server into its 

34
00:01:46,106 --> 00:01:49,106
own home in the application tier. Now, we're going to look at 

35
00:01:49,109 --> 00:01:52,109
these different pieces and how they work and what are the 

36
00:01:52,112 --> 00:01:56,112
implications for architecture of software as a service. If the 

37
00:01:56,116 --> 00:01:59,116
site is really about running a program rather than about serving 

38
00:01:59,119 --> 00:02:02,119
a static file, well, when you're going to run a program, even if 

39
00:02:02,122 --> 00:02:05,122
it's from the command line, you have to worry about things like 

40
00:02:05,125 --> 00:02:08,125
how do you figure out which program to run so which URI coming 

41
00:02:08,128 --> 00:02:12,128
into the site, how do you map a URI into the right program or 

42
00:02:12,132 --> 00:02:14,132
subprogram, how do you pass arguments to that program? How do 

43
00:02:14,134 --> 00:02:17,134
you get the program to run on the server? What happens if 

44
00:02:17,137 --> 00:02:19,137
there's an error? Who cleans up after the program and provides 

45
00:02:19,139 --> 00:02:23,139
the error messages? All of these tasks have to be handled in 

46
00:02:23,143 --> 00:02:27,143
SaaS apps as well except that instead of running programs from 

47
00:02:27,147 --> 00:02:30,147
the command line or directly through a GUI, we're running them 

48
00:02:30,150 --> 00:02:34,150
as a the response to a request from a web browser. Because all 

49
00:02:34,154 --> 00:02:36,154
of this kind of functionality has to be taken care of no matter 

50
00:02:36,156 --> 00:02:39,156
what language you use and no matter what framework you use, 

51
00:02:39,159 --> 00:02:42,159
frameworks have evolved to support all of these common 

52
00:02:42,162 --> 00:02:45,162
activities so that you don't have to. Really, today, it's more 

53
00:02:45,165 --> 00:02:49,165
like you fill in the codes that's specific to your application 

54
00:02:49,169 --> 00:02:52,169
and all of these other details like mapping URI's to which piece 

55
00:02:52,172 --> 00:02:55,172
of code and how do you pass arguments from maybe stuff that the 

56
00:02:55,175 --> 00:02:58,175
user typed in, how do you pass those tier code, all of those 

57
00:02:58,178 --> 00:03:00,178
things are now taken care of by the framework, it saves a lot of 

58
00:03:00,000 --> 00:03:06,180
work. Now, even within the logical architecture where we said 

59
00:03:06,186 --> 00:03:08,186
that there's these three different tiers, that's just the 

60
00:03:08,188 --> 00:03:11,188
logical diagram. Another question is how do those things map 

61
00:03:11,191 --> 00:03:15,191
onto physical hardware. Now, in the case of the homeworks you're 

62
00:03:15,195 --> 00:03:17,195
doing in this course or when you're doing your own development 

63
00:03:17,197 --> 00:03:21,197
of your own SaaS applications, typically you'll have a single 

64
00:03:21,201 --> 00:03:24,201
machine that's hosting all of the pieces. This gray box here, 

65
00:03:24,204 --> 00:03:27,204
you can think of as your laptop and on that same machine, you're 

66
00:03:27,207 --> 00:03:30,207
running your own web browser which has things. You're running 

67
00:03:30,210 --> 00:03:33,210
some kind of a presentation tier and we're using Webrick which 

68
00:03:33,213 --> 00:03:37,213
is a really simple development web server that ships with rails 

69
00:03:37,217 --> 00:03:41,217
by default. It can only handle one user at a time so not great 

70
00:03:41,221 --> 00:03:43,221
for big sites but it's fine when you're developing your own 

71
00:03:43,223 --> 00:03:47,223
code. In purple, we have the application tier which has an app 

72
00:03:47,227 --> 00:03:50,227
server, rack that provides some of the machinery around allowing 

73
00:03:50,230 --> 00:03:54,230
your ruby code to run as part of the rail SaaS app. We have the 

74
00:03:54,234 --> 00:03:58,234
rails library itself which your code can use. Then, finally, we 

75
00:03:58,238 --> 00:04:01,238
have the storage tier where permanent data lives. Well, in 

76
00:04:01,241 --> 00:04:04,241
development mode, the only permanent data is data right on your 

77
00:04:04,244 --> 00:04:06,244
computer that you're using really for testing. We're going to be 

78
00:04:06,246 --> 00:04:11,246
using SQLite which has a very good name. It's like a SQL 

79
00:04:11,251 --> 00:04:13,251
relational database which we'll talk about more in the next few 

80
00:04:13,253 --> 00:04:16,253
segments but it'd so lightweight that only a single user at a 

81
00:04:16,256 --> 00:04:20,256
time can use it. This is the baby version of the setup that's 

82
00:04:20,260 --> 00:04:23,260
fine for one person developing and testing. When you move out 

83
00:04:23,263 --> 00:04:26,263
into a production environment, typically you'll see something 

84
00:04:26,266 --> 00:04:30,266
like this where you really have multiple copies of the entire 

85
00:04:30,270 --> 00:04:33,270
stack. You'll see that we've replaced Webrick with thin which is 

86
00:04:33,273 --> 00:04:38,273
a production quality, very fast, very lean front end 

87
00:04:38,278 --> 00:04:42,278
presentation tier. We have many copies, so to speak, of the 

88
00:04:42,282 --> 00:04:47,282
application stack that includes the presentation layer and our 

89
00:04:47,287 --> 00:04:50,287
application code. The reason we're able to do this, remember 

90
00:04:50,290 --> 00:04:53,290
that we said previously, HTTP is a stateless protocol. Every 

91
00:04:53,293 --> 00:04:57,293
request is truly independent. Well, if it's really true that the 

92
00:04:57,297 --> 00:05:00,297
only thing that ties together different request from the same 

93
00:05:00,000 --> 00:05:04,300
user is data that would be put into this persistence tier, then 

94
00:05:04,304 --> 00:05:06,304
we should be able to create multiple copies of the app to serve 

95
00:05:06,306 --> 00:05:10,306
many more users which should be able to direct incoming traffic 

96
00:05:10,310 --> 00:05:12,310
to anyone of those copies because they're all independent 

97
00:05:12,312 --> 00:05:16,312
request and rely only on the stored data to tie together request 

98
00:05:16,316 --> 00:05:19,316
from different users. This is in fact, exactly what's done. Now, 

99
00:05:19,319 --> 00:05:22,319
the reason it's a little bit more difficult why I haven't drawn 

100
00:05:22,322 --> 00:05:25,322
multiple copies of the database and I'm using McSQL as a stand 

101
00:05:25,325 --> 00:05:28,325
in here, the database is a little more tricky because as soon as 

102
00:05:28,328 --> 00:05:31,328
you have multiple copies of the database, that means there might 

103
00:05:31,331 --> 00:05:34,331
be a multiple copies of some data items. Now, there's the 

104
00:05:34,334 --> 00:05:37,334
problem of whether those copies can always be kept in sync if 

105
00:05:37,337 --> 00:05:40,337
there's multiple databases. That is an open problem and if 

106
00:05:40,340 --> 00:05:43,340
you've heard about the NoSQL movement or of NoSQL databases, it 

107
00:05:43,343 --> 00:05:45,343
is one of the problems they try to solve and we're going to try 

108
00:05:45,345 --> 00:05:48,345
to shed some light on what's difficult about solving that 

109
00:05:48,348 --> 00:05:51,348
problem momentarily. In this course, we're going to be using 

110
00:05:51,351 --> 00:05:54,351
Heroku for our deployment. They have a very similar environment 

111
00:05:54,354 --> 00:05:57,354
but they have custom engineered what they called Dynos which are 

112
00:05:57,357 --> 00:06:00,357
sort of a lightweight app servers that they can run. Each app 

113
00:06:00,000 --> 00:06:04,360
also has databases devoted to it. It's got database caching 

114
00:06:04,364 --> 00:06:08,364
built in so that commonly done database queries can be easily 

115
00:06:08,368 --> 00:06:12,368
repeated and they have their own technology for a bank of 

116
00:06:12,372 --> 00:06:15,372
presentation tiers, HTTP servers so that they can scale those 

117
00:06:15,375 --> 00:06:18,375
out separately from the application servers but the basic idea 

118
00:06:18,378 --> 00:06:21,378
that were coming back too is the same. The stateless parts of 

119
00:06:21,381 --> 00:06:23,381
the sac like the presentation tier and the app tier can 

120
00:06:23,383 --> 00:06:27,383
essentially be scaled out by making many copies of them. With 

121
00:06:27,387 --> 00:06:29,387
cloud computing, it's so cheap to have multiple machines that is 

122
00:06:29,389 --> 00:06:33,389
is a very popular strategy but sooner or later, the database is 

123
00:06:33,393 --> 00:06:35,393
likely to become your bottleneck and scaling that out is much 

124
00:06:35,395 --> 00:06:40,395
more tricky which we'll come back to in a moment. What do people 

125
00:06:40,400 --> 00:06:43,400
do when it's time to scale out the database? If you've heard the 

126
00:06:43,403 --> 00:06:46,403
term sharding and replication, one thing you might say is, well, 

127
00:06:46,406 --> 00:06:49,406
if I have some data elements that are really not shared across 

128
00:06:49,409 --> 00:06:52,409
different users, for example, my personal preferences, my user 

129
00:06:52,412 --> 00:06:56,412
profile in a site like my Yahoo, well, one possibility is I 

130
00:06:56,416 --> 00:07:00,416
could actually have multiple databases and users who's user name 

131
00:07:00,000 --> 00:07:02,420
start with different letters might be stored in different 

132
00:07:02,422 --> 00:07:05,422
databases. Now, that works really well as long as you never need 

133
00:07:05,425 --> 00:07:08,425
to combine information from two of those databases and then 

134
00:07:08,428 --> 00:07:10,428
things can get pretty hairy but this is called sharding and the 

135
00:07:10,430 --> 00:07:13,430
idea that if you have some data that really never has to 

136
00:07:13,433 --> 00:07:16,433
interact with other data from different users or from different 

137
00:07:16,436 --> 00:07:19,436
entities in your application, you could just store that data on 

138
00:07:19,439 --> 00:07:23,439
different databases. Replication is another solution. This says, 

139
00:07:23,443 --> 00:07:27,443
well, why don't be have many copies of the database and only one 

140
00:07:27,447 --> 00:07:30,447
copy accepts updates because the idea that updates happen less 

141
00:07:30,450 --> 00:07:34,450
frequently than queries and periodically, the updates will get 

142
00:07:34,454 --> 00:07:36,454
propagated to the other copies. This is often called Master 

143
00:07:36,456 --> 00:07:40,456
Slave Replication and it's one way to do this. What kind of data 

144
00:07:40,460 --> 00:07:43,460
is it the case that reads occur much more frequently than 

145
00:07:43,463 --> 00:07:46,463
rights? Well, think about Facebook and the idea of posting on a 

146
00:07:46,466 --> 00:07:49,466
timeline or liking something, there's many more people who are 

147
00:07:49,469 --> 00:07:52,469
going to consume the results of that than people who are 

148
00:07:52,472 --> 00:07:55,472
updating it at any given time. Having some amount of 

149
00:07:55,475 --> 00:07:58,475
inconsistency actually has been an issue for Facebook that 

150
00:07:58,478 --> 00:08:01,478
they've done a lot of engineering to work around. It is the case 

151
00:08:01,481 --> 00:08:04,481
that if you do an update to your timeline, there's a bounded 

152
00:08:04,484 --> 00:08:07,484
amount of time during which not all of your friends will see it 

153
00:08:07,487 --> 00:08:10,487
right away. They'll see it at slightly different times. Now, to 

154
00:08:10,490 --> 00:08:12,490
their great credit, Facebook has done an enormous amount of 

155
00:08:12,492 --> 00:08:15,492
engineering to minimize that window so they did practice most 

156
00:08:15,495 --> 00:08:18,495
people never even notice it. The message here is there's no free 

157
00:08:18,498 --> 00:08:22,498
lunch. If you try to scale your way out of the database problem 

158
00:08:22,502 --> 00:08:24,502
by replicating, you're going to have the issue at some point 

159
00:08:24,504 --> 00:08:27,504
where different copies of the data might not all be up to date. 

160
00:08:27,507 --> 00:08:30,507
If you try to get out of it by sharding, you avoid that problem 

161
00:08:30,510 --> 00:08:33,510
but now you have the problem of data that's in different 

162
00:08:33,513 --> 00:08:36,513
databases. It's really hard to combine and join together. 

163
00:08:36,516 --> 00:08:38,516
Neither one of this is the solution to the database scaling 

164
00:08:38,518 --> 00:08:41,518
problem and it arises directly from the fact that in this three 

165
00:08:41,521 --> 00:08:46,521
tier architecture, scaling where the data is is just hard to do. 

166
00:08:46,526 --> 00:08:49,526
To summarize the high points of the software to service 

167
00:08:49,529 --> 00:08:53,529
architecture, the browsers are the clients. They ask questions, 

168
00:08:53,533 --> 00:08:56,533
they make request to the servers. HTTP is the protocol that the 

169
00:08:56,536 --> 00:09:00,536
use and they use URIs and HTTP methods like get and post to name 

170
00:09:00,000 --> 00:09:03,540
what they want to do. HTTP is the request reply protocol so 

171
00:09:03,543 --> 00:09:06,543
everything begins with a client asking a question. Service can't 

172
00:09:06,546 --> 00:09:09,546
really push information to you pro- actively, they have to wait 

173
00:09:09,549 --> 00:09:11,549
the client to ask. Even in cases where it looks like the server 

174
00:09:11,551 --> 00:09:14,551
is pushing information, it's really usually just the client 

175
00:09:14,554 --> 00:09:18,554
asking over and over again. In modern SaaS applications, when 

176
00:09:18,558 --> 00:09:20,558
you make a request to a server, it's not going to serve you a 

177
00:09:20,560 --> 00:09:23,560
static file, it's going to generate some content on the fly for 

178
00:09:23,563 --> 00:09:28,563
you. HTML is the medium by which that content is encoded. CSS or 

179
00:09:28,568 --> 00:09:31,568
cascading style sheet is how we control its visual appearance 

180
00:09:31,571 --> 00:09:34,571
and because HTTP was designed a stateless protocol, cookies 

181
00:09:34,574 --> 00:09:38,574
allow the servers to track different clients and to keep track 

182
00:09:38,578 --> 00:09:42,578
of the same client coming back on multiple requests. There's an 

183
00:09:42,582 --> 00:09:44,582
important architectural trade off that was made here. The 

184
00:09:44,584 --> 00:09:47,584
architectural trade off is stateless means you can actually 

185
00:09:47,587 --> 00:09:51,587
scale out those middle tiers by replicating the app server or 

186
00:09:51,591 --> 00:09:54,591
replicating the presentation tier in a way that you can't really 

187
00:09:54,594 --> 00:09:57,594
do with the database. In retrospect, you could argue that even 

188
00:09:57,597 --> 00:10:00,597
those statelessness seems to introduce the complication of 

189
00:10:00,000 --> 00:10:02,600
requiring cookies on the hole that was a good architectural 

190
00:10:02,602 --> 00:10:05,602
choice because it allows parts of the application to be scaled 

191
00:10:05,605 --> 00:10:10,605
much more easily. Frameworks like rails and like Django and like 

192
00:10:10,610 --> 00:10:14,610
others, try to collect some of the common machinery necessary to 

193
00:10:14,614 --> 00:10:17,614
support SaaS apps like the machinery we've been talking about 

194
00:10:17,617 --> 00:10:20,617
and make it conveniently available to you so that not every new 

195
00:10:20,620 --> 00:10:26,620
program has to reinvent the wheel. Finally, the mapping between 

196
00:10:26,626 --> 00:10:28,626
these logical tiers and the shared- nothing architecture, 

197
00:10:28,628 --> 00:10:31,628
frameworks are responsible for giving you that too. They have to 

198
00:10:31,631 --> 00:10:34,631
identify where different functionality goes, how the framework 

199
00:10:34,634 --> 00:10:36,634
supports each piece and that's what we'll explore in the next 

200
00:10:36,636 --> 00:10:37,636
couple of segments. 


