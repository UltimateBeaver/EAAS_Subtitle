1
00:00:00,000 --> 00:00:03,000
Now, to the official material. It's time to get into some code

2
00:00:03,003 --> 00:00:06,003
and we're going to talk about Ruby in a pretty quick overview. 

3
00:00:06,006 --> 00:00:09,006
Of course, as you already know the best way to learn any 

4
00:00:09,009 --> 00:00:13,009
language is to write some programs in it. I'm going to start 

5
00:00:13,013 --> 00:00:16,013
with, " This is a for loop and this is a string." you guys 

6
00:00:16,016 --> 00:00:19,016
already know that stuff. This is an intro to Ruby at a high 

7
00:00:19,019 --> 00:00:21,019
level for people who have taken Java and in this specific case 

8
00:00:21,021 --> 00:00:25,021
of UC Berkley many of you have also taken 61A structure and 

9
00:00:25,025 --> 00:00:27,025
interpretation of computer programs, you're going to see some of 

10
00:00:27,027 --> 00:00:31,027
those ideas comeback. Those of you who are joining us out in the 

11
00:00:31,031 --> 00:00:34,031
wider world, don't worry if you haven't been familiar with those 

12
00:00:34,034 --> 00:00:37,034
ideas because they're cool and we're going to get to them, good 

13
00:00:37,037 --> 00:00:42,037
stuff. Let's start with just a laundry list here. What is Ruby? 

14
00:00:42,042 --> 00:00:45,042
It's an interpretive language, you don't compile it and run it. 

15
00:00:45,045 --> 00:00:48,045
It's objective oriented and as we'll see, it takes object 

16
00:00:48,048 --> 00:00:50,048
orientation to a whole new level beyond what many of you 

17
00:00:50,050 --> 00:00:54,050
probably are accustomed to because everything in the language, 

18
00:00:54,054 --> 00:00:58,054
even an integer is a real object. The only way anything gets 

19
00:00:58,058 --> 00:01:01,058
done in this language is you call methods on objects. It seems a 

20
00:01:01,061 --> 00:01:03,061
little bit weird but once you get used to it it's a very 

21
00:01:03,063 --> 00:01:07,063
powerful simplifying principle. It is dynamically typed. What 

22
00:01:07,067 --> 00:01:09,067
does that mean? It means that there are types in the language 

23
00:01:09,069 --> 00:01:13,069
but variables don't have types. Objectives have types but the 

24
00:01:13,073 --> 00:01:16,073
same variable can spend part of its life being an int, part of 

25
00:01:16,076 --> 00:01:19,076
its life being something totally different. It is a dynamic 

26
00:01:19,079 --> 00:01:23,079
language and hopefully in the rest of the next couple of 

27
00:01:23,083 --> 00:01:26,083
segments here, we're going to see some specific examples of what 

28
00:01:26,086 --> 00:01:30,086
that means. What it means on paper is that there's all things 

29
00:01:30,090 --> 00:01:33,090
you can do at run time after the program has already begun. You 

30
00:01:33,093 --> 00:01:36,093
can add or modify new code, you can change the definition of 

31
00:01:36,096 --> 00:01:39,096
existing methods after the code has begun. You can ask objects, 

32
00:01:39,099 --> 00:01:43,099
questions about themselves and you can create new objects based 

33
00:01:43,103 --> 00:01:47,103
on those properties. The only reason this matters is to the 

34
00:01:47,107 --> 00:01:50,107
extent that it makes programming easier to do and makes your 

35
00:01:50,110 --> 00:01:53,110
code easier to maintain. Whenever I try to show examples of 

36
00:01:53,113 --> 00:01:56,113
these things, the examples are going to be focused on how does 

37
00:01:56,116 --> 00:01:58,116
this feature help you write better code. How does it make your 

38
00:01:58,118 --> 00:02:03,118
code more readable? How does it make your code .... how does it 

39
00:02:03,123 --> 00:02:05,123
make you feel like you've done a better job like you've walked 

40
00:02:05,125 --> 00:02:07,125
away and polished a sculpture of elegance? That's really what 

41
00:02:07,127 --> 00:02:13,127
it's about. I'm into code beauty. Some very basic conventions to 

42
00:02:13,133 --> 00:02:17,133
get us started here. Names of classes. Yes, Ruby has classes, 

43
00:02:17,137 --> 00:02:19,137
you're going to find out that they don't actually count for as 

44
00:02:19,139 --> 00:02:21,139
much as you might think in other languages. In some [inaudible]

45
00:02:21,141 --> 00:02:25,141
languages like Java, what class you are is all about

46
00:02:25,145 --> 00:02:28,145
what you can do. What you can do is determine about what class 

47
00:02:28,148 --> 00:02:31,148
you are. Ruby is different, it's very meritocratic. What you can 

48
00:02:31,151 --> 00:02:34,151
do is really just based on your abilities. Your class doesn't 

49
00:02:34,154 --> 00:02:38,154
really matter all that much. This is actually true. Class names 

50
00:02:38,158 --> 00:02:40,158
use upper camel- case. If you've never seen the word before you 

51
00:02:40,160 --> 00:02:44,160
can figure out where camel- case comes from as a term. Methods 

52
00:02:44,164 --> 00:02:49,164
and variables usually use snake underscore case. Names of 

53
00:02:49,169 --> 00:02:52,169
methods, you might find that method names can sometimes end with 

54
00:02:52,172 --> 00:02:55,172
a question mark. It's idiomatic for a method that is supposed to 

55
00:02:55,175 --> 00:02:59,175
return true or false. Methods that you can use to ask questions 

56
00:02:59,179 --> 00:03:02,179
about objects. You'll sometimes find that are methods names that 

57
00:03:02,182 --> 00:03:05,182
end with a bang, not literally with a boom but with an 

58
00:03:05,185 --> 00:03:08,185
exclamation mark. The [ ask 00:03:07] bang character and that 

59
00:03:08,188 --> 00:03:10,188
usually means it's a dangerous method. Calling this method could 

60
00:03:10,190 --> 00:03:14,190
cause unintended side effects if you're not careful. You'll get 

61
00:03:14,194 --> 00:03:17,194
to seeing that. There are constants, usually constants are in 

62
00:03:17,197 --> 00:03:21,197
all uppercase, all upper- camel case. There are globals but we 

63
00:03:21,201 --> 00:03:24,201
know globals are terrible so we're not going to use them. There 

64
00:03:24,204 --> 00:03:27,204
are symbols. This is probably one of the first hang- ups people 

65
00:03:27,207 --> 00:03:29,207
get if they've not come from a language that has the concept of 

66
00:03:29,209 --> 00:03:33,209
a symbol. What's a symbol? The syntax for a symbol is just a 

67
00:03:33,213 --> 00:03:37,213
colon followed by a string of letters and underscores and 

68
00:03:37,217 --> 00:03:42,217
digits. A symbol really is like an immutable string whose value 

69
00:03:42,222 --> 00:03:45,222
is itself. The reason that in many cases you're going to find 

70
00:03:45,225 --> 00:03:49,225
that there are methods in Ruby and in Rails where it looks like 

71
00:03:49,229 --> 00:03:52,229
you could actually pass either a symbol or a string. Symbols 

72
00:03:52,232 --> 00:03:54,232
aren't the same as strings, it's very easy to convert between 

73
00:03:54,234 --> 00:03:58,234
them. There's methods to_s and to_sym. When would

74
00:03:58,238 --> 00:04:01,238
we want to use a symbol instead of a string? Why do they exist? 

75
00:04:01,241 --> 00:04:04,241
What we'll usually find is that when a symbol is involved that 

76
00:04:04,244 --> 00:04:08,244
connotes specialness. If I see a function that's being called 

77
00:04:08,248 --> 00:04:13,248
with a symbol colon rails, I should interpret that to me as 

78
00:04:13,253 --> 00:04:15,253
rails is one of a small number of special values that its 

79
00:04:15,255 --> 00:04:18,255
function might understand. It's not a function that is prepared 

80
00:04:18,258 --> 00:04:21,258
to deal with an arbitrary string. That's not always going to be 

81
00:04:21,261 --> 00:04:23,261
the case but very generally that's the case. We'll see a number 

82
00:04:23,263 --> 00:04:27,263
of examples of this. Variables, arrays and hashes, you're all 

83
00:04:27,267 --> 00:04:30,267
Java programs so this should be quick. There are no 

84
00:04:30,270 --> 00:04:33,270
declarations, you are free from declarations for the rest of the 

85
00:04:33,273 --> 00:04:36,273
semester. You can have local variables, you have to assign them 

86
00:04:36,276 --> 00:04:39,276
before you use them. As we'll see, when we're defining classes 

87
00:04:39,279 --> 00:04:42,279
and objects, the instance in class variables spring into 

88
00:04:42,282 --> 00:04:45,282
existence with the nil value which is also value that means 

89
00:04:45,285 --> 00:04:49,285
false in Ruby until the first time they're assigned. Remember, I 

90
00:04:49,289 --> 00:04:52,289
said that variables don't have types but objects do have types. 

91
00:04:52,292 --> 00:04:55,292
Here's a variable x that I'm assigning to an int and then I'm 

92
00:04:55,295 --> 00:04:58,295
assigning it to a string and that is totally cool. The int and 

93
00:04:58,298 --> 00:05:02,298
the string are different types, different classes. The variable 

94
00:05:02,302 --> 00:05:07,302
that refers to them doesn't have to have a type. This we can't 

95
00:05:07,307 --> 00:05:10,307
do because there is no declarations, right? There is a class 

96
00:05:10,310 --> 00:05:12,310
integer but we can't put the classes in front variables, 

97
00:05:12,312 --> 00:05:15,312
variables don't have classes. Some of this is just going to be 

98
00:05:15,315 --> 00:05:19,315
breaking out of habits that maybe you've gotten into if you're 

99
00:05:19,319 --> 00:05:24,319
coming from the Java world. We have arrays, plain old linear 

100
00:05:24,324 --> 00:05:27,324
arrays. As you can see from this simple example arrays don't 

101
00:05:27,327 --> 00:05:31,327
have to have all the same object in them. In Java you talk about 

102
00:05:31,331 --> 00:05:35,331
an array events or an array of foo bars. Ruby is just an array, 

103
00:05:35,335 --> 00:05:37,335
it can have whatever it wants and the elements can all be 

104
00:05:37,337 --> 00:05:40,337
different as a matter of fact. We can assign the elements using 

105
00:05:40,340 --> 00:05:44,340
a subscript, subscripts are zero based. We can also ask an array 

106
00:05:44,344 --> 00:05:46,344
how long it is and we'll talk about many more interesting 

107
00:05:46,346 --> 00:05:48,346
methods that arrays come with but they behave the way you'd 

108
00:05:48,348 --> 00:05:52,348
expect. We also have hashes, some languages call these 

109
00:05:52,352 --> 00:05:55,352
associative arrays. If you've programmed in a language like 

110
00:05:55,355 --> 00:05:58,355
Pearl, you're probably pretty used to this. Python has them, 

111
00:05:58,358 --> 00:06:01,358
they call them dict or dictionaries in Python. Here's an example 

112
00:06:01,361 --> 00:06:04,361
of a hash literal, you put it in braces. Again, hashes are what? 

113
00:06:04,364 --> 00:06:08,364
They are mapping of keys to values. Because variables don't have 

114
00:06:08,368 --> 00:06:11,368
to have types, they keys can be any type and the values of those 

115
00:06:11,371 --> 00:06:15,371
keys can be any type. They don't all even have to be the same. 

116
00:06:15,375 --> 00:06:18,375
Here's a hash that has two keys, one key is the single character 

117
00:06:18,378 --> 00:06:21,378
string A, another key is the symbol B. Remember, that's 

118
00:06:21,381 --> 00:06:27,381
different from the string. In fact, what is the value of the 

119
00:06:27,387 --> 00:06:31,387
symbol B key is an array. Again, just like with arrays, we can 

120
00:06:31,391 --> 00:06:34,391
mix up the types of the keys and values. We can dereference that 

121
00:06:34,394 --> 00:06:39,394
array and set it zero with element to something. We can ask the 

122
00:06:39,399 --> 00:06:42,399
hash what its keys are then we get back a plain old array which 

123
00:06:42,402 --> 00:06:46,402
is just a list in some arbitrary non- guaranteed order of what 

124
00:06:46,406 --> 00:06:50,406
the hashes keys are and there's ways to go through them as well. 

125
00:06:50,410 --> 00:06:54,410
Methods, everything is passed by reference, everything except 

126
00:06:54,414 --> 00:06:57,414
integers. We'll come to that in a minute. I can define a 

127
00:06:57,417 --> 00:07:01,417
single ... here's a function foo that takes two arguments and it 

128
00:07:01,421 --> 00:07:06,421
actually returns an array or a list of two things. I can define 

129
00:07:06,426 --> 00:07:09,426
functions that have arguments with optional values. This is, 

130
00:07:09,429 --> 00:07:11,429
when I call the foo function, the second argument is optional 

131
00:07:11,431 --> 00:07:14,431
and if I don't have the value supplied for the second argument 

132
00:07:14,434 --> 00:07:19,434
it gets zero by default. When I call a function like the one 

133
00:07:19,439 --> 00:07:23,439
I've defined here that actually returns a list of things, I can 

134
00:07:23,443 --> 00:07:26,443
assign the result either to an array and then I can dereference 

135
00:07:26,446 --> 00:07:30,446
it or I can just assign the result to individual variables. 

136
00:07:30,450 --> 00:07:33,450
Again, a lot of the stuff, it's in the reference manuals and so 

137
00:07:33,453 --> 00:07:35,453
on. I'm just trying to give you a very high level, a whirlwind 

138
00:07:35,455 --> 00:07:38,455
tour of the language so that you could use to reading code in a 

139
00:07:38,458 --> 00:07:42,458
language that you may be haven't seen before. Control flow and 

140
00:07:42,462 --> 00:07:45,462
statements, moving right along here. Statements end with a 

141
00:07:45,465 --> 00:07:48,465
semicolon or a new line but a new line is way more common. In 

142
00:07:48,468 --> 00:07:52,468
fact, getting back to the code beauty thing, a really nice thing 

143
00:07:52,472 --> 00:07:56,472
about ... one of the other things I do besides writing Ruby code 

144
00:07:56,476 --> 00:07:59,476
and teaching great students at UC Berkley is I'm a musician. I 

145
00:07:59,479 --> 00:08:02,479
do musical theater work, I do a lot of orchestration and if 

146
00:08:02,482 --> 00:08:05,482
anybody played jazz, one of the great things about putting 

147
00:08:05,485 --> 00:08:08,485
together a chart of jazz music for a jazz musician is you want 

148
00:08:08,488 --> 00:08:11,488
to minimize the number of marks on the page while still 

149
00:08:11,491 --> 00:08:14,491
communicating everything that the musician has to do. I tend to 

150
00:08:14,494 --> 00:08:16,494
think of programming the same way. In fact, I've gotten to the 

151
00:08:16,496 --> 00:08:19,496
point where I like using single quotes around strings instead of 

152
00:08:19,499 --> 00:08:22,499
double quotes because it's less pixels on the screen. I'm 

153
00:08:22,502 --> 00:08:27,502
serious. It's a compulsion. Where I'm going with this is that in 

154
00:08:27,507 --> 00:08:30,507
Ruby even though semicolons can be used to end statements, you 

155
00:08:30,510 --> 00:08:33,510
never see them. You put each statement on its own line because 

156
00:08:33,513 --> 00:08:38,513
that's easier to lead. It's less stuff per line. Now, does that 

157
00:08:38,518 --> 00:08:41,518
mean that you can't break a statement across lines? It means you 

158
00:08:41,521 --> 00:08:44,521
have to be careful with the parser. Here is two examples of a 

159
00:08:44,524 --> 00:08:47,524
statement, one of which will parse correctly where the line 

160
00:08:47,527 --> 00:08:50,527
break is after the word unless. I'm going to raise a boom 

161
00:08:50,530 --> 00:08:54,530
exception unless the ship is stable. It would be incorrect to 

162
00:08:54,534 --> 00:08:59,534
put the line break after raise boom because this statement by 

163
00:08:59,539 --> 00:09:01,539
itself, raise boom, is actually a legal Ruby statement all on 

164
00:09:01,541 --> 00:09:04,541
its own. In this case the interpreter would be confused because 

165
00:09:04,544 --> 00:09:07,544
it stops parsing the statement here and then I have this unless 

166
00:09:07,547 --> 00:09:11,547
and where am I. We have all the same basic comparison operators 

167
00:09:11,551 --> 00:09:14,551
you've already seen. As we'll see in a moment the equal tweedle 

168
00:09:14,554 --> 00:09:17,554
and bang tweedle are used for regular expressions among other 

169
00:09:17,557 --> 00:09:21,557
things. There is Boolean true and false. There is Boolean nil 

170
00:09:21,561 --> 00:09:25,561
which evaluates as a false value but isn't the same as false. 

171
00:09:25,565 --> 00:09:29,565
Don't panic. We have the usual control flow constructs. We have 

172
00:09:29,569 --> 00:09:34,569
if, then, else along with else, ifs. We have while or until and 

173
00:09:34,574 --> 00:09:40,574
what are these weird things down here? One up to 10 or 10 times. 

174
00:09:40,580 --> 00:09:42,580
You can try to think of these as loops but I'd really rather you 

175
00:09:42,582 --> 00:09:45,582
didn't. In a couple of more sections we're going to talk about 

176
00:09:45,585 --> 00:09:48,585
blocks and iterators. What these really are is a completely 

177
00:09:48,588 --> 00:09:51,588
different way of thinking about iteration. Instead of thinking 

178
00:09:51,591 --> 00:09:53,591
about loops we're going to think about objects that manage their 

179
00:09:53,593 --> 00:09:57,593
own traversal. Let me say that one more time, objects get to 

180
00:09:57,597 --> 00:10:01,597
manage their own traversal. If I am a binary tree I get to 

181
00:10:01,601 --> 00:10:04,601
manage how my elements are traversed. If I am an array, I get to 

182
00:10:04,604 --> 00:10:07,604
manage how my elements are traversed and usually that would be 

183
00:10:07,607 --> 00:10:10,607
in straight line order. In fact, I can define an arbitrary 

184
00:10:10,610 --> 00:10:13,610
object or data structure that if it has more than one element, 

185
00:10:13,613 --> 00:10:17,613
it gets to decide how those elements are traversed. As we'll 

186
00:10:17,617 --> 00:10:21,617
see, these examples containing up to and times are really just a 

187
00:10:21,621 --> 00:10:24,621
way of saying, “ I'm going to in place to find a sequence of 

188
00:10:24,624 --> 00:10:27,624
numbers and it's going to manage how it's traversed.” We'll come 

189
00:10:27,627 --> 00:10:31,627
back to that later. Strings and regular expressions. Regular 

190
00:10:31,631 --> 00:10:35,631
expressions are so your friend. This would be a great time to 

191
00:10:35,635 --> 00:10:37,635
start reviewing regular expressions. We'll do a very quick 

192
00:10:37,637 --> 00:10:41,637
review here and there's a great site called rubular, seriously,

193
00:10:41,641 --> 00:10:45,641
rublyer. com where you can test out regular expressions against 

194
00:10:45,645 --> 00:10:48,645
strings and make sure that they do what you want. How do you 

195
00:10:48,648 --> 00:10:50,648
express strings? We've got double quotes, we've got single 

196
00:10:50,650 --> 00:10:55,650
quotes, we've got %Q which means treat this string the same as

197
00:10:55,655 --> 00:10:58,655
if it had been in double quotes. Why would you use that? For one 

198
00:10:58,658 --> 00:11:02,658
thing, you could put double quotes into the string. Similarly %q,

199
00:11:02,662 --> 00:11:06,662
treat the string as if had single quotes around it. What's

200
00:11:06,666 --> 00:11:09,666
the difference between those? One example is a double quoted 

201
00:11:09,669 --> 00:11:13,669
string, you can interpolate an expression. Noticed that I say an 

202
00:11:13,673 --> 00:11:17,673
expression. When you have a pound braces construct inside a 

203
00:11:17,677 --> 00:11:20,677
double quoted string you could put any Ruby expression there of 

204
00:11:20,680 --> 00:11:23,680
arbitrary complexity. It's bad form to put something in it 

205
00:11:23,683 --> 00:11:25,683
that's super complex just because you can do something doesn't 

206
00:11:25,685 --> 00:11:28,685
mean you should do something. In a single quoted string that 

207
00:11:28,688 --> 00:11:32,688
doesn't work, single quoted strings are like verbatim. What 

208
00:11:32,692 --> 00:11:35,692
about regular expressions? For reasons that you'll understand 

209
00:11:35,695 --> 00:11:38,695
better after you've done some Ruby programming, you can actually 

210
00:11:38,698 --> 00:11:41,698
put the string and the regex on either side of the

211
00:11:41,701 --> 00:11:45,701
equal tweedle operator which is the matching operator. Here, I'm 

212
00:11:45,705 --> 00:11:48,705
going to take the string fox@ berkley. edu and I'm going to 

213
00:11:48,708 --> 00:11:52,708
match it against this regular expression. Now, as you all know, 

214
00:11:52,712 --> 00:11:54,712
because you all know regular expressions and I'm just going to 

215
00:11:54,714 --> 00:11:59,714
review it. As you all know this regular expression says, “ Match 

216
00:11:59,719 --> 00:12:03,719
zero or more of any type of character followed by an @, followed 

217
00:12:03,723 --> 00:12:08,723
by zero or more or any type of character, followed by a dot, the 

218
00:12:08,728 --> 00:12:11,728
backslash means this dot is not a wild card it's actually just a 

219
00:12:11,731 --> 00:12:14,731
dot, followed by the letters edu, followed by the end of the 

220
00:12:14,734 --> 00:12:17,734
string.” In this case, the regular expression match would 

221
00:12:17,737 --> 00:12:20,737
succeed. Now, what about the fact that edu is an uppercase on 

222
00:12:20,740 --> 00:12:23,740
the left side but lowercase on the right side? That's okay 

223
00:12:23,743 --> 00:12:26,743
because the trailing eye on the regular expression says, “ 

224
00:12:26,746 --> 00:12:29,746
ignore case”. Again, if you've programmed at other scripting 

225
00:12:29,749 --> 00:12:32,749
languages like Pearl or Python, some of these syntax is heavily 

226
00:12:32,752 --> 00:12:36,752
overlapped with those languages. I could switch the order of 

227
00:12:36,756 --> 00:12:39,756
these on either side of the equal tweedle, that works just as 

228
00:12:39,759 --> 00:12:44,759
well. The return value of this expression is if there was any 

229
00:12:44,764 --> 00:12:47,764
kind of a match, I get a true value. If there was no match, I 

230
00:12:47,767 --> 00:12:51,767
get a false value. If the expression contained parenthesized 

231
00:12:51,771 --> 00:12:55,771
groups in the event of a match, the variables dollar one through 

232
00:12:55,775 --> 00:12:58,775
dollar, however many groups there were capture the partial 

233
00:12:58,778 --> 00:13:02,778
matches. In this simple example that I used, dollar one would 

234
00:13:02,782 --> 00:13:05,782
evaluate to fox because this first group of any characters 

235
00:13:05,785 --> 00:13:08,785
before the @ sign matches the first group of characters in my 

236
00:13:08,788 --> 00:13:13,788
name. Dollar two would match Berkley because the second group of 

237
00:13:13,793 --> 00:13:17,793
parents matches these group of characters, it's before the . 

238
00:13:17,797 --> 00:13:24,797
edu. Learn them, know them, love them. Lastly, other ways that 

239
00:13:24,804 --> 00:13:27,804
we can write regular expressions, the slashes are the most 

240
00:13:27,807 --> 00:13:30,807
common idiom, many languages including Pearl and Python also use 

241
00:13:30,810 --> 00:13:33,810
them. You can also construct them the long way by saying 

242
00:13:33,813 --> 00:13:38,813
constructing a new regex and there's also this % R

243
00:13:38,818 --> 00:13:41,818
brace notation which you don't see very often but just in the 

244
00:13:41,821 --> 00:13:43,821
interest of exposing you to all of these things. 


