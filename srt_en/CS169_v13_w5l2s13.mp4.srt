1
00:00:00,000 --> 00:00:02,000
In retrospect, I realized that it would have been more fun to 

2
00:00:02,002 --> 00:00:05,002
call this section Great Expectations in keeping with the theme 

3
00:00:05,005 --> 00:00:08,005
of classic novels, but I didn't, so whatever. Expectations it 

4
00:00:08,008 --> 00:00:13,008
is. Let's just take a quick recap of where we've been and where 

5
00:00:13,013 --> 00:00:16,013
we're going here in terms of our outside in development. We're 

6
00:00:16,016 --> 00:00:19,016
trying to write expectations that drive the development of our 

7
00:00:19,019 --> 00:00:22,019
code. We already showed a simple example of that in the 

8
00:00:22,022 --> 00:00:25,022
controller method. We discovered that even when we have to 

9
00:00:25,025 --> 00:00:28,025
collaborate with other methods and other classes, even if those 

10
00:00:28,028 --> 00:00:32,028
methods don't technically exist, we can set up expectations 

11
00:00:32,032 --> 00:00:34,032
around them and essentially create a stub that is going to be 

12
00:00:34,034 --> 00:00:38,034
called and satisfy the property of my controller code did what 

13
00:00:38,038 --> 00:00:41,038
it should do. The idea, which we're now going to see other 

14
00:00:41,041 --> 00:00:44,041
examples of, is that we're trying to break a dependency between 

15
00:00:44,044 --> 00:00:47,044
the thing that we're testing and other things that it depends on 

16
00:00:47,047 --> 00:00:51,047
or works with, generally called it's collaborators. The key 

17
00:00:51,051 --> 00:00:54,051
weapon in our arsenal to fight this is a seam, which is a way 

18
00:00:54,054 --> 00:00:57,054
that you can affect the app's behavior without editing the 

19
00:00:57,057 --> 00:01:01,057
source code of the app. If we continue our example, we said, " 

20
00:01:01,061 --> 00:01:04,061
What should the controller method do when it receives the search 

21
00:01:04,064 --> 00:01:06,064
form?" We said, " It should call a method that we haven't 

22
00:01:06,066 --> 00:01:10,066
written yet that will call TMDb and search for the movie." The 

23
00:01:10,070 --> 00:01:12,070
good news is we got that to pass. Notice that we got it to pass 

24
00:01:12,072 --> 00:01:16,072
by doing minimal work. We didn't actually write the method, we 

25
00:01:16,076 --> 00:01:18,076
just verified that if the method existed, the controller action 

26
00:01:18,078 --> 00:01:21,078
would have called it. Let's move on to the next bit, which is 

27
00:01:21,081 --> 00:01:24,081
less trivial. It says, " Assuming that a match is found, it 

28
00:01:24,084 --> 00:01:28,084
should select a new view called Search Results, which we haven't 

29
00:01:28,088 --> 00:01:31,088
created yet, in order to display the matches that it found." 

30
00:01:31,091 --> 00:01:35,091
What would do with that? We're going to keep concentrating on 

31
00:01:35,095 --> 00:01:38,095
the happy path here. Step three is a sad path step, but we're 

32
00:01:38,098 --> 00:01:44,098
still working on the happy path. It should select the Search 

33
00:01:44,104 --> 00:01:46,104
Results view to display the match. What is that actually mean in 

34
00:01:46,106 --> 00:01:50,106
practice? It really means two separate things. One thing is, it 

35
00:01:50,110 --> 00:01:54,110
should decide that the correct template to use for rendering is 

36
00:01:54,114 --> 00:01:58,114
the search results template. Remember in the last segment, I 

37
00:01:58,118 --> 00:02:01,118
created an empty view for the search results. It doesn't have 

38
00:02:01,121 --> 00:02:04,121
anything in it. It was just an empty Haml file so that there 

39
00:02:04,124 --> 00:02:06,124
would be some view that could be rendered at the end of that 

40
00:02:06,126 --> 00:02:10,126
action. You might think in this case, the whole idea by the end 

41
00:02:10,130 --> 00:02:12,130
of a controller action, you're going to look for a view and it 

42
00:02:12,132 --> 00:02:15,132
has a certain name and stuff, isn't that just a built- in part 

43
00:02:15,135 --> 00:02:17,135
of Rails? Why would you write a test case for something that is 

44
00:02:17,137 --> 00:02:20,137
supposed to just be part of the framework? Indeed that will be 

45
00:02:20,140 --> 00:02:24,140
correct, but you also remember that, even in our simple Rotten 

46
00:02:24,144 --> 00:02:28,144
Potatoes example from a couple of lectures ago, sometimes the 

47
00:02:28,148 --> 00:02:30,148
action doesn't finish by rendering its own views. Sometimes it 

48
00:02:30,150 --> 00:02:33,150
finishes by redirecting you to some place else. It's easy to 

49
00:02:33,153 --> 00:02:37,153
imagine an action that if it succeeds, it renders a certain 

50
00:02:37,157 --> 00:02:40,157
view, but if it fails or depending on what else might go wrong, 

51
00:02:40,160 --> 00:02:42,160
it might render a different view or it might redirect to another 

52
00:02:42,162 --> 00:02:45,162
action. The idea that part of what you're testing on a 

53
00:02:45,165 --> 00:02:49,165
controller method is, does it end up by doing the right thing? 

54
00:02:49,169 --> 00:02:52,169
That's a legitimate thing to want to test. In this case, because 

55
00:02:52,172 --> 00:02:55,172
we're only talking about the happy path right now, the happy 

56
00:02:55,175 --> 00:02:57,175
path is it does whatever Rails would normally do, which is to 

57
00:02:57,177 --> 00:03:00,177
look for a view. We don't need to belabor the point that it's 

58
00:03:00,000 --> 00:03:04,180
going to call or it's going to select the correct template, 

59
00:03:04,184 --> 00:03:06,184
because we'd just be testing the framework. The reason to 

60
00:03:06,186 --> 00:03:09,186
understand how these kinds of test will work is, in your own 

61
00:03:09,189 --> 00:03:11,189
apps, it's usually much more complicated. The controller action, 

62
00:03:11,191 --> 00:03:15,191
depending on what happens during its execution, may choose one 

63
00:03:15,195 --> 00:03:18,195
of a couple of different templates to render. The second thing 

64
00:03:18,198 --> 00:03:21,198
we're saying is that assuming that that template does exist, 

65
00:03:21,201 --> 00:03:25,201
then a list of what the matching movies were should be available 

66
00:03:25,205 --> 00:03:27,205
to that template so that it can display them to the user in some 

67
00:03:27,207 --> 00:03:30,207
way. That's the whole goal of this, was to try to find matching 

68
00:03:30,210 --> 00:03:34,210
movies in TMDb. This is really two different specs and we could 

69
00:03:34,214 --> 00:03:37,214
take the same approach we did before. Each spec can get its own 

70
00:03:37,217 --> 00:03:40,217
it block and we're going to see what expectation constructs we 

71
00:03:40,220 --> 00:03:43,220
can use. Just like where you should receive to express the 

72
00:03:43,223 --> 00:03:46,223
concept that it should call a certain method in another class, 

73
00:03:46,226 --> 00:03:48,226
we're going to now use a new expectation construct called 

74
00:03:48,228 --> 00:03:51,228
should, which is basically ... it's based on a concept of a 

75
00:03:51,231 --> 00:03:54,231
matcher. I'm going to have an object and I'm going to establish 

76
00:03:54,234 --> 00:03:57,234
that some property should be true about that object. There's a 

77
00:03:57,237 --> 00:04:00,237
number of built- in properties that I can check, and again, if 

78
00:04:00,000 --> 00:04:03,240
you looked at the homework that comes with its own test cases, 

79
00:04:03,243 --> 00:04:06,243
simple properties are like the object should equal something. If 

80
00:04:06,246 --> 00:04:09,246
the object is a string, you can compare it to another string. If 

81
00:04:09,249 --> 00:04:11,249
the object is a number, you can see if it's greater than or less 

82
00:04:11,251 --> 00:04:14,251
than some other number. Those are kinds of simple examples of an 

83
00:04:14,254 --> 00:04:17,254
object having a property, but as we'll see, objects can have 

84
00:04:17,257 --> 00:04:19,257
many other interesting properties as well, and you can define 

85
00:04:19,259 --> 00:04:22,259
your own custom matchers. Just like as you're writing your 

86
00:04:22,262 --> 00:04:25,262
Cucumber tests, you define a domain language that make sense for 

87
00:04:25,265 --> 00:04:29,265
your app. As you'll see when you're writing your functional and 

88
00:04:29,269 --> 00:04:33,269
unit test in RSpec, you can make your own matchers that 

89
00:04:33,273 --> 00:04:36,273
correspond to the models and controllers that are in your app, 

90
00:04:36,276 --> 00:04:39,276
and overall that makes your test cases less cumbersome to write. 

91
00:04:39,279 --> 00:04:42,279
Let's take a look at the example of should and should not. The 

92
00:04:42,282 --> 00:04:45,282
idea is that a matcher applies a certain test to the receiver 

93
00:04:45,285 --> 00:04:50,285
and there's a number of examples that we can look, some of which 

94
00:04:50,290 --> 00:04:53,290
have already appeared in the homework. A simple one is, we have 

95
00:04:53,293 --> 00:04:56,293
this object count. We could say, " Count should equal five." 

96
00:04:56,296 --> 00:05:00,296
What is should actually doing? It's looking at this object and 

97
00:05:00,000 --> 00:05:04,300
it's applying the result of this block to the object. It's 

98
00:05:04,304 --> 00:05:06,304
basically sending count to the equals message with five as an 

99
00:05:06,306 --> 00:05:10,306
argument. We also saw an example early on about if we use 

100
00:05:10,310 --> 00:05:14,310
syntactic sugar and leaving out parens and desugaring things 

101
00:05:14,314 --> 00:05:18,314
like this call to less than, we can write, " Five should be less 

102
00:05:18,318 --> 00:05:23,318
than seven which really is punctuated this way." Five should be 

103
00:05:23,323 --> 00:05:27,323
odd, how does that work? One of the conventions in RSpec is that 

104
00:05:27,327 --> 00:05:32,327
if the matching condition begins with BE_, it will look for a 

105
00:05:32,332 --> 00:05:35,332
method name odd question mark that can be called on the original 

106
00:05:35,335 --> 00:05:39,335
receiver. Basically in this case, it's calling the odd question 

107
00:05:39,339 --> 00:05:42,339
mark method on five and expecting that the result of that will 

108
00:05:42,342 --> 00:05:46,342
be true. This is another... a nice use of method missing because 

109
00:05:46,346 --> 00:05:50,346
it allows you to write test cases that express, in quasi- 

110
00:05:50,350 --> 00:05:52,350
stilted program or English, what you're actually expecting to 

111
00:05:52,352 --> 00:05:55,352
happen. For those of you around the world, feel free to use 

112
00:05:55,355 --> 00:05:58,355
quasi- stilted program or national language of your choice. Mine 

113
00:05:58,358 --> 00:06:01,358
is English. We can also say things like, " Result should 

114
00:06:01,361 --> 00:06:06,361
include." Who handles the call to include? As we saw, include is 

115
00:06:06,366 --> 00:06:09,366
one of the many methods given to you in the enumerable module. A 

116
00:06:09,369 --> 00:06:13,369
reasonable assumption is that the programmer expects that result 

117
00:06:13,373 --> 00:06:16,373
is something that mixes in enumerable or else defines include on 

118
00:06:16,376 --> 00:06:20,376
itself. Again, it's going to call include question mark on 

119
00:06:20,380 --> 00:06:23,380
whatever the receiver is. I felt in the spirit of the government 

120
00:06:23,383 --> 00:06:27,383
shutdown, I had to include an example like this. This could be 

121
00:06:27,387 --> 00:06:32,387
syntactically legal. If, in fact, my application involved the 

122
00:06:32,392 --> 00:06:35,392
concept of modeling relationships and cooperation, I could 

123
00:06:35,395 --> 00:06:39,395
define my own custom RSpec matcher that can be applied to a 

124
00:06:39,399 --> 00:06:42,399
receiver and that can take an argument and do whatever testing 

125
00:06:42,402 --> 00:06:46,402
it needs to do to check my definition of cooperate with. In that 

126
00:06:46,406 --> 00:06:48,406
case, the matcher will be called ... by the way, it will 

127
00:06:48,408 --> 00:06:51,408
probably fail in this case. I'm so sorry to be so cynical, but 

128
00:06:51,411 --> 00:06:56,411
it is what it is. The idea is that rather than expressing some 

129
00:06:56,416 --> 00:06:59,416
underlying condition that would be tested by this, I can create 

130
00:06:59,419 --> 00:07:02,419
a cooperates with matcher that encapsulates all that logic. Why 

131
00:07:02,422 --> 00:07:05,422
would I do that? Because now the intention of the test is self- 

132
00:07:05,425 --> 00:07:08,425
describing. I can just look at the code that's in the test case 

133
00:07:08,428 --> 00:07:11,428
and infer what the developer meant to do, what's the thing that 

134
00:07:11,431 --> 00:07:16,431
they're trying to establish is true about these objects? Some of 

135
00:07:16,436 --> 00:07:18,436
these simpler forms up here, if you look through the homework 

136
00:07:18,438 --> 00:07:20,438
specs, you'll see examples of all of these. There's also a 

137
00:07:20,440 --> 00:07:26,440
should not, which inverts the sense of the test. As we'll see, 

138
00:07:26,446 --> 00:07:29,446
there's also additional matchers that RSpec adds where you're 

139
00:07:29,449 --> 00:07:32,449
using it with Rail specifically. There's a few basic ones like 

140
00:07:32,452 --> 00:07:35,452
these top ones up here. These are just part of the basic RSpec 

141
00:07:35,455 --> 00:07:38,455
core, but there are also matchers, one of which we're going to 

142
00:07:38,458 --> 00:07:41,458
see in a moment, that are there just to make life easier if 

143
00:07:41,461 --> 00:07:44,461
you're doing a Rails development specifically. The first one of 

144
00:07:44,464 --> 00:07:48,464
those we're going to see is this one. Result should render 

145
00:07:48,468 --> 00:07:53,468
template. What does this mean? It means that if you call a 

146
00:07:53,473 --> 00:07:56,473
controller action, the result of calling that controller action, 

147
00:07:56,476 --> 00:08:00,476
it's saying it should find and select a template called search 

148
00:08:00,000 --> 00:08:03,480
TMDb and attempt to render that template. It doesn't actually 

149
00:08:03,483 --> 00:08:06,483
matter if we have created the template or not. Again, the only 

150
00:08:06,486 --> 00:08:08,486
thing we're concerned about here is whether the controller is 

151
00:08:08,488 --> 00:08:11,488
doing its job, so we only care about whether the controller 

152
00:08:11,491 --> 00:08:14,491
decides to make the right choice. Whether the rendering happens 

153
00:08:14,494 --> 00:08:17,494
correctly, that's up to the view subsystem. That's outside the 

154
00:08:17,497 --> 00:08:20,497
scope of this particular test. We're just checking that the 

155
00:08:20,500 --> 00:08:23,500
controller action does what it's supposed to do. After we do our 

156
00:08:23,503 --> 00:08:27,503
post search TMDb, we can look at the response method, which is 

157
00:08:27,507 --> 00:08:31,507
another nice RSpec add on that comes when you install RSpec for 

158
00:08:31,511 --> 00:08:34,511
Rails, which returns the controller's response object. The 

159
00:08:34,514 --> 00:08:37,514
response object is the thing that encapsulates what is it that I 

160
00:08:37,517 --> 00:08:41,517
am about to do to deliver the response to this request? One of 

161
00:08:41,521 --> 00:08:44,521
the things that you can call on the response object is render 

162
00:08:44,524 --> 00:08:47,524
template. That's what the render template matcher is intended to 

163
00:08:47,527 --> 00:08:52,527
use. Now, we have expanded. Here is the first spec that we 

164
00:08:52,532 --> 00:08:55,532
developed in the previous lecture segment, and the only thing 

165
00:08:55,535 --> 00:08:57,535
we're checking here is that it calls the model method. Here, 

166
00:08:57,537 --> 00:09:03,537
we're checking an additional thing, which is that it should 

167
00:09:03,543 --> 00:09:06,543
select the Search Results template for rendering. What am I 

168
00:09:06,546 --> 00:09:10,546
doing here? What is this stub thing? This is confusing. Up here, 

169
00:09:10,550 --> 00:09:14,550
I said movie should receive find in TMDb. I'm asserting that it 

170
00:09:14,554 --> 00:09:19,554
would be an error if that method did not get called. Down here, 

171
00:09:19,559 --> 00:09:21,559
stub is actually just a way of saying, " If somebody tries to 

172
00:09:21,561 --> 00:09:25,561
call this method, just don't do anything, return nil, don't 

173
00:09:25,565 --> 00:09:28,565
check the arguments. Just don't give an error. Just ignore it. 

174
00:09:28,568 --> 00:09:31,568
Pretend it never happened." Why is it that in this test, it's 

175
00:09:31,571 --> 00:09:34,571
okay for me to do that, whereas in the previous test, I was 

176
00:09:34,574 --> 00:09:38,574
adamant that if it's not done, that that would be an error? 

177
00:09:38,578 --> 00:09:41,578
Again, I'm exaggerating a little bit to prove a pedagogical 

178
00:09:41,581 --> 00:09:45,581
point here, which is that each test case, each spec which is an 

179
00:09:45,585 --> 00:09:48,585
it block, should be testing exactly one thing. The idea that 

180
00:09:48,588 --> 00:09:51,588
we're testing that it should call the model method, we already 

181
00:09:51,591 --> 00:09:55,591
did that. This test is responsible for that. In this test, we're 

182
00:09:55,595 --> 00:09:57,595
checking that it selects the search results template for 

183
00:09:57,597 --> 00:10:01,597
rendering. Even though we know in scare quotes that it really 

184
00:10:01,601 --> 00:10:05,601
does need to call find in TMDb, technically, this test doesn't 

185
00:10:05,605 --> 00:10:09,605
care about that fact. This test only cares about this line here, 

186
00:10:09,609 --> 00:10:12,609
which is that once we get a successful response, the response 

187
00:10:12,612 --> 00:10:15,612
should indicate that we're going to render the right template. 

188
00:10:15,615 --> 00:10:18,615
Again, I'm nitpicking about what we have to check versus what we 

189
00:10:18,618 --> 00:10:22,618
don't have to check in each individual test, but the underlying 

190
00:10:22,622 --> 00:10:24,622
concept as an important one, which is you want to focus each 

191
00:10:24,624 --> 00:10:27,624
test on one behavior. Tests are cheap. You're going to have 

192
00:10:27,627 --> 00:10:30,627
thousands of them even for a simple app, so don't combine 

193
00:10:30,630 --> 00:10:33,630
multiple checks for different kinds of behaviors into the same 

194
00:10:33,633 --> 00:10:42,633
test. That's what it looks like. At this case, the view at least 

195
00:10:42,642 --> 00:10:45,642
has to exist as an empty file. It doesn't have to do anything in 

196
00:10:45,645 --> 00:10:50,645
it. Because the view has to at least be ... we have to have a 

197
00:10:50,650 --> 00:10:53,650
place holder for it which we already created, that's the reason 

198
00:10:53,653 --> 00:10:56,653
that we think of a controller test as a functional test. Because 

199
00:10:56,656 --> 00:11:00,656
when you think about it, when we did that simulated post from 

200
00:11:00,000 --> 00:11:03,660
within the test, that's exercising the route subsystem because 

201
00:11:03,663 --> 00:11:06,663
it's got to figure out how to map the route to an action. It's 

202
00:11:06,666 --> 00:11:09,666
exercising the subsystem that takes the data and makes it 

203
00:11:09,669 --> 00:11:12,669
available in params, which arguably is part of Rails but still, 

204
00:11:12,672 --> 00:11:16,672
it has to get exercised. Because the controller claims to call a 

205
00:11:16,676 --> 00:11:19,676
model, it exercises enough of the controller method to make sure 

206
00:11:19,679 --> 00:11:22,679
that something else is going to get called and it exercises the 

207
00:11:22,682 --> 00:11:25,682
controller's ability to figure out which view is going to be 

208
00:11:25,685 --> 00:11:28,685
rendered. It's actually not just a unit test. It actually 

209
00:11:28,688 --> 00:11:31,688
touches more than just the lines of code in the controller 

210
00:11:31,691 --> 00:11:34,691
action. We think of it as a functional test, a test that tests a 

211
00:11:34,694 --> 00:11:37,694
couple of modules, goes across a couple of boundaries, but is 

212
00:11:37,697 --> 00:11:39,697
still generally quite limited in scope as to what is being 

213
00:11:39,699 --> 00:11:43,699
tested. This lets us add another thing that we know how to do in 

214
00:11:43,703 --> 00:11:46,703
test. We already knew should receive. Now, we have this idea 

215
00:11:46,706 --> 00:11:49,706
that an object should match some condition and there are some 

216
00:11:49,709 --> 00:11:52,709
basic conditions that are built in to Rspec, but there's also 

217
00:11:52,712 --> 00:11:55,712
some Rail specific ones, like the idea that there is a response 

218
00:11:55,715 --> 00:12:00,715
object on which you can match conditions like render template. 

219
00:12:00,000 --> 00:12:02,720
That allows us to get to the point where we can ask another 

220
00:12:02,722 --> 00:12:07,722
question, after which I'll do a fun thing. Which of these looks 

221
00:12:07,727 --> 00:12:11,727
like it might be a not valid use of should or should not? We 

222
00:12:11,731 --> 00:12:14,731
could say something like, " Result should not be empty." We 

223
00:12:14,734 --> 00:12:17,734
could say, " Five should be space strip result. Result should 

224
00:12:17,737 --> 00:12:20,737
not match this regular expression," or is it the case that these 

225
00:12:20,740 --> 00:12:25,740
are all reasonable, these are all valid uses of calling should 

226
00:12:25,745 --> 00:12:27,745
or should not? Should and should not are interchangeable for the 

227
00:12:27,747 --> 00:12:31,747
purposes of this question. 


