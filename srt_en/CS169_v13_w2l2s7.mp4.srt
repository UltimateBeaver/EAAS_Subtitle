1
00:00:00,000 --> 00:00:03,000
Speaker 1: Our next topic is one of the areas, at the same

2
00:00:03,003 --> 00:00:06,003
time, one of the powerful things about Ruby and also one of 

3
00:00:06,006 --> 00:00:09,006
things that people new to the language get a little tripped up 

4
00:00:09,009 --> 00:00:12,009
on because there are features that are not nearly as common in 

5
00:00:12,012 --> 00:00:15,012
other modern languages that most people are using. Certainly not 

6
00:00:15,015 --> 00:00:20,015
so in Java, a little bit in Python but even there not so much. 

7
00:00:20,020 --> 00:00:23,020
Let's talk about blocks and iterators and the functional idioms 

8
00:00:23,023 --> 00:00:27,023
that they enable. Functional programming, if you have the good 

9
00:00:27,027 --> 00:00:31,027
fortune to take a course that no longer really exist here. It's 

10
00:00:31,031 --> 00:00:33,031
called structure and interpretation of computer programs. It 

11
00:00:33,033 --> 00:00:37,033
used to be taught in a language called Scheme. That course among 

12
00:00:37,037 --> 00:00:41,037
other things had an introduction to a really deep idea called 

13
00:00:41,041 --> 00:00:44,041
functional programming that has been in the languages community 

14
00:00:44,044 --> 00:00:46,044
for a long time. Some people including me think it doesn't 

15
00:00:46,046 --> 00:00:49,046
always get the airplay that it should. What we're going to talk 

16
00:00:49,049 --> 00:00:52,049
about in the next few minutes here is how can techniques from 

17
00:00:52,052 --> 00:00:55,052
functional programming actually help us rethink some pretty 

18
00:00:55,055 --> 00:00:59,055
basic programming concepts, for example, iteration, something we 

19
00:00:59,059 --> 00:01:02,059
do so often we take it for granted. We do for loops, we traverse 

20
00:01:02,062 --> 00:01:06,062
data structures. More importantly, why should we care? Why is it 

21
00:01:06,066 --> 00:01:09,066
worth rethinking our approaches to some of these pretty 

22
00:01:09,069 --> 00:01:12,069
fundamental programming constructs? Let's just start up with 

23
00:01:12,072 --> 00:01:16,072
some examples. As usual, you'll get used to seeing the examples 

24
00:01:16,076 --> 00:01:19,076
and you'll quickly come to realize as you use the language more 

25
00:01:19,079 --> 00:01:23,079
why these are valuable things that you can do. Here's a 

26
00:01:23,083 --> 00:01:26,083
collection of three things, an apple, a banana and a cherry, 

27
00:01:26,086 --> 00:01:29,086
it's just an array of three strings and I can say with each 

28
00:01:29,089 --> 00:01:33,089
string just print it. That looks like a loop. The tendency, if 

29
00:01:33,093 --> 00:01:36,093
you come from an emperative language like Java is to say, “ I 

30
00:01:36,096 --> 00:01:38,096
get it. That's like a way of writing a for loop over the array 

31
00:01:38,098 --> 00:01:42,098
elements.” It's not. Take it on its own merits, it's each. 

32
00:01:42,102 --> 00:01:45,102
Here's a collection and with each element of the collection do 

33
00:01:45,105 --> 00:01:49,105
something. Let's do a couple of more examples to drive that 

34
00:01:49,109 --> 00:01:53,109
home. You could do this but that's really just syntactic sugar 

35
00:01:53,113 --> 00:01:57,113
for something that's more like this. What's going on here? What 

36
00:01:57,117 --> 00:02:00,117
is this up to business? We know it's a method call, we know it's 

37
00:02:00,000 --> 00:02:03,120
a method on an integer. We know it's a method call that takes 

38
00:02:03,123 --> 00:02:07,123
one argument. It can be followed by a block. A block is just a 

39
00:02:07,127 --> 00:02:10,127
lambda expression, it's a procedure that has no name. In this 

40
00:02:10,130 --> 00:02:13,130
case it's a procedure of one argument, num. What it does it just 

41
00:02:13,133 --> 00:02:16,133
print out that num. Really, that's what it is. It's a procedure, 

42
00:02:16,136 --> 00:02:20,136
it's a function call and what I'm really saying is I'm going to 

43
00:02:20,140 --> 00:02:23,140
generate a list of numbers and for each one of them I'm going to 

44
00:02:23,143 --> 00:02:27,143
call a function passing that one thing as an argument. Here's 

45
00:02:27,147 --> 00:02:31,147
another shortcut that Ruby provides, rah, rah, rah. I've also in 

46
00:02:31,151 --> 00:02:35,151
this case substituted braces for do and and. Less common of an 

47
00:02:35,155 --> 00:02:42,155
idiom but sometimes you'll see it. Don't be too confused. There 

48
00:02:42,162 --> 00:02:46,162
we go, sorry about that. Don't be confused if you see the idiom 

49
00:02:46,166 --> 00:02:52,166
of substituting braces as opposed to substituting braces for do- 

50
00:02:52,172 --> 00:02:56,172
and. What's going on on all these other examples? I mentioned 

51
00:02:56,176 --> 00:02:58,176
this briefly in a previous lecture, what all of these examples 

52
00:02:58,178 --> 00:03:01,178
have in common is that we're allowing the objectives manage 

53
00:03:01,181 --> 00:03:05,181
their own traversal. In this case, we have a range of objects, 

54
00:03:05,185 --> 00:03:08,185
the integers one through 10 and we're saying, traverse yourself 

55
00:03:08,188 --> 00:03:12,188
and for each element that you give me back in the traversal, I'm 

56
00:03:12,192 --> 00:03:14,192
going to provide a function that you call with that element as 

57
00:03:14,194 --> 00:03:17,194
an argument. An anonymous function, an anonymous lambda 

58
00:03:17,197 --> 00:03:19,197
expression. Your friends would be really impressed if you used 

59
00:03:19,199 --> 00:03:22,199
that world regularly in a conversation. They'll also stop 

60
00:03:22,202 --> 00:03:27,202
inviting you to parties. Whatever. That's an example of range 

61
00:03:27,207 --> 00:03:31,207
traversal. What about this thing with arrays? Well, we saw that 

62
00:03:31,211 --> 00:03:34,211
we could take an array and say for each element in the array, 

63
00:03:34,214 --> 00:03:36,214
again, I'm going to give you a function and you're going to call 

64
00:03:36,216 --> 00:03:39,216
that function with each of the array elements. What's 

65
00:03:39,219 --> 00:03:41,219
interesting between these is that you have no idea as a 

66
00:03:41,221 --> 00:03:45,221
programmer internally what mechanism is being used to grab each 

67
00:03:45,225 --> 00:03:48,225
element and provide it to you. You're giving that responsibility 

68
00:03:48,228 --> 00:03:52,228
over to the target. You can do a similar thing with hashes. 

69
00:03:52,232 --> 00:03:55,232
Remember that hashes have keys and values. There's actually a 

70
00:03:55,235 --> 00:03:57,235
couple of different constructs provided for going through the 

71
00:03:57,237 --> 00:04:01,237
key value pairs. You can say for each key, give me that key and 

72
00:04:01,241 --> 00:04:05,241
do something or you could say for each key value pair, because 

73
00:04:05,245 --> 00:04:07,245
the anonymous function can take more than one argument and can 

74
00:04:07,247 --> 00:04:14,247
take zero arguments in fact. Again, the simple example I gave 

75
00:04:14,254 --> 00:04:18,254
before, 10. times, that's really just a short hand for something 

76
00:04:18,258 --> 00:04:21,258
like this except that it's an iterator of arity zero, it takes 

77
00:04:21,261 --> 00:04:24,261
no arguments because if we're saying 10 times, presumably you 

78
00:04:24,264 --> 00:04:27,264
don't' care about the value of the index. If you cared about the 

79
00:04:27,267 --> 00:04:29,267
value of the index you would do something like one of these 

80
00:04:29,269 --> 00:04:35,269
first cases. What this leads to is something that a lot of Ruby 

81
00:04:35,275 --> 00:04:38,275
programmers call expression orientation. You don't think in 

82
00:04:38,278 --> 00:04:41,278
terms of, “ I'm going to do something to this collection.” 

83
00:04:41,281 --> 00:04:44,281
Instead you think in terms of, “ Hey collection, I'm going to 

84
00:04:44,284 --> 00:04:47,284
ask you for things and I'm going to do things to your elements.” 

85
00:04:47,287 --> 00:04:50,287
For example, I can have a collection x which is just an array of 

86
00:04:50,290 --> 00:04:54,290
strings and I can say, “ Sort yourself.” I can say, “ Take your 

87
00:04:54,294 --> 00:04:56,294
unique elements.” which by the way, what is that do, it returns 

88
00:04:56,296 --> 00:05:00,296
a copy. X is not modified here, no x's have been harmed in the 

89
00:05:00,000 --> 00:05:04,300
preparation of any of these examples. I'm getting a new copy 

90
00:05:04,304 --> 00:05:08,304
which is x with the replicated elements removed and then I'm 

91
00:05:08,308 --> 00:05:13,308
going to reverse that. I get banana, cherry, apple. There are 

92
00:05:13,313 --> 00:05:15,313
versions of some of these that are dangerous. Remember, I said 

93
00:05:15,315 --> 00:05:18,315
that sometimes, if you see a function name that ends with bang, 

94
00:05:18,318 --> 00:05:21,318
it means this function is dangerous or it may have side effects, 

95
00:05:21,321 --> 00:05:25,321
so use with care. In some cases like reverse, there's variant 

96
00:05:25,325 --> 00:05:29,325
that ends in bang that does modify the receiver. X reverse bang, 

97
00:05:29,329 --> 00:05:34,329
or x reverse actually means x will be modified. There's also a 

98
00:05:34,334 --> 00:05:40,334
map. If you use language like Python or even Scheme, map is, for 

99
00:05:40,340 --> 00:05:44,340
each element of the array, I'm going to do something to each 

100
00:05:44,344 --> 00:05:48,344
element and the result is to return a new thing. Whereas the 

101
00:05:48,348 --> 00:05:51,348
result ... before, when we're traversing the elements, we're 

102
00:05:51,351 --> 00:05:54,351
just saying, “ Here's a function call and it's going to do 

103
00:05:54,354 --> 00:05:57,354
something with each element.” Map goes further and says ... 

104
00:05:57,357 --> 00:06:00,357
actually, the result of overall map is a new collection in which 

105
00:06:00,000 --> 00:06:08,360
each element is the result of calling the anonymous lambda. In 

106
00:06:08,368 --> 00:06:12,368
this example, I take my original collection of fruits and for 

107
00:06:12,372 --> 00:06:15,372
each element in the collection I'm going to call reverse which 

108
00:06:15,375 --> 00:06:17,375
reverses the string, which turns a new copy of the string with 

109
00:06:17,377 --> 00:06:22,377
the elements reversed. The result of this intermediate step is 

110
00:06:22,382 --> 00:06:25,382
just an array in which each of the words has been individually 

111
00:06:25,385 --> 00:06:28,385
reversed. By the way, since the result of the overall map is 

112
00:06:28,388 --> 00:06:31,388
itself a new collection, I can call sort on that. What you'll 

113
00:06:31,391 --> 00:06:36,391
see in Ruby is you'll see A. B. C. D, you build up a list of 

114
00:06:36,396 --> 00:06:39,396
things you want to do. It's almost like a UNIX pipeline, but the 

115
00:06:39,399 --> 00:06:43,399
idea that everything returns a copy of something and has a 

116
00:06:43,403 --> 00:06:46,403
value, it evaluates as an expression and then you can continue 

117
00:06:46,406 --> 00:06:49,406
to do more things on that expression. That way of thinking 

118
00:06:49,409 --> 00:06:51,409
really comes from functional programming. We're going to see 

119
00:06:51,411 --> 00:06:55,411
some cases where it's very, very useful. Here's another one that 

120
00:06:55,415 --> 00:06:58,415
reve provides, collect which says, “ Give me every element of 

121
00:06:58,418 --> 00:07:02,418
your collection and I'm going to collect all the elements for 

122
00:07:02,422 --> 00:07:06,422
which this function returns a true value.” One thing that you 

123
00:07:06,426 --> 00:07:09,426
can test for is whether a string includes a character. You can 

124
00:07:09,429 --> 00:07:12,429
test whether an array includes a character. In a moment we'll 

125
00:07:12,432 --> 00:07:14,432
talk about why things like include seem to work all over the 

126
00:07:14,434 --> 00:07:17,434
place with many different classes. I can ask, “ Is it the case 

127
00:07:17,437 --> 00:07:21,437
that any of these elements satisfies a particular condition?” 

128
00:07:21,441 --> 00:07:25,441
There's a real life example of it. I would suggest you check out 

129
00:07:25,445 --> 00:07:27,445
offline because I don't want to take the time to walk through it 

130
00:07:27,447 --> 00:07:33,447
on this video. Just to give you a preview of it, I'll just show 

131
00:07:33,453 --> 00:07:36,453
you the code, we're not going to walkthrough in depth right now. 

132
00:07:36,456 --> 00:07:38,456
Anybody have a clipper card who lives in the Bay area, it's your 

133
00:07:38,458 --> 00:07:41,458
public transit card and you can check your balance online and 

134
00:07:41,461 --> 00:07:43,461
things like that. I wanted to write a script that would 

135
00:07:43,463 --> 00:07:48,463
basically let me go to a single URL and check my balance without 

136
00:07:48,468 --> 00:07:52,468
having to login to their website which I'm not a huge fan of. I 

137
00:07:52,472 --> 00:07:54,472
use the library called Mechanize which lets you write scripts 

138
00:07:54,474 --> 00:07:58,474
against your remote web server. I created a new mechanized 

139
00:07:58,478 --> 00:08:03,478
object. I post to the URL of the clipper site with my username 

140
00:08:03,483 --> 00:08:06,483
and password. Notice the dot at the end of every one of these 

141
00:08:06,486 --> 00:08:10,486
lines. This is all one line. Remember, I said A. B. C. I'm 

142
00:08:10,490 --> 00:08:13,490
calling a variety of different methods to build up this 

143
00:08:13,493 --> 00:08:17,493
expression. I'm posting a form. The result of posting form is 

144
00:08:17,497 --> 00:08:20,497
whatever their site sends back then I'm going to look for a link 

145
00:08:20,500 --> 00:08:23,500
that has this H ref, click on that link, parse the resulting 

146
00:08:23,503 --> 00:08:26,503
page looking for these HTML elements. Go to the first row of the 

147
00:08:26,506 --> 00:08:29,506
table, go to the second, third column and look for content that 

148
00:08:29,509 --> 00:08:32,509
matches a dollar sign followed by a decimal amount and return 

149
00:08:32,512 --> 00:08:36,512
HTML. That's one statement kids. I'm not saying that was 

150
00:08:36,516 --> 00:08:39,516
beautiful code, don't get me wrong. I needed something quick and 

151
00:08:39,519 --> 00:08:41,519
dirty that would work. The fact that I was able to write that in 

152
00:08:41,521 --> 00:08:45,521
such a compact way is really what I'm talking about. 


