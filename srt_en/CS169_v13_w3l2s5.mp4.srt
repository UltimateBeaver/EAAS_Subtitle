1
00:00:00,000 --> 00:00:03,000
Okay, the tour continues. So, we talked about Model- View- 

2
00:00:03,003 --> 00:00:05,003
Controller, we talked about models, and we're going to talk 

3
00:00:05,005 --> 00:00:09,005
about controllers next. And really, the important thing about 

4
00:00:09,009 --> 00:00:11,009
controllers is the special concept called REST, that is one of 

5
00:00:11,011 --> 00:00:14,011
these things people argue a lot about. But the basics of it are 

6
00:00:14,014 --> 00:00:17,014
not difficult to understand, and really, not that difficult to 

7
00:00:17,017 --> 00:00:22,017
get right. And the question that REST really answers is, " Given 

8
00:00:22,022 --> 00:00:24,022
that we believe Service- Oriented Architecture is a beneficial 

9
00:00:24,024 --> 00:00:28,024
way to organize services on the Web, what are some design 

10
00:00:28,028 --> 00:00:31,028
decisions that would allow our app to more readily support being 

11
00:00:31,031 --> 00:00:34,031
part of a Service- Oriented Architecture?" Or, another way to 

12
00:00:34,034 --> 00:00:36,034
look at it is, " What are poor design decisions that would make 

13
00:00:36,036 --> 00:00:39,036
it difficult for an app to participate in a Service- Oriented 

14
00:00:39,039 --> 00:00:43,039
Architecture?" So, continuing our tour, we're still here in this 

15
00:00:43,043 --> 00:00:46,043
middle tier, where the action happens in the app server. And 

16
00:00:46,046 --> 00:00:49,046
we're now going to look at controllers, and the relationship 

17
00:00:49,049 --> 00:00:54,049
controllers, URIs, and REST. So, REST stands for 

18
00:00:54,054 --> 00:00:58,054
Representational State Transfer, another sort of $ 20- dollar 

19
00:00:58,058 --> 00:01:01,058
word. Roy Fielding wrote about this in his PhD dissertation in 

20
00:01:01,061 --> 00:01:05,061
2000. And the words I'm using here are not the ones he used, but 

21
00:01:05,065 --> 00:01:08,065
I'm trying to convey the essence of what it is, because the idea 

22
00:01:08,068 --> 00:01:11,068
is relatively simple and straightforward. The idea is, " Don't 

23
00:01:11,071 --> 00:01:15,071
think about a URI as naming a page, or naming an action that 

24
00:01:15,075 --> 00:01:18,075
you're going to do. Think about it as naming a resource, and a 

25
00:01:18,078 --> 00:01:21,078
thing that you want to do to that resource." And the word 

26
00:01:21,081 --> 00:01:24,081
resource is very broadly defined here, right. The idea is, that 

27
00:01:24,084 --> 00:01:28,084
a resource could be a movie, and all the information about that 

28
00:01:28,088 --> 00:01:31,088
movie in Rotten Potatoes. A resource could be the list of all 

29
00:01:31,091 --> 00:01:34,091
movies that we know about. A resource could be the list of all 

30
00:01:34,094 --> 00:01:37,094
movies that match some criteria, and having a particular string 

31
00:01:37,097 --> 00:01:40,097
be part of their name, or having a particular MPAA rating. Those 

32
00:01:40,100 --> 00:01:44,100
are all resources. In fact, a resource can even the response of 

33
00:01:44,104 --> 00:01:46,104
trying to create a new movie. When I create a new movie, I've 

34
00:01:46,106 --> 00:01:49,106
created a new resource, and all I need to know was, " Did 

35
00:01:49,109 --> 00:01:53,109
creating that resource succeed or not?" So, start thinking about 

36
00:01:53,113 --> 00:01:56,113
the way that your URIs are expressing resources and things that 

37
00:01:56,116 --> 00:01:59,116
you want to do to them, in a self- contained manner. And, in 

38
00:01:59,119 --> 00:02:03,119
fact, the Wikipedia article for REST, I don't know if it still 

39
00:02:03,123 --> 00:02:06,123
contains this phrase, but it once did. " REST is really an 

40
00:02:06,126 --> 00:02:09,126
after- the- fact description of the features that made 

41
00:02:09,129 --> 00:02:12,129
successful Web services be successful." So, if you have a 

42
00:02:12,132 --> 00:02:15,132
service, if the sense of a Service- Oriented Architecture 

43
00:02:15,135 --> 00:02:18,135
Service whose operations follow these principles, then we say 

44
00:02:18,138 --> 00:02:22,138
it's a RESTful service, and it has a RESTful API. And, in such a 

45
00:02:22,142 --> 00:02:25,142
service, RESTful URIs name the operations that you do, and the 

46
00:02:25,145 --> 00:02:28,145
resources that you do them on. This is much easier to do if we 

47
00:02:28,148 --> 00:02:33,148
show a concrete example. So, to do that, I'll give a very brief 

48
00:02:33,153 --> 00:02:35,153
introduction, because we're going to talk about this in more 

49
00:02:35,155 --> 00:02:39,155
detail when we go back to exploring Rails, to how Rails allows 

50
00:02:39,159 --> 00:02:42,159
you to set up mappings between URIs and the controller. Because 

51
00:02:42,162 --> 00:02:44,162
remember, the controller is where all the action originates, 

52
00:02:44,164 --> 00:02:47,164
right. When a request comes in from the user, a controller is 

53
00:02:47,167 --> 00:02:50,167
where it hits first, and when there's stuff ready to be returned 

54
00:02:50,170 --> 00:02:57,170
to the user, the controller, it mediates that interaction. So, 

55
00:02:57,177 --> 00:03:01,177
what does Rails give you to help you to do this? A route in RAIL 

56
00:03:01,181 --> 00:03:05,181
is basically a mapping from a URI at an HTTP method, like GET or 

57
00:03:05,185 --> 00:03:09,185
POST or PUT, to a controller action. Here is a few examples that 

58
00:03:09,189 --> 00:03:14,189
are RESTful. If I say something like, " GET / movies/ 3", this 

59
00:03:14,194 --> 00:03:17,194
could be a way to represent whichever movie has the ID3 in the 

60
00:03:17,197 --> 00:03:20,197
database, I want information about it. Now, don't worry for the 

61
00:03:20,200 --> 00:03:23,200
moment about the fact that most end users are not going to know 

62
00:03:23,203 --> 00:03:27,203
the IDs of things in some random database behind your app. Think 

63
00:03:27,207 --> 00:03:29,207
just in terms of, " Assuming that we know the resource, and it 

64
00:03:29,209 --> 00:03:33,209
has a unique name, how do we construct resource requests that 

65
00:03:33,213 --> 00:03:35,213
name the thing that we want to operate on, and what we want to 

66
00:03:35,215 --> 00:03:40,215
do to that thing." Here's another example. When I submit a form, 

67
00:03:40,220 --> 00:03:43,220
and I POST to the URL "/ movies", the interpretation can be, " 

68
00:03:43,223 --> 00:03:46,223
I'm creating a new movie, and here is the data that I'm going to 

69
00:03:46,226 --> 00:03:49,226
use, the data to populate the attributes of that new movie 

70
00:03:49,229 --> 00:03:54,229
object." I could also say," I'm going to define " PUT / movies/ 

71
00:03:54,234 --> 00:03:58,234
5" to mean, " If there's a movie whose ID is 5, and it exists in 

72
00:03:58,238 --> 00:04:01,238
the database, here is some new data to replace the current 

73
00:04:01,241 --> 00:04:03,241
attributes of that movie." Now, if you've done some Web 

74
00:04:03,243 --> 00:04:06,243
programming before, you've probably already are getting ready to 

75
00:04:06,246 --> 00:04:09,246
say, " Web browsers don't support PUT and DELETE, even though 

76
00:04:09,249 --> 00:04:13,249
HTTP defines them. Web browsers only support GET and POST." That 

77
00:04:13,253 --> 00:04:17,253
is true, but first of all, Rails provides some interesting 

78
00:04:17,257 --> 00:04:20,257
machinery to, essentially, simulate doing PUT and DELETEs. And 

79
00:04:20,260 --> 00:04:23,260
why would you want to do that? Because the way that we want to 

80
00:04:23,263 --> 00:04:26,263
think about our apps is not, " This is a user- facing app that's 

81
00:04:26,266 --> 00:04:29,266
a bunch of Web pages." We want to think about it as, " This app 

82
00:04:29,269 --> 00:04:31,269
is a collection of services, things that you can do to 

83
00:04:31,271 --> 00:04:35,271
resources. One way to interact with those resources is to serve 

84
00:04:35,275 --> 00:04:38,275
Web pages with which human beings interact." Or monkeys or 

85
00:04:38,278 --> 00:04:41,278
whatever. But another way to interact with that service is, I 

86
00:04:41,281 --> 00:04:44,281
could write an application that just makes HTTP calls against my 

87
00:04:44,284 --> 00:04:46,284
app. In fact, in an upcoming homework assignment, you're going 

88
00:04:46,286 --> 00:04:50,286
to do just that. You're going to make HTTP calls against the 

89
00:04:50,290 --> 00:04:53,290
Oracle of Bacon website. More about that in a future lecture. 

90
00:04:53,293 --> 00:04:58,293
So, what does the routing subsystem give you? Basically, it 

91
00:04:58,298 --> 00:05:00,298
gives you a bunch of machinery to take a URI and a method, 

92
00:05:00,000 --> 00:05:03,300
right, collectively, those two things together are a route. And 

93
00:05:03,303 --> 00:05:06,303
to map those to the correct controller action, so you know where 

94
00:05:06,306 --> 00:05:10,306
in your app the code is going to be called, to handle that URI. 

95
00:05:10,310 --> 00:05:12,310
It provides a bunch of helper methods that you can use to 

96
00:05:12,312 --> 00:05:16,312
generate the correct URI, given a controller action. So, again, 

97
00:05:16,316 --> 00:05:18,316
don't think about, when you're serving a page to the user, it's 

98
00:05:18,318 --> 00:05:20,318
going to have some links to allow the user to do other stuff. 

99
00:05:20,320 --> 00:05:22,320
You don't want to think in terms of links. You want to think in 

100
00:05:22,322 --> 00:05:25,322
terms of, " What new operations on resources am I going to 

101
00:05:25,325 --> 00:05:28,325
expose to the user?" And Rails provides a machinery for you to 

102
00:05:28,328 --> 00:05:32,328
take that information, and it will generate the correct URI, 

103
00:05:32,332 --> 00:05:37,332
based on your stated scheme of how you want to map your routes. 

104
00:05:37,337 --> 00:05:41,337
If you include parameters. If you looked at the textbook section 

105
00:05:41,341 --> 00:05:44,341
on URIs, you can embed parameters in the URI. There's machinery 

106
00:05:44,344 --> 00:05:47,344
to pull all that stuff out, so your controller method can get at 

107
00:05:47,347 --> 00:05:50,347
it. And there's built- in shortcuts, because the CRUD actions 

108
00:05:50,350 --> 00:05:53,350
are so common, there are built- in shortcuts to generate 

109
00:05:53,353 --> 00:05:56,353
automatically all of the CRUD routes for you, so that you don't 

110
00:05:56,356 --> 00:05:59,356
have to actually specify those mappings one- by- one. So, for 

111
00:05:59,359 --> 00:06:01,359
example, when you create a new app, and you say, " Here's a 

112
00:06:01,361 --> 00:06:04,361
thing in my app, movies are a thing. Movies are a resource that 

113
00:06:04,364 --> 00:06:08,364
I'm going to manipulate." For free, Rails will define all of 

114
00:06:08,368 --> 00:06:12,368
these routes, and create mappings to standardly- named methods 

115
00:06:12,372 --> 00:06:15,372
in your controller that are going to handle those actions. Now, 

116
00:06:15,375 --> 00:06:18,375
of course, you can create your own routes as well. You're going 

117
00:06:18,378 --> 00:06:20,378
to have a lot more things in your app than just basic CRUD on a 

118
00:06:20,380 --> 00:06:23,380
remodel. That wouldn't be a terribly interesting app. But, the 

119
00:06:23,383 --> 00:06:25,383
idea that you get these for free, and that, the way you get them 

120
00:06:25,385 --> 00:06:28,385
is by saying, " Movies are a resource," really is what 

121
00:06:28,388 --> 00:06:31,388
exemplifies the thinking that apps are really a collection of 

122
00:06:31,391 --> 00:06:34,391
RESTful services. And, oh yeah, a way that you can interact with 

123
00:06:34,394 --> 00:06:38,394
it is, you put a Web page in front of it. So, what exactly 

124
00:06:38,398 --> 00:06:41,398
happens, according to the scheme, " if I have an HTTP request 

125
00:06:41,401 --> 00:06:46,401
like GET / movies/ 3/ edit"? Right, that's one of the automatic 

126
00:06:46,406 --> 00:06:50,406
routes that's created for you by Rails, that means, " Invoke the 

127
00:06:50,410 --> 00:06:53,410
edit action on the controller associated with that resource." 

128
00:06:53,413 --> 00:06:57,413
What goes on behind the scenes when your browser generates that 

129
00:06:57,417 --> 00:07:00,417
request, and it hits your Rails app? Well, the first thing is 

130
00:07:00,000 --> 00:07:04,420
that, Rails' routing subsystem will match the URL, it will try 

131
00:07:04,424 --> 00:07:07,424
to match against one of the routes that's in the route table. In 

132
00:07:07,427 --> 00:07:11,427
this case, it matches the route that I've highlighted in yellow, 

133
00:07:11,431 --> 00:07:14,431
because the tokens that begin with a colon are like a wild card. 

134
00:07:14,434 --> 00:07:18,434
So, what'll actually happen is, the route will match, and the ID 

135
00:07:18,438 --> 00:07:23,438
portion of the route will be set to match the number 3 in the 

136
00:07:23,443 --> 00:07:26,443
URI. So, it'll parse the wild card parameters. Those actually 

137
00:07:26,446 --> 00:07:29,446
end up getting put in a hash that your controller can access for 

138
00:07:29,449 --> 00:07:33,449
free. Then, it'll dispatch to the edit method. Why? Because the 

139
00:07:33,453 --> 00:07:37,453
route specifies that, if the URI matches this pattern, it should 

140
00:07:37,457 --> 00:07:41,457
go to the edit action, or the edit Ruby method in the movies 

141
00:07:41,461 --> 00:07:45,461
controller. And, if I wanted then, as part of my controller 

142
00:07:45,465 --> 00:07:48,465
action, I want to generate a view that will cause the user to 

143
00:07:48,468 --> 00:07:52,468
submit a form to update that movie. So, what does that form have 

144
00:07:52,472 --> 00:07:57,472
to contain? It has to contain a submission URI that looks like 

145
00:07:57,477 --> 00:07:59,477
the one that's highlighted in yellow here, right. I need a form 

146
00:07:59,479 --> 00:08:03,479
that will cause this to happen when submitted. The bad, old- 

147
00:08:03,483 --> 00:08:06,483
school way that you would do this is, you would manually embed 

148
00:08:06,486 --> 00:08:10,486
in your view, in your HTML view, you would embed a hard- coded 

149
00:08:10,490 --> 00:08:13,490
URI to do that. What you do in Rails is, you say, " What I want 

150
00:08:13,493 --> 00:08:16,493
to do is, give the user a URI that will cause an update to movie 

151
00:08:16,496 --> 00:08:19,496
ID 5." And then it will generate the URI for you. Why would you 

152
00:08:19,499 --> 00:08:22,499
do it this way? Because if your route- naming scheme ever 

153
00:08:22,502 --> 00:08:24,502
changes, you don't want to have to go through and manually 

154
00:08:24,504 --> 00:08:26,504
change all the hard- wired routes that you created, right. You 

155
00:08:26,506 --> 00:08:29,506
want to be thinking in terms of resources and operations on 

156
00:08:29,509 --> 00:08:32,509
resources. And the mapping really is incidental, that's why that 

157
00:08:32,512 --> 00:08:34,512
part is handled for you. We're going to have a lot more to say 

158
00:08:34,514 --> 00:08:37,514
about routes and controllers when we do our walkthrough of Rails 

159
00:08:37,517 --> 00:08:40,517
apps. But I wanted to give you a flavor of what RESTfulness 

160
00:08:40,520 --> 00:08:43,520
looks like when you implement it in practice. 


