1
00:00:00,000 --> 00:00:02,000
I'm going to try to tie together some of the things that we've 

2
00:00:02,002 --> 00:00:06,002
been talking about in TDD and I'm going to try to convince you 

3
00:00:06,006 --> 00:00:09,006
that even for those of you for whom TDD appears to be a new 

4
00:00:09,009 --> 00:00:12,009
thing. You actually already know how to do it because you've 

5
00:00:12,012 --> 00:00:14,012
been doing all of the same things already, you just been doing 

6
00:00:14,014 --> 00:00:18,014
them really ineffectively. Before you do that let me just 

7
00:00:18,018 --> 00:00:21,018
quickly go through a set of other testing terms you might hear. 

8
00:00:21,021 --> 00:00:23,021
Testings has been around for a long time, there's different 

9
00:00:23,023 --> 00:00:27,023
vocabulary concepts and terms that have come up around besides 

10
00:00:27,027 --> 00:00:31,027
the ones that we commonly use. Mutation testing is a really 

11
00:00:31,031 --> 00:00:34,031
interesting idea which is basically if I introduce a deliberate 

12
00:00:34,034 --> 00:00:37,034
error into the app does some test fail. Because if not then 

13
00:00:37,037 --> 00:00:40,037
there's probably a hole in your testing coverage somewhere. In 

14
00:00:40,040 --> 00:00:45,040
fact as a preview this is essentially how we're going to test. 

15
00:00:45,045 --> 00:00:47,045
There's a homework that we're going to give out where you guys 

16
00:00:47,047 --> 00:00:49,047
actually going to write your own cucumber scenarios and this is 

17
00:00:49,049 --> 00:00:51,049
basically how we're going to test it. We have a version of the 

18
00:00:51,051 --> 00:00:54,051
app where we can insert bugs and make sure that you have some 

19
00:00:54,054 --> 00:00:59,054
scenario steps that fail because of those bugs. Fuzz testing, 

20
00:00:59,059 --> 00:01:02,059
this is a scenario called monkey testing, you basically generate 

21
00:01:02,062 --> 00:01:07,062
random random inputs for your code. In fuzz testing basically 

22
00:01:07,067 --> 00:01:09,067
you try to exercise the code in ways it wasn't design to be 

23
00:01:09,069 --> 00:01:11,069
used. If it was a command line program you can just actually 

24
00:01:11,071 --> 00:01:15,071
type input at the command line for a SAS application, it's 

25
00:01:15,075 --> 00:01:18,075
things like having forms that are submitted with random values 

26
00:01:18,078 --> 00:01:22,078
or values that are way too long or values that have illegal 

27
00:01:22,082 --> 00:01:26,082
characters in them. Microsoft says that they found about 20% of 

28
00:01:26,086 --> 00:01:29,086
their bugs this way. There are fuzz test that can crash up to 

29
00:01:29,089 --> 00:01:33,089
25% of the popular Unix command line utilities. This is a 

30
00:01:33,093 --> 00:01:35,093
powerful technique once you've done the basic level of testing, 

31
00:01:35,095 --> 00:01:38,095
if you do this before you've done your basic level of testing 

32
00:01:38,098 --> 00:01:41,098
you'll despair because any random input will break your app 

33
00:01:41,101 --> 00:01:44,101
because it'll be brittle. DU- coverage which is for define and 

34
00:01:44,104 --> 00:01:48,104
use. This is another variant of how you measure test coverage. 

35
00:01:48,108 --> 00:01:51,108
If you look at every place where you've got some variable that's 

36
00:01:51,111 --> 00:01:54,111
define meaning a value gets to sign to it and sometime later 

37
00:01:54,114 --> 00:02:00,114
somebody consumes that value and the number of pairs of those is 

38
00:02:00,000 --> 00:02:02,120
multiplicative in the number of references because if I define a 

39
00:02:02,122 --> 00:02:05,122
variable and there's three different code pass that could 

40
00:02:05,125 --> 00:02:08,125
consume the value that I set that's three different DU pairs. 

41
00:02:08,128 --> 00:02:11,128
Another way that you can look at coverage is of all possible DU 

42
00:02:11,131 --> 00:02:14,131
pairs what fraction of them are exercise somewhere in my test 

43
00:02:14,134 --> 00:02:18,134
suite. Lastly you'll probably hear terms black box testing 

44
00:02:18,138 --> 00:02:21,138
versus white box testing or sometimes people call it glass box 

45
00:02:21,141 --> 00:02:25,141
rather than white box. The idea is a black box test is what you 

46
00:02:25,145 --> 00:02:28,145
do when you either don't have much information about the 

47
00:02:28,148 --> 00:02:30,148
implementation or you're really just concern in testing against 

48
00:02:30,150 --> 00:02:35,150
an external spec as oppose to a white box test where you know 

49
00:02:35,155 --> 00:02:37,155
something about the implementation and your test cases are 

50
00:02:37,157 --> 00:02:40,157
design to stress the thing you know. An easy example of this is 

51
00:02:40,160 --> 00:02:43,160
if you're coding a hash table, the black box definition of a 

52
00:02:43,163 --> 00:02:46,163
hash table is given a key can you get back the right value but 

53
00:02:46,166 --> 00:02:49,166
if you know something about what hash function is used inside 

54
00:02:49,169 --> 00:02:52,169
the hash table you might create a glass box or a white box test 

55
00:02:52,172 --> 00:02:54,172
that deliberately tries to create hash collision because you 

56
00:02:54,174 --> 00:02:58,174
know how it works. Again, there's some new ones in what you are 

57
00:02:58,178 --> 00:03:01,178
trying to test but if you hear the terms black box or white box 

58
00:03:01,181 --> 00:03:04,181
that's what it's referring to. This is where I try to convince 

59
00:03:04,184 --> 00:03:07,184
you that you already know how to do TDD you've just been doing 

60
00:03:07,187 --> 00:03:10,187
it in the wrong order. This is how I use to write code, I have 

61
00:03:10,190 --> 00:03:13,190
been saves I hope you too can be saved. But I used to write a 

62
00:03:13,193 --> 00:03:16,193
bunch of lines which I was sure was correct, I would run the 

63
00:03:16,196 --> 00:03:18,196
lines of course there'd be a bug and " Ah, that's a stupid bug. 

64
00:03:18,198 --> 00:03:21,198
That wasn't me that was just stupidity." No problem. I'll 

65
00:03:21,201 --> 00:03:24,201
breakout the debugger. I'll look at the values of things. I'll 

66
00:03:24,204 --> 00:03:28,204
put in some print ups to make sure I know where the code is. 

67
00:03:28,208 --> 00:03:31,208
Once I've stop in the debugger I can tweak or set other 

68
00:03:31,211 --> 00:03:34,211
variables and make sure that the right thing happens. " Okay 

69
00:03:34,214 --> 00:03:37,214
continue. Oh, it didn't work." Once I've fixed it I'm sure I 

70
00:03:37,217 --> 00:03:40,217
fixed it and now that's the last bug ever and of course it never 

71
00:03:40,220 --> 00:03:43,220
is. All of these same steps occur in TDD just in a different 

72
00:03:43,223 --> 00:03:46,223
order. You write a few lines but you write the test first you'll 

73
00:03:46,226 --> 00:03:49,226
know immediately you wrote something stupid. Instead of writing 

74
00:03:49,229 --> 00:03:51,229
a bunch of lines, " Oh, I made a spelling error," figure it out 

75
00:03:51,231 --> 00:03:56,231
now instead of later when your brain in some place else. Instead 

76
00:03:56,236 --> 00:03:58,236
of having to put print ups everywhere just mark or stub the 

77
00:03:58,238 --> 00:04:02,238
things you want and use an expectation to say at this point this 

78
00:04:02,242 --> 00:04:05,242
value or this variable ought to have this value. Use something 

79
00:04:05,245 --> 00:04:07,245
should equal or you should receive when you're talking about a 

80
00:04:07,247 --> 00:04:11,247
method being called. What about the part where I stopped in an 

81
00:04:11,251 --> 00:04:13,251
interactive debugger and then I kind of try to very carefully 

82
00:04:13,253 --> 00:04:16,253
setup the world so that I know which code path is going to come 

83
00:04:16,256 --> 00:04:20,256
next that's what marks and stubs are for. We can return canned 

84
00:04:20,260 --> 00:04:23,260
values from method calls and Seams so that we know which code 

85
00:04:23,263 --> 00:04:27,263
path it's going to move down. Finally when I get to the part 

86
00:04:27,267 --> 00:04:30,267
where I was sure that I fixed it but it turns out I was wrong, 

87
00:04:30,270 --> 00:04:32,270
if you've already done this with the test you just rerun the 

88
00:04:32,272 --> 00:04:35,272
test, you have auto test run it for you and you keep making 

89
00:04:35,275 --> 00:04:38,275
tweaks until you get it right. You've actually already done all 

90
00:04:38,278 --> 00:04:41,278
of the things that TDD requires. Really this is just about doing 

91
00:04:41,281 --> 00:04:45,281
them in a different order but it's all the same skill set. My 

92
00:04:45,285 --> 00:04:48,285
view that it's the same skills you've already developed but you 

93
00:04:48,288 --> 00:04:51,288
put them ... you make them more productive. The second lesson 

94
00:04:51,291 --> 00:04:54,291
which is less obvious is that writing test before the code it 

95
00:04:54,294 --> 00:04:57,294
does feel like it takes more time upfront and it does take more 

96
00:04:57,297 --> 00:05:00,297
time upfront because you don't realize that you're getting a 

97
00:05:00,000 --> 00:05:02,300
free benefit from doing it. It forcing you to think about how 

98
00:05:02,302 --> 00:05:05,302
the code will be used. It is remarkable common ... I guarantee 

99
00:05:05,305 --> 00:05:07,305
the following is going to happen at least once, you're going to 

100
00:05:07,307 --> 00:05:11,307
write a method that you know you're going to need and you know 

101
00:05:11,311 --> 00:05:13,311
what argument it takes and you know what it supposed to return, 

102
00:05:13,313 --> 00:05:15,313
you coded it up, you're proud of yourself. Now you go back to 

103
00:05:15,315 --> 00:05:18,315
the part of the code that was going to use that method that's 

104
00:05:18,318 --> 00:05:20,318
going to call it and you realize that you actually weren't quite 

105
00:05:20,320 --> 00:05:22,320
right about how you're going to call it. There's actually an 

106
00:05:22,322 --> 00:05:25,322
additional argument you didn't realized you needed to pass or 

107
00:05:25,325 --> 00:05:27,325
actually the return value isn't quite what you wanted. It be 

108
00:05:27,327 --> 00:05:30,327
more convenient if the return value is different. When you're 

109
00:05:30,330 --> 00:05:33,330
doing TDD it forces you to think about that stuff upfront and 

110
00:05:33,333 --> 00:05:35,333
that's why it takes longer. You're doing little kind of bits of 

111
00:05:35,335 --> 00:05:38,335
design as you go by the time get backfill in the method, like I 

112
00:05:38,338 --> 00:05:41,338
said the hard part has been done. You figured out the structure 

113
00:05:41,341 --> 00:05:44,341
of the code and what you need to test about it. Actually writing 

114
00:05:44,344 --> 00:05:48,344
the code given those constraints is the much easier job. Here's 

115
00:05:48,348 --> 00:05:51,348
what I believe we've learned about TDD. You learn about this 

116
00:05:51,351 --> 00:05:53,351
idea of red - green - refactor and make sure the test fails for 

117
00:05:53,353 --> 00:05:56,353
the correct reason then backfill the code and always look for 

118
00:05:56,356 --> 00:05:59,356
opportunities to beautify. Your goal is to spend most every time 

119
00:05:59,359 --> 00:06:03,359
in green. You have to go red when you're adding a new test and 

120
00:06:03,363 --> 00:06:05,363
as soon as you add it write the minimum amount of code to go 

121
00:06:05,365 --> 00:06:08,365
back to green. Think of it as trying to always go back to the 

122
00:06:08,368 --> 00:06:12,368
stable state. Test one behavior at a time and we've seen how you 

123
00:06:12,372 --> 00:06:15,372
could Seams to sort of intimately control what happens in each 

124
00:06:15,375 --> 00:06:19,375
test case. Use place holders. We saw some examples when we first 

125
00:06:19,379 --> 00:06:22,379
started developing these that even just saying it should do such 

126
00:06:22,382 --> 00:06:25,382
and such without filling them the test code at least it serves 

127
00:06:25,385 --> 00:06:28,385
as a place holder to you to remind you that you've got to come 

128
00:06:28,388 --> 00:06:31,388
back to that test. You can even use the pending keywords that 

129
00:06:31,391 --> 00:06:33,391
you'll see a little message printed out in yellow every time you 

130
00:06:33,393 --> 00:06:37,393
run that case through our spec. Look at the coverage reports. We 

131
00:06:37,397 --> 00:06:39,397
will have you run simple cup as part of your overall test 

132
00:06:39,399 --> 00:06:43,399
coverage. It's worth using them not to get sort of religious 

133
00:06:43,403 --> 00:06:46,403
about where you needed to get 100% coverage but the point the 

134
00:06:46,406 --> 00:06:50,406
parts area code that are clear under tested. Kind of in hand and 

135
00:06:50,410 --> 00:06:52,410
hand with that is don't rely too helpfully on anyone kind of 

136
00:06:52,412 --> 00:06:54,412
test. There's a reason that many different kinds of test has 

137
00:06:54,414 --> 00:06:58,414
evolved overtime and one of those reasons is that different 

138
00:06:58,418 --> 00:07:01,418
types of test will catch different errors. Here's a quick 

139
00:07:01,421 --> 00:07:05,421
question about testing. Which non- obvious statement is false? 

140
00:07:05,425 --> 00:07:08,425
Even a 100% test coverage which ever metric you want to pick is 

141
00:07:08,428 --> 00:07:11,428
not a guarantee of bug freedom. If you can stimulate a bug- 

142
00:07:11,431 --> 00:07:13,431
causing condition using a debugger then you can capture it in a 

143
00:07:13,433 --> 00:07:17,433
test. Testing eliminates the use of debugger, assuming you've 

144
00:07:17,437 --> 00:07:20,437
done the second thing. When you change your code, you need to 

145
00:07:20,440 --> 00:07:24,440
change your tests as well. Which of these four is false? 


