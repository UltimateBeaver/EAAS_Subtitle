1
00:00:00,000 --> 00:00:02,000
We're going to talk about ugly code, which is something you 

2
00:00:02,002 --> 00:00:04,002
probably don't spend a— hopefully you don't spend a lot of time 

3
00:00:04,004 --> 00:00:08,004
talking about that. Can we do something beyond just correctness? 

4
00:00:08,008 --> 00:00:14,008
Can we talk about beauty of a code? What's our guidelines on how 

5
00:00:14,014 --> 00:00:18,014
to make beautiful code? Can we actually evaluate beauty 

6
00:00:18,018 --> 00:00:23,018
qualitatively? Can we do it quantitatively? How well will these 

7
00:00:23,023 --> 00:00:26,023
tools work, these metrics work? Then, do we have tools to be 

8
00:00:26,026 --> 00:00:30,026
able to help that out? That's our motivating question. We’ re 

9
00:00:30,030 --> 00:00:32,030
going to start off with smells. We're going to talk about 

10
00:00:32,032 --> 00:00:36,032
smells. Does code smell funny? That actually has a technical 

11
00:00:36,036 --> 00:00:42,036
concept associated with it, and people do write these books 

12
00:00:42,042 --> 00:00:47,042
about smelly code. Depending on what you refer to, there's 20 

13
00:00:47,047 --> 00:00:51,047
common mistakes, code smells, [ Code Smeller 60 00:51] depending 

14
00:00:51,051 --> 00:00:55,051
on what you do about that. We'll give you some examples of that 

15
00:00:55,055 --> 00:00:59,055
going ahead, but one idea that we wanted to get across was a way 

16
00:00:59,059 --> 00:01:04,059
to avoid smelly code. We use the SOFA acronym. First of all, is 

17
00:01:04,064 --> 00:01:06,064
it short? We're talking about kind of a method at a time doing 

18
00:01:06,066 --> 00:01:10,066
it, so keeping the method short makes it less likely to smell. 

19
00:01:10,070 --> 00:01:14,070
Does it do just one thing versus doing lots of things? Does it 

20
00:01:14,074 --> 00:01:18,074
have a few arguments to the method or lots of arguments? 

21
00:01:18,078 --> 00:01:22,078
Finally, is it a consistent level of abstraction? What tends to 

22
00:01:22,082 --> 00:01:26,082
happen is that smelly code tends to violate a bunch of these 

23
00:01:26,086 --> 00:01:30,086
things, and these will help make your code more fragrant. It got 

24
00:01:30,090 --> 00:01:34,090
started short. What does short mean? In the good old days 

25
00:01:34,094 --> 00:01:37,094
terminals were 24 lines, baby characters, so pretty much short 

26
00:01:37,097 --> 00:01:41,097
was it fit on one screen. These days with modern big old 

27
00:01:41,101 --> 00:01:44,101
displays, you could get hundreds of lines of code. Fitting on 

28
00:01:44,104 --> 00:01:48,104
one giant display isn't short. The idea is you kind of look at 

29
00:01:48,108 --> 00:01:53,108
it and figure out what it's doing. There is a tool for this. 

30
00:01:53,113 --> 00:01:57,113
Because it's about smells, it's called Reek. Reek does it— it 

31
00:01:57,117 --> 00:02:01,117
catches bad smells for you. The single level of extraction is a 

32
00:02:01,121 --> 00:02:05,121
little bit of an abstract idea. The idea is that it's not trying 

33
00:02:05,125 --> 00:02:08,125
to do everything all in one task. Here's a task, I'll throw it 

34
00:02:08,128 --> 00:02:11,128
all in one big method. You try and to divide and conquer, but 

35
00:02:11,131 --> 00:02:14,131
yet keep at that same level of abstraction as you're going on. 

36
00:02:14,134 --> 00:02:18,134
Typically often calling other methods to be able to do that, but 

37
00:02:18,138 --> 00:02:21,138
that all the methods being called are about the same level of 

38
00:02:21,141 --> 00:02:25,141
complexity. The best analogy is like writing a good news story. 

39
00:02:25,145 --> 00:02:29,145
If you took an English class or to become a reporter, you start 

40
00:02:29,149 --> 00:02:33,149
off with a good summary and then each paragraph goes into points 

41
00:02:33,153 --> 00:02:36,153
in more detail. There's exactly one topic about each paragraph, 

42
00:02:36,156 --> 00:02:39,156
as opposed to the rambling style where it jumps back and forth 

43
00:02:39,159 --> 00:02:43,159
between the lots of ideas. The single level method is 

44
00:02:43,163 --> 00:02:46,163
orchestrating everything that's going on. That's one of the 

45
00:02:46,166 --> 00:02:50,166
goals to try after the single level of extraction. Who cares 

46
00:02:50,170 --> 00:02:53,170
about lots of arguments? First of all, if there's a lot of 

47
00:02:53,173 --> 00:02:57,173
arguments it can be difficult to get test covers. If really 

48
00:02:57,177 --> 00:03:00,177
there's many different things you have to cover to be able to 

49
00:03:00,000 --> 00:03:04,180
test it, then that's going to be difficult. It also, lots of 

50
00:03:04,184 --> 00:03:07,184
arguments can make it difficult to do mocking and stubbing so 

51
00:03:07,187 --> 00:03:11,187
that you can isolate pieces of your design to do testing 

52
00:03:11,191 --> 00:03:15,191
differently. A real danger sign is a Boolean flag. A Boolean 

53
00:03:15,195 --> 00:03:19,195
flag is one of your arguments, so chances are what that means is 

54
00:03:19,199 --> 00:03:22,199
there's really two methods hiding in there and for some reason 

55
00:03:22,202 --> 00:03:25,202
you put a single Boolean flag. What you've taken has just made 

56
00:03:25,205 --> 00:03:28,205
one really hard to test method out of two things that should be 

57
00:03:28,208 --> 00:03:32,208
separate methods. Try and avoid that. The other thing you may 

58
00:03:32,212 --> 00:03:35,212
see is a bunch of arguments traveling in a pack together across 

59
00:03:35,215 --> 00:03:39,215
a bunch of method calls. If that's happening, you should really 

60
00:03:39,219 --> 00:03:42,219
extract them and create a new class so that you aren't funneling 

61
00:03:42,222 --> 00:03:46,222
these arguments, funneling this [ inaudible 03:44] along. Let's 

62
00:03:46,226 --> 00:03:51,226
take a look at a smelly program here. This is an actual program 

63
00:03:51,231 --> 00:03:54,231
that [ Armando 03:52] found that was in the book, and that was 

64
00:03:54,234 --> 00:03:57,234
what it was. You look at it there and kind of stare at this 

65
00:03:57,237 --> 00:04:03,237
thing, and you see letters like y and d. If you're a native 

66
00:04:03,243 --> 00:04:06,243
English speaker you think, " Well, what might that mean?" Then 

67
00:04:06,246 --> 00:04:09,246
you see numbers like 365, and if you're on the Gregorian 

68
00:04:09,249 --> 00:04:13,249
calendar 365 is a number, so this has probably got to do with 

69
00:04:13,253 --> 00:04:16,253
years or something like that. Now this actually, this program 

70
00:04:16,256 --> 00:04:20,256
actually has a bug in it. It'd be difficult to figure out … you 

71
00:04:20,260 --> 00:04:23,260
don't even know what it's doing, much less what the bugs are. 

72
00:04:23,263 --> 00:04:26,263
When we run it through Reek, Reek is this thing that's looking 

73
00:04:26,266 --> 00:04:29,266
for smells given this qualitative evaluation, what does it say 

74
00:04:29,269 --> 00:04:35,269
about this program? What it says at the top is that it talks 

75
00:04:35,275 --> 00:04:39,275
about dryness. Don't repeat yourself. It says this y+ 1 is used 

76
00:04:39,279 --> 00:04:43,279
twice here. At the end of each of these if and else statements 

77
00:04:43,283 --> 00:04:46,283
it's the same statement, you're doing it twice where you could 

78
00:04:46,286 --> 00:04:49,286
get away with it once. The next thing it says is the method is 

79
00:04:49,289 --> 00:04:54,289
long. Length is kind of in the eye of the beholder. Now the Ruby 

80
00:04:54,294 --> 00:04:57,294
code's really powerful, so even a bunch of statements like that 

81
00:04:57,297 --> 00:05:00,297
is pretty long. A lot of it is this nested if- statements. It's 

82
00:05:00,000 --> 00:05:03,300
kind of hard to figure out. It's suggesting it's kind of a long 

83
00:05:03,303 --> 00:05:06,303
method. After that it starts complaining about these single- 

84
00:05:06,306 --> 00:05:10,306
letter variable names, both as a parameter and then in the while 

85
00:05:10,310 --> 00:05:16,310
loop and again. That's what this, whatever this is, 15 line 

86
00:05:16,316 --> 00:05:19,316
little method here. There's a bunch of things that Reek says it 

87
00:05:19,319 --> 00:05:23,319
smells funny. Again, if you weren't an English speaker or if 

88
00:05:23,323 --> 00:05:25,323
you're using the Hebrew calendar or something, these numbers, 

89
00:05:25,325 --> 00:05:30,325
you wouldn't kind of guess what these things mean. That's the 

90
00:05:30,330 --> 00:05:33,330
qualitative judgment, and there's a tool to do that. How about 

91
00:05:33,333 --> 00:05:36,333
quantitative? What people tried to do in the... We're trying to 

92
00:05:36,336 --> 00:05:39,336
create software engineering is, isn't there some things we could 

93
00:05:39,339 --> 00:05:42,339
try and measure complexity just by looking at the source program 

94
00:05:42,342 --> 00:05:46,342
itself and adding some things up. One of the oldest one of these 

95
00:05:46,346 --> 00:05:50,346
things is called ABC Complexity, which is a function of the 

96
00:05:50,350 --> 00:05:54,350
assignments, branches and conditions. The formula for looking 

97
00:05:54,354 --> 00:05:57,354
lots of programs, looking lots of procedures and trying to 

98
00:05:57,357 --> 00:06:00,357
figure out what's complicated is somebody came up with the 

99
00:06:00,000 --> 00:06:02,360
formula, " Well, let's take … we'll square the number of 

100
00:06:02,362 --> 00:06:05,362
assignments and the number, square the number of branches, 

101
00:06:05,365 --> 00:06:07,365
square the number of conditions, take the square root of that 

102
00:06:07,367 --> 00:06:11,367
and that's going to be a quantitative measure of complexity." 

103
00:06:11,371 --> 00:06:13,371
Believe it or not the National Institute of Standards, which 

104
00:06:13,373 --> 00:06:15,373
seems like it has plenty of other things to work on, has come up 

105
00:06:15,375 --> 00:06:19,375
with a ( laughs) cutoff for government contracts about what you 

106
00:06:19,379 --> 00:06:21,379
have to do to make your method— it has to be not too 

107
00:06:21,381 --> 00:06:25,381
complicated. The square root of all that has to be less than 20 

108
00:06:25,385 --> 00:06:29,385
for a method, for it to be government approved. ( Laughter) 

109
00:06:29,389 --> 00:06:33,389
Rails of course, because it's easy. What's fun about the Rails 

110
00:06:33,393 --> 00:06:36,393
environment because it's easy to build software and it's ... 

111
00:06:36,396 --> 00:06:38,396
you're building software for programmers. Programmers make tools 

112
00:06:38,398 --> 00:06:42,398
for programmers. There's a program called Flog that'll 

113
00:06:42,402 --> 00:06:47,402
automatically calculate your ABC Complexity for Ruby methods. 

114
00:06:47,407 --> 00:06:51,407
The most well known quantitative measure, it's called cyclomatic 

115
00:06:51,411 --> 00:06:54,411
complexity. The idea is to try and figure out how many 

116
00:06:54,414 --> 00:06:57,414
independent paths are there through a method, because that'll 

117
00:06:57,417 --> 00:06:59,417
tell you something about what you have to do for test coverage 

118
00:06:59,419 --> 00:07:02,419
if you have to cover all those methods. Again, somebody … this 

119
00:07:02,422 --> 00:07:06,422
guy was … his name was Charles McCabe; he did this almost 40 

120
00:07:06,426 --> 00:07:11,426
years ago. He invented this complexity. His formula was, " Let's 

121
00:07:11,431 --> 00:07:15,431
talk about these nodes," but nodes are basic blocks, right? One 

122
00:07:15,435 --> 00:07:17,435
branch in, one branch out, there's no branches inside them. 

123
00:07:17,437 --> 00:07:21,437
Let's count how many nodes that's in. The edges are between the 

124
00:07:21,441 --> 00:07:24,441
node, that's the edges there, and then connected components are 

125
00:07:24,444 --> 00:07:29,444
these things that kind of are connected near each other. The 

126
00:07:29,449 --> 00:07:33,449
Charles McCabe complexity or cyclomatic complexity for this 

127
00:07:33,453 --> 00:07:38,453
little outline of a one would be nine edges, eight nodes and one 

128
00:07:38,458 --> 00:07:41,458
connected component. When you pull it through like that you get 

129
00:07:41,461 --> 00:07:44,461
a connected component of three. Once again the National 

130
00:07:44,464 --> 00:07:47,464
Institute of Standards has stepped in, defined what government 

131
00:07:47,467 --> 00:07:49,467
contracts has to do, and it's supposed to be less than 10 per 

132
00:07:49,469 --> 00:07:55,469
module. Again in the Rails community there's a tool, Saikuro, 

133
00:07:55,475 --> 00:08:00,475
which calculates cyclomatic complexity for you. Let's go ... 

134
00:08:00,000 --> 00:08:03,480
we'll take a look at that first method we did, go back. Let's 

135
00:08:03,483 --> 00:08:06,483
just say basically about the quantitative measurements. It's not 

136
00:08:06,486 --> 00:08:09,486
like these are foolproof methods, if you get a bad score it's a 

137
00:08:09,489 --> 00:08:13,489
bad method. These are indicators that something's going on. If 

138
00:08:13,493 --> 00:08:17,493
you try a bunch of these methods, and Reek and Flog and Saikuro 

139
00:08:17,497 --> 00:08:20,497
all suggest the numbers are too big or give you lots of 

140
00:08:20,500 --> 00:08:22,500
warnings, you probably should take a look at that and see what 

141
00:08:22,502 --> 00:08:25,502
you can do about it. There's other tools as well. We talked 

142
00:08:25,505 --> 00:08:30,505
about simple coverage in testing, are all the statements 

143
00:08:30,510 --> 00:08:33,510
executed? That's C0 coverage, Armando talked about a while ago. 

144
00:08:33,513 --> 00:08:37,513
SimpleCov is a tool that'll do that for you in your projects and 

145
00:08:37,517 --> 00:08:41,517
your tools. You'll want to get above 90% on SimpleCoverage. 

146
00:08:41,521 --> 00:08:45,521
There's rake stats will actually talk about the ratio of code to 

147
00:08:45,525 --> 00:08:48,525
testing. A big part of test driven development and behavior 

148
00:08:48,528 --> 00:08:52,528
driven designs we'll talk about today is having a lot of testing 

149
00:08:52,532 --> 00:08:54,532
that you're doing on it. It says what the ratio should be, it 

150
00:08:54,534 --> 00:09:00,534
should it be twice as much testing code as executing code. Let's 

151
00:09:00,000 --> 00:09:03,540
take a look at that program, which actually is trying to do some 

152
00:09:03,543 --> 00:09:07,543
leap year calculation. The ABC Complexity, assignments, 

153
00:09:07,547 --> 00:09:11,547
branches, conditions, does get a score of 23, which is above the 

154
00:09:11,551 --> 00:09:15,551
National Institute of Testing Standards, so that suggests it's a 

155
00:09:15,555 --> 00:09:19,555
problem. The code complexity score is under 10. It's not a very 

156
00:09:19,559 --> 00:09:23,559
complicated— it's a couple of conditions, if statements that's 

157
00:09:23,563 --> 00:09:26,563
there, so it's not a lot of parallel pass and the number 

158
00:09:26,566 --> 00:09:30,566
indicated, it's not a problem. How could we fix that up? Let's 

159
00:09:30,570 --> 00:09:35,570
go through. First of all, we're pretty sure d was day and y was 

160
00:09:35,575 --> 00:09:40,575
year. We can put that in here. Let's do that leap year 

161
00:09:40,580 --> 00:09:43,580
calculation, we got the leap year method with a question mark so 

162
00:09:43,583 --> 00:09:46,583
that's returning a Boolean value and we stick that over there to 

163
00:09:46,586 --> 00:09:49,586
be able to figure that out. We've broken that out into a 

164
00:09:49,589 --> 00:09:52,589
separate private method. When we put that through Reek instead 

165
00:09:52,592 --> 00:09:56,592
of the six warnings, one of the warnings was it was too long and 

166
00:09:56,596 --> 00:10:02,596
uncommunicative variable names, I can't remember what the other 

167
00:10:02,602 --> 00:10:07,602
one was, but all the warnings go away. The ABC Complexity, now 

168
00:10:07,607 --> 00:10:11,607
instead of above 20 each method is down around 10, and the 

169
00:10:11,611 --> 00:10:15,611
Saikuro score is below that. This is intuitively easier code to 

170
00:10:15,615 --> 00:10:18,615
figure out what's going on. It's nice when you're saying if it's 

171
00:10:18,618 --> 00:10:23,618
a leap year that gives you intuition what's happening here. 

172
00:10:23,623 --> 00:10:25,623
Okay, so that's a little bit … you should be thinking about 

173
00:10:25,625 --> 00:10:30,625
doing this with Ruby. The next assignment that we will give will 

174
00:10:30,630 --> 00:10:34,630
include these tools. We're not going to grade you on it, but 

175
00:10:34,634 --> 00:10:36,634
we're going to let you see what the [ inaudible 10:35] of the 

176
00:10:36,636 --> 00:10:38,636
tool. When a time to do the project that's in this class, we'll 

177
00:10:38,638 --> 00:10:41,638
be running these tools over your ... your code so to help you 

178
00:10:41,641 --> 00:10:43,641
improve the quality of what you write. 


