1
00:00:00,000 --> 00:00:05,000
So we take an initial vote. Initial vote? Initial vote? For 

2
00:00:05,005 --> 00:00:07,005
those of you in the middle of the room, when I put my hands over 

3
00:00:07,007 --> 00:00:10,007
my head it's not because I'm stretching. It means initial vote, 

4
00:00:10,010 --> 00:00:16,010
although I am also stretching. I see at least one of almost 

5
00:00:16,016 --> 00:00:20,016
every color, so this is a good one to spend a few seconds on. 

6
00:00:20,020 --> 00:00:25,020
Let's try an updated vote. Updated vote says? Updated vote says? 

7
00:00:25,025 --> 00:00:30,025
Blue and orange seem to have the most votes and it's a split. 

8
00:00:30,030 --> 00:00:35,030
Let's go through one at a time here. We'd probably just go 

9
00:00:35,035 --> 00:00:39,035
through it in an order. If we try to just read each sentence, 

10
00:00:39,039 --> 00:00:42,039
should_ receive combines a mock and an expectation where stub is 

11
00:00:42,042 --> 00:00:46,042
only a mock. One reason that this doesn't make a lot of sense is 

12
00:00:46,046 --> 00:00:49,046
because a stub isn't a mock. A mock is an actual object. It does 

13
00:00:49,049 --> 00:00:52,049
stand in for something. A stub is more like, " Don't call this 

14
00:00:52,052 --> 00:00:55,052
procedure. I'll just give you the answer." You can stub 

15
00:00:55,055 --> 00:00:59,055
individual methods on a mock object absolutely, but the term " 

16
00:00:59,059 --> 00:01:02,059
mock" refers to identity. You mock the whole object or even the 

17
00:01:02,062 --> 00:01:06,062
whole class. Stubs usually refer to individual method calls. A 

18
00:01:06,066 --> 00:01:10,066
stub isn't really a mock. That leaves us with, from the other 

19
00:01:10,070 --> 00:01:14,070
three choices, we could say stub as an expectation or we could 

20
00:01:14,074 --> 00:01:17,074
say stub as a seam, but stub absolutely isn't an expectation. In 

21
00:01:17,077 --> 00:01:20,077
fact the main difference between stub and should_ receive, they 

22
00:01:20,080 --> 00:01:22,080
both deal with a concept of a method getting called on an 

23
00:01:22,082 --> 00:01:25,082
object, but should_ receive says, " It's an error for the method 

24
00:01:25,085 --> 00:01:29,085
not to get called." Stub just says, " If the method gets called, 

25
00:01:29,089 --> 00:01:31,089
here is the can response that you should return." It doesn't 

26
00:01:31,091 --> 00:01:33,091
actually check that the method got called. In fact, you could 

27
00:01:33,093 --> 00:01:36,093
perfectly well set up stubs and some of them don't get use, 

28
00:01:36,096 --> 00:01:38,096
although if that happens, you should ask yourself why you set 

29
00:01:38,098 --> 00:01:45,098
them up. So that leaves us with number two to number three. What 

30
00:01:45,105 --> 00:01:49,105
is it that should_ receive and stub certainly have in common? 

31
00:01:49,109 --> 00:01:52,109
Should_ receive and stub are basically both ... oh sorry, not 

32
00:01:52,112 --> 00:01:59,112
number and number three; number four. What do should_ receive 

33
00:01:59,119 --> 00:02:02,119
and stub actually have in common? They're both places that when 

34
00:02:02,122 --> 00:02:06,122
you're writing tests, allow you to surgically alter the behavior 

35
00:02:06,126 --> 00:02:08,126
of the program without changing the source code of the program. 

36
00:02:08,128 --> 00:02:11,128
So both of them are kinds of seams. The seam is the overriding 

37
00:02:11,131 --> 00:02:15,131
concept here, but should_ receive in addition makes it an error 

38
00:02:15,135 --> 00:02:18,135
if the seam isn't use so to speak. The right answer in this case 

39
00:02:18,138 --> 00:02:22,138
is that should_ receive is both the seam and an expectation, and 

40
00:02:22,142 --> 00:02:25,142
stub is only a seam. That makes sense, people? 


