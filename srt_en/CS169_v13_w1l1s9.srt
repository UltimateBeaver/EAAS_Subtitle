1
00:00:00,000 --> 00:00:05,000
Okay so quick question. So what type of software is an epic 

2
00:00:05,005 --> 00:00:10,005
failure? beautiful code is that an epic failure? is that how we 

3
00:00:10,010 --> 00:00:13,010
pick that choice? legacy code unexpectedly short-lived code both 

4
00:00:13,013 --> 00:00:18,013
legacy code and unexpectedly short-lived code are epic failures 

5
00:00:18,018 --> 00:00:24,018
and the C. there's diversity ready set ah! we actually I found a 

6
00:00:24,024 --> 00:00:27,024
question you can talk over okay so talk over with your neighbour 

7
00:00:27,027 --> 00:00:32,027
and argue with each other which is the best one Alright let's 

8
00:00:32,032 --> 00:00:36,032
let's try voting again pairs of you should be voting together 

9
00:00:36,036 --> 00:00:42,036
okay ready set vote and I think it's redder than it was last 

10
00:00:42,042 --> 00:00:45,042
time okay so beautiful code is obviously not a failure 

11
00:00:45,045 --> 00:00:49,045
unexpectedly short-lived code is a failure this is the sad thing 

12
00:00:49,049 --> 00:00:52,049
that can happen like you know the FBI file case it was so 

13
00:00:52,052 --> 00:00:55,052
short-lived it never even lived right it was canceled they 

14
00:00:55,055 --> 00:00:57,055
didn't make it so this can happen you don't wanna do that so why 

15
00:00:57,057 --> 00:01:00,057
isn't legacy code a failure legacy code makes a lot of money for 

16
00:01:00,000 --> 00:01:04,060
people right it is satisfying the customer's need it's one half 

17
00:01:04,064 --> 00:01:07,064
of quality it's just not it's hard to evolve so it's 

18
00:01:07,067 --> 00:01:11,067
unattractive but it works. So an epic failure isn't necessarily 

19
00:01:11,071 --> 00:01:19,071
legacy code alright let's go ahead And that kind of introduces a 

20
00:01:19,079 --> 00:01:23,079
quality assurance in testing. So what is software quality? what 

21
00:01:23,083 --> 00:01:27,083
is quality? what does quality assurance mean and you know what 

22
00:01:27,087 --> 00:01:30,087
does it mean for for software and then you may have heard the 

23
00:01:30,090 --> 00:01:34,090
term. V&V. or validation and verification what's the difference 

24
00:01:34,094 --> 00:01:36,094
those sound like synonyms to each other what's the difference 

25
00:01:36,096 --> 00:01:40,096
between those two so in general if you were to take a class a 

26
00:01:40,100 --> 00:01:43,100
business classes what is product quality they had this phrase 

27
00:01:43,103 --> 00:01:47,103
fitness for use So what that means for quality is business value 

28
00:01:47,107 --> 00:01:51,107
for both the customer and for the manufacturer. And what quality 

29
00:01:51,111 --> 00:01:56,111
assurance Q. A. is is either processes or standards that result 

30
00:01:56,116 --> 00:02:00,116
in high quality products and also to improve the manufacturing 

31
00:02:00,000 --> 00:02:04,120
process that QA involves both of those things. So what does 

32
00:02:04,124 --> 00:02:09,124
software quality mean So it satisfies customers needs like we 

33
00:02:09,129 --> 00:02:12,129
talked about the legacy code it's easy to use get great answers 

34
00:02:12,132 --> 00:02:15,132
doesn't crash and stuff but it's also easy for the developer who 

35
00:02:15,135 --> 00:02:20,135
is kind of the manufacturer to be debugging hands. And so what 

36
00:02:20,140 --> 00:02:24,140
software quality assurance is ensures the quality improves the 

37
00:02:24,144 --> 00:02:27,144
processes of software organization So the QA team will be 

38
00:02:27,147 --> 00:02:31,147
looking at the value of the software itself and then see if 

39
00:02:31,151 --> 00:02:38,151
there's processes that can be improved and this generally gets 

40
00:02:38,158 --> 00:02:41,158
called quality assurance what's the difference between 

41
00:02:41,161 --> 00:02:44,161
verification and validation. So verification is did you meet the 

42
00:02:44,164 --> 00:02:48,164
specification that's what that term means So another way to say 

43
00:02:48,168 --> 00:02:53,168
it is did you build the thing right. But validation is is is the 

44
00:02:53,173 --> 00:02:57,173
specification really what the customer wants does the 

45
00:02:57,177 --> 00:03:01,177
specification correctly reflect what the customers asking for so 

46
00:03:01,181 --> 00:03:04,181
another way to say did you build the right thing. Alright So 

47
00:03:04,184 --> 00:03:08,184
that's verification and validation pretty much for hardware, 

48
00:03:08,188 --> 00:03:11,188
people have a really good idea of what the hardware should be 

49
00:03:11,191 --> 00:03:14,191
like for processors so it's generally verification but with 

50
00:03:14,194 --> 00:03:17,194
software it's really validation because the customer as you 

51
00:03:17,197 --> 00:03:21,197
learn in this class the customer doesn't really know what they 

52
00:03:21,201 --> 00:03:23,201
want til see it right once they see it working on on that's not 

53
00:03:23,203 --> 00:03:27,203
quite what I want and so they want you to change it. And the way 

54
00:03:27,207 --> 00:03:31,207
we assure software quality is testing. So testing is you know 

55
00:03:31,211 --> 00:03:34,211
you can't do it exhaustively even if you have one sixty four bit 

56
00:03:34,214 --> 00:03:38,214
variable you could do a test in one nanosecond with sixty four 

57
00:03:38,218 --> 00:03:41,218
bits there's two to the thirtieth nanoseconds in a second two to 

58
00:03:41,221 --> 00:03:44,221
thirty four nanoseconds is five hundred years. So it would take 

59
00:03:44,224 --> 00:03:47,224
five hundred years to exhaustively test one sixty-four bit 

60
00:03:47,227 --> 00:03:51,227
variables so obviously, you can't do it So what people do is 

61
00:03:51,231 --> 00:03:54,231
divide and conquer they have a variety of tests at different 

62
00:03:54,234 --> 00:03:57,234
levels of the system and then you rely on the test at a lower 

63
00:03:57,237 --> 00:04:00,237
level to do their job and you'll do this higher piece So 

64
00:04:00,000 --> 00:04:03,240
classically the way the system that tests at the bottom within a 

65
00:04:03,243 --> 00:04:06,243
single class is called a unit test the method does what was 

66
00:04:06,246 --> 00:04:11,246
expected a modular function test would be across classes or 

67
00:04:11,251 --> 00:04:14,251
these units integration test would be putting higher level 

68
00:04:14,254 --> 00:04:17,254
things together to make sure the correct assumptions remember 

69
00:04:17,257 --> 00:04:22,257
the problem on the Mars orbiter they were using different units 

70
00:04:22,262 --> 00:04:25,262
the integration test should have noticed that and then system or 

71
00:04:25,265 --> 00:04:28,265
acceptance test is the customers satisfied with it and accepts 

72
00:04:28,268 --> 00:04:33,268
it the other phr you'll hear about testing is black box versus 

73
00:04:33,273 --> 00:04:37,273
white box testing black box means you just look the specs white 

74
00:04:37,277 --> 00:04:40,277
box means you look inside these limitations to come up with 

75
00:04:40,280 --> 00:04:43,280
reasons test coverage is percentage of the code paths that are 

76
00:04:43,283 --> 00:04:46,283
covered have you exercise everything with your test are the 

77
00:04:46,286 --> 00:04:49,286
pieces of the code that haven't been exercised regression 

78
00:04:49,289 --> 00:04:53,289
testing is the idea is what you make changes to it rather than I 

79
00:04:53,293 --> 00:04:56,293
assume all the tests will work you try all the tests you made 

80
00:04:56,296 --> 00:05:00,296
every time to see if you broke anything as you edit it in 

81
00:05:00,000 --> 00:05:03,300
continuous integration gets called C. I. sometimes is every time 

82
00:05:03,303 --> 00:05:07,303
you add a new feature it's constantly running the code all the 

83
00:05:07,307 --> 00:05:13,307
time overnight rather than later in the process you tested it's 

84
00:05:13,313 --> 00:05:16,313
continuously being checked test every time you check in. we are 

85
00:05:16,316 --> 00:05:18,316
ready for another question 


