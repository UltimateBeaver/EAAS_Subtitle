1
00:00:00,000 --> 00:00:05,000
OK, well, we are back and we are continuing our whirlwind tour 

2
00:00:05,005 --> 00:00:08,005
of Eails. We structured our tour around the the idea that what 

3
00:00:08,008 --> 00:00:11,008
most Rails applications do really is they manipulate models. 

4
00:00:11,011 --> 00:00:14,011
Models is where the action is and that there's these four basic 

5
00:00:14,014 --> 00:00:17,014
operations to create, read update and delete that you can do on 

6
00:00:17,017 --> 00:00:20,017
them. And we're now going to deal with forms, which are going to 

7
00:00:20,020 --> 00:00:23,020
take us to the create and update actions. Really, we just dealt 

8
00:00:23,023 --> 00:00:28,023
with read before. So, you've all dealt with forms. They allow 

9
00:00:28,028 --> 00:00:30,028
you to fill in little stuff on a website, submit it to a server 

10
00:00:30,030 --> 00:00:32,030
and, for our purposes, the interesting thing that we're going to 

11
00:00:32,032 --> 00:00:36,032
realize is that creating a form usually takes two interactions 

12
00:00:36,036 --> 00:00:38,036
because the first thing you have to do is you have to do some 

13
00:00:38,038 --> 00:00:41,038
action that causes the form to be served to the user. Then the 

14
00:00:41,041 --> 00:00:44,041
user fills in some stuff and then the user submits it. So you 

15
00:00:44,044 --> 00:00:46,044
really need two actions. You need one that knows how to generate 

16
00:00:46,046 --> 00:00:49,046
the form and one that knows how to accept the form submission. 

17
00:00:49,049 --> 00:00:51,049
So we're going to treat those as separate cases. So we have to 

18
00:00:51,051 --> 00:00:55,051
figure out how do we generate the form? That's an action. When 

19
00:00:55,055 --> 00:00:57,055
the user fills in their values, how do we get access to the 

20
00:00:57,057 --> 00:01:01,057
information they've filled in? And when we're all done with 

21
00:01:01,061 --> 00:01:03,061
that, what do we return or what do we render? Remember we're 

22
00:01:03,063 --> 00:01:06,063
dealing with HEDP, which is a request reply protocol. That means 

23
00:01:06,066 --> 00:01:09,066
every request, something has to come back and be rendered. So 

24
00:01:09,069 --> 00:01:11,069
what is the right answer to do that for these different kind of 

25
00:01:11,071 --> 00:01:15,071
form interactions? So, continuing our cookbook things that we 

26
00:01:15,075 --> 00:01:17,075
know how to do with Rails. Here's how you submit a new 

27
00:01:17,077 --> 00:01:19,077
submitable form and we're going to walk through each step of 

28
00:01:19,079 --> 00:01:22,079
this process. First we have to identify the action that serves 

29
00:01:22,082 --> 00:01:24,082
the actual form, the blank form that the user's going to fill 

30
00:01:24,084 --> 00:01:27,084
in. Or we'll see it could be a form that already has some 

31
00:01:27,087 --> 00:01:30,087
information pre- populated. For example, if you're making a 

32
00:01:30,090 --> 00:01:33,090
change to an existing resource, the form might show up already 

33
00:01:33,093 --> 00:01:36,093
populated with the old info and then you can type in new info. 

34
00:01:36,096 --> 00:01:38,096
Then you have to indentify which action is going to receive the 

35
00:01:38,098 --> 00:01:41,098
submitted form and that's where we're going to get access to 

36
00:01:41,101 --> 00:01:43,101
whatever the user entered. We have to make sure we have routes, 

37
00:01:43,103 --> 00:01:47,103
controller actions and views for each of these two things. And 

38
00:01:47,107 --> 00:01:51,107
as we'll see, when we create the form, the name attributes on 

39
00:01:51,111 --> 00:01:53,111
all the form elements is how we're going to get our hands on the 

40
00:01:53,113 --> 00:01:55,113
data that the user typed. They're going to appear as keys in 

41
00:01:55,115 --> 00:01:58,115
this magical hash- looking thing called params that we saw 

42
00:01:58,118 --> 00:02:02,118
briefly before and we're going to see a couple of times during 

43
00:02:02,122 --> 00:02:05,122
this segment and the next couple of segments. And as we see, as 

44
00:02:05,125 --> 00:02:09,125
with so many things in Rails, the common case is provided for by 

45
00:02:09,129 --> 00:02:10,129
a number of different helpers that you can call so that you 

46
00:02:10,130 --> 00:02:13,130
don't have to manually deal with all the form construction. In 

47
00:02:13,133 --> 00:02:17,133
fact, it's fair to say that the Rails view of a form is that 

48
00:02:17,137 --> 00:02:20,137
it's really a thing that ultimately gets backed by a model. So 

49
00:02:20,140 --> 00:02:22,140
what you'll see is that a lot of the helpers for creating and 

50
00:02:22,142 --> 00:02:26,142
dealing with forms are really based on the idea that a form is 

51
00:02:26,146 --> 00:02:28,146
exactly a view of a model, but it's an updatable view because 

52
00:02:28,148 --> 00:02:31,148
the user can type stuff. So, let's talk first about how we're 

53
00:02:31,151 --> 00:02:33,151
going to creat the form. We need an action that's going to serve 

54
00:02:33,153 --> 00:02:36,153
the form to the users so that they can fill it in. And to do 

55
00:02:36,156 --> 00:02:39,156
that, we're going to look at a very simplified version of a form 

56
00:02:39,159 --> 00:02:49,159
in HTML. So, a couple of things to notice about a simple HTML 

57
00:02:49,169 --> 00:02:54,169
form. Here is a simplified version of the form for creating a 

58
00:02:54,174 --> 00:02:57,174
new movie. And a couple of things to notice. First of all, the 

59
00:02:57,177 --> 00:03:01,177
actual form tag, that encloses everything has to have at least 

60
00:03:01,181 --> 00:03:04,181
an action and method. This is really what's going to determine 

61
00:03:04,184 --> 00:03:08,184
where the form is submitted. And remember we've kept saying that 

62
00:03:08,188 --> 00:03:11,188
a route consists of both an HETP method and a URI and a D. You 

63
00:03:11,191 --> 00:03:14,191
see them both here. The HETP method is going to be post. And 

64
00:03:14,194 --> 00:03:19,194
here is the path portion of the URI. And then, inside the form, 

65
00:03:19,199 --> 00:03:22,199
we have a number of elements. Input elements and select elements 

66
00:03:22,202 --> 00:03:25,202
are examples of things where the user can specify values and 

67
00:03:25,205 --> 00:03:29,205
you'll note that all of those have a name attribute and the name 

68
00:03:29,209 --> 00:03:31,209
attribute is going to be the key of how we get that information 

69
00:03:31,211 --> 00:03:34,211
in the controller method. Now, it might look a little bit weird 

70
00:03:34,214 --> 00:03:36,214
if you're coming from other web environments that the names of 

71
00:03:36,216 --> 00:03:39,216
these attributes have brackets, like movie bracket title, movie 

72
00:03:39,219 --> 00:03:42,219
bracket rating. And in a moment we're going to see why that 

73
00:03:42,222 --> 00:03:44,222
turns out to be a useful naming convention. The names can more 

74
00:03:44,224 --> 00:03:46,224
or less be anything you want, but there's a good reason to make 

75
00:03:46,226 --> 00:03:52,226
them look like this. So we're going to generate the name form. 

76
00:03:52,232 --> 00:03:55,232
Only the the inputs that have name attributes are going to be 

77
00:03:55,235 --> 00:03:59,235
submitted. And we can often use a URI helper with the action 

78
00:03:59,239 --> 00:04:00,239
part of that form. Remember, we said the whole point of the 

79
00:04:00,000 --> 00:04:04,240
Rails routing sub- system is to avoid having to hard- wire URIs 

80
00:04:04,244 --> 00:04:06,244
all over the place. In fact, it gives you these helper methods 

81
00:04:06,246 --> 00:04:10,246
that generate the URIs associcated with various restful actions, 

82
00:04:10,250 --> 00:04:13,250
including the crud actions. And we actually already saw an 

83
00:04:13,253 --> 00:04:17,253
example of that. We're going to take a look now at the Rails 

84
00:04:17,257 --> 00:04:20,257
code for creating that simple form. So, here's the form as it's 

85
00:04:20,260 --> 00:04:23,260
going to appear as it arrives at the browser. But looking 

86
00:04:23,263 --> 00:04:30,263
briefly at what this looks like in Hamel. And what I did here 

87
00:04:30,270 --> 00:04:34,270
is, underneath each line of Hamel, I included one or more lines 

88
00:04:34,274 --> 00:04:37,274
of the HTML that would be generated from that Hamel, so you can 

89
00:04:37,277 --> 00:04:41,277
see what the mapping is. So, this line with the action and the 

90
00:04:41,281 --> 00:04:45,281
method that we saw in the HTML form actually came from this 

91
00:04:45,285 --> 00:04:49,285
Hamel tag. This is just a Ruby method called Form Tag. It takes 

92
00:04:49,289 --> 00:04:54,289
one argument, which is the URI of the receiving action for this 

93
00:04:54,294 --> 00:04:57,294
form. And we're using one the URI helpers so we don't have to 

94
00:04:57,297 --> 00:05:00,297
hard code a URI in here. That's why it said form tag movie path. 

95
00:05:00,000 --> 00:05:03,300
I could have just as well said form tag quote slash movies, as 

96
00:05:03,303 --> 00:05:06,303
long as I have a way of specifying the path portion of the URI 

97
00:05:06,306 --> 00:05:10,306
that's going to receive that form. The form tag has got a body. 

98
00:05:10,310 --> 00:05:14,310
You pass it a block with do and inside of the body, you can see, 

99
00:05:14,314 --> 00:05:17,314
for example, that some of the fields in the form - here's an 

100
00:05:17,317 --> 00:05:20,317
example of the text field where the user would type in a name 

101
00:05:20,320 --> 00:05:24,320
for a new movie. What it comes from in Hamel is this text field 

102
00:05:24,324 --> 00:05:27,324
helper method. What's going on here is that you're telling text 

103
00:05:27,327 --> 00:05:30,327
field that there's such a model called movie. One of its 

104
00:05:30,330 --> 00:05:33,330
attributes is a title. And what I want you to do is to generate 

105
00:05:33,333 --> 00:05:36,333
a form element suitable for editing that attribute. So again 

106
00:05:36,336 --> 00:05:39,336
it's really much that the view is not you're designing the form, 

107
00:05:39,339 --> 00:05:42,339
the view is that you're designing an editable version of the 

108
00:05:42,342 --> 00:05:45,342
information already associated with the model. So that's why the 

109
00:05:45,345 --> 00:05:48,345
form tag helper is like text field. You don't have to use these. 

110
00:05:48,348 --> 00:05:52,348
You could code the raw HTML in Hamel if you wanted, but the 

111
00:05:52,352 --> 00:05:55,352
benefit of doing that is it reveals intent and allows you to 

112
00:05:55,355 --> 00:05:58,355
connect the form very obviously to which attributes of the model 

113
00:05:58,358 --> 00:06:00,358
it's supposed to be editing. 


