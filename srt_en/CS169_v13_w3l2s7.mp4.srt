00:00:00,000 --> 00:00:03,000
The tour continues. We have done models. We have done 

2
00:00:03,003 --> 00:00:07,003
controllers, and that leaves only views, and as with models and 

3
00:00:07,007 --> 00:00:09,007
controllers, there is more than one way to deal with views and 

4
00:00:09,009 --> 00:00:12,009
as with models and controllers I am going to show the way Rails 

5
00:00:12,012 --> 00:00:14,012
does it. I am going to show you at least one other alternative 

6
00:00:14,014 --> 00:00:17,014
and we will talk about why you might make different choices for 

7
00:00:17,017 --> 00:00:19,017
different situations. So, we are going to talk about template 

8
00:00:19,019 --> 00:00:22,019
views, which is a specific way that we can handle views in an 

9
00:00:22,022 --> 00:00:27,022
MVC app. So basically what problem are we trying to solve here. 

10
00:00:27,027 --> 00:00:30,027
We know that browsers display HTML. That is what they do. So 

11
00:00:30,030 --> 00:00:33,030
whenever we return stuff it is going to be user facing. That is 

12
00:00:33,033 --> 00:00:36,033
the format that we have to use. The questions is how does the 

13
00:00:36,036 --> 00:00:40,036
data that we store in our app become HTML, and again if you have 

14
00:00:40,040 --> 00:00:43,040
done any kind of web program in other frameworks you have 

15
00:00:43,043 --> 00:00:46,043
probably done a few different variations of what people call 

16
00:00:46,046 --> 00:00:49,046
template view which we are going to explore next. In the 

17
00:00:49,049 --> 00:00:52,049
template view pattern basically you have a view that consists of 

18
00:00:52,052 --> 00:00:56,052
a certain amount of fixed markup, stuff that does not change, no 

19
00:00:56,056 --> 00:00:59,056
matter what the request is and then at runtime you interpolate 

20
00:00:59,059 --> 00:01:04,059
selective data into that view template. So, for example there 

21
00:01:04,064 --> 00:01:06,064
may be a generic template for displaying information about a 

22
00:01:06,066 --> 00:01:10,066
movie and then at runtime whichever specific movie is chosen 

23
00:01:10,070 --> 00:01:14,070
that information gets substituted in or interpolated in. So one 

24
00:01:14,074 --> 00:01:16,074
example is that you have a bunch of variables and the values of 

25
00:01:16,076 --> 00:01:20,076
those variables get instantiated into the code or into that 

26
00:01:20,080 --> 00:01:23,080
template of runtime. You might have little short bits of code 

27
00:01:23,083 --> 00:01:30,083
that are embedded in the template, and back in the olden days, 

28
00:01:30,090 --> 00:01:33,090
that was pretty much the whole app, right. If you look at 

29
00:01:33,093 --> 00:01:36,093
especially some of the earlier PHP apps, they start out being 

30
00:01:36,096 --> 00:01:39,096
HTML, HTML and then the little percent sign and then there is 

31
00:01:39,099 --> 00:01:43,099
some code and there is more HTML. Over time, what happened is 

32
00:01:43,103 --> 00:01:45,103
that the HTML became tiny and the code that got embedded in them 

33
00:01:45,105 --> 00:01:50,105
became huge, so this is not a great way to keep your app easily 

34
00:01:50,110 --> 00:01:54,110
manageable. So we are going to do it according to the model view 

35
00:01:54,114 --> 00:01:57,114
controller way of doing it. We are going to use a templating 

36
00:01:57,117 --> 00:02:00,117
system called HAML, which I will introduce you to momentarily, 

37
00:02:00,000 --> 00:02:04,120
and how do these template views really work if you follow MVC. 

38
00:02:04,124 --> 00:02:08,124
You take a templating language in which to express your HTML or 

39
00:02:08,128 --> 00:02:11,128
whatever templates you want and you take a closure. We have 

40
00:02:11,131 --> 00:02:13,131
already talked about closures. Now they are making a 

41
00:02:13,133 --> 00:02:16,133
reappearance. Closures are your friends. Why, because a closure 

42
00:02:16,136 --> 00:02:19,136
is an environment containing a bunch of state, including things 

43
00:02:19,139 --> 00:02:22,139
like variable values which you can then interpolate into your 

44
00:02:22,142 --> 00:02:26,142
view. In the case of Rails, there is a module of Rails called 

45
00:02:26,146 --> 00:02:29,146
action view module. It contains rendering logic that is able to 

46
00:02:29,149 --> 00:02:33,149
do this. It can combine fix markup that you provide with other 

47
00:02:33,153 --> 00:02:35,153
data that you interpolate. Basically what you do is you pass it 

48
00:02:35,155 --> 00:02:39,155
at closure and I am going to prove that to you in a moment, and 

49
00:02:39,159 --> 00:02:42,159
the output from the render is the final HTML page ready to serve 

50
00:02:42,162 --> 00:02:46,162
to the end user. There is another templating system, which is 

51
00:02:46,166 --> 00:02:48,166
actually the one that really comes standard with Rails that is 

52
00:02:48,168 --> 00:02:51,168
called ERB or embedded Ruby. We are not going to use it because 

53
00:02:51,171 --> 00:02:53,171
as you know, I have an obsession with putting the fewest number 

54
00:02:53,173 --> 00:02:57,173
of marks on the page to get something done and HAML does a much 

55
00:02:57,177 --> 00:03:00,177
better job at that as I will show in a moment, but ERB ships 

56
00:03:00,000 --> 00:03:04,180
with Ruby and essentially it is very much like PHP where by 

57
00:03:04,184 --> 00:03:07,184
default you put HTML content in there but you have got a way of 

58
00:03:07,187 --> 00:03:11,187
saying for this part of the content substitute the result of 

59
00:03:11,191 --> 00:03:13,191
running some Ruby code or interpolating the value of the 

60
00:03:13,193 --> 00:03:18,193
variable from Ruby. Again, alternatively whenever you make an 

61
00:03:18,198 --> 00:03:21,198
architectural choice you are ruling out some other choice. What 

62
00:03:21,201 --> 00:03:24,201
would you do if you were not doing template views? Well, another 

63
00:03:24,204 --> 00:03:26,204
possibility is you get a transform view which is only a bit more 

64
00:03:26,206 --> 00:03:29,206
radical. In transform view, you have a collection of information 

65
00:03:29,209 --> 00:03:32,209
which is going to say a closure that represents what you want to 

66
00:03:32,212 --> 00:03:38,212
display to the user and you have a bunch of data items and there 

67
00:03:38,218 --> 00:03:42,218
is really no intermediate template that they are filled in with. 

68
00:03:42,222 --> 00:03:45,222
For example, what would be a way that you might use this. 

69
00:03:45,225 --> 00:03:47,225
Suppose that what you’ re really doing is generating Jsigner or 

70
00:03:47,227 --> 00:03:50,227
XML, both of which we are going to learn about a little bit 

71
00:03:50,230 --> 00:03:52,230
later in the course, but there are other data representation 

72
00:03:52,232 --> 00:03:56,232
that are portable across applications and across networks. In 

73
00:03:56,236 --> 00:03:58,236
that case it does not really make sense to have a template that 

74
00:03:58,238 --> 00:04:00,238
a fill- in, what you are really doing is getting data in one 

75
00:04:00,000 --> 00:04:04,240
form, the way it is stored in the database and converting it or 

76
00:04:04,244 --> 00:04:07,244
serializing it into a different form like XML that you might 

77
00:04:07,247 --> 00:04:10,247
transmit to another service. So the idea of a template does not 

78
00:04:10,250 --> 00:04:12,250
really make sense in that case. It is a really more 

79
00:04:12,252 --> 00:04:15,252
transformation from one format to another, hence the name 

80
00:04:15,255 --> 00:04:18,255
transform view. So, in fact, we can use both, right. When we are 

81
00:04:18,258 --> 00:04:21,258
creating our apps and again thinking of the app is a collection 

82
00:04:21,261 --> 00:04:25,261
of services when a user interacts with it template view is used 

83
00:04:25,265 --> 00:04:28,265
because we want to provide the user with HTML pages with what a 

84
00:04:28,268 --> 00:04:32,268
human being can interact but when that same set of services is 

85
00:04:32,272 --> 00:04:34,272
accessed by another program. In other words, when we are 

86
00:04:34,274 --> 00:04:37,274
participating in a service- oriented architecture really we will 

87
00:04:37,277 --> 00:04:40,277
end up using something more like transform view so that we can 

88
00:04:40,280 --> 00:04:43,280
feed a transform version of the raw data back to some other 

89
00:04:43,283 --> 00:04:45,283
service and we will show examples of how you can sort of 

90
00:04:45,285 --> 00:04:48,285
trivially with a one line change make your controller method to 

91
00:04:48,288 --> 00:04:56,288
do double duty on those things. So the markup system that we 

92
00:04:56,296 --> 00:05:00,296
recommend using and that we sort of settled on for the exercises 

93
00:05:00,000 --> 00:05:04,300
in this course is called HAML. I think it stands for HTML 

94
00:05:04,304 --> 00:05:09,304
abstraction markup language, but the creator’ s name is really 

95
00:05:09,309 --> 00:05:11,309
similar to the acronym HAML, so you might look it up. It is 

96
00:05:11,311 --> 00:05:16,311
pretty interesting. I think of it as HTML on a diet. What are 

97
00:05:16,316 --> 00:05:20,316
some salient features of HAML compared to regular HTML. Well, 

98
00:05:20,320 --> 00:05:24,320
instead of HTML tags with angle brackets we use percent signs to 

99
00:05:24,324 --> 00:05:27,324
indicate the tags and instead of nesting the tags we use 

100
00:05:27,327 --> 00:05:30,327
indentation. So if you have programmed in Python, this should 

101
00:05:30,330 --> 00:05:33,330
look familiar. The indentation level tells you what the scope of 

102
00:05:33,333 --> 00:05:38,333
each tag is. So for example here I have a table. What is the 

103
00:05:38,338 --> 00:05:41,338
scope of the thead element. It is basically everything down to 

104
00:05:41,341 --> 00:05:44,341
this point because that is where the indentation level resumes 

105
00:05:44,344 --> 00:05:47,344
and the entire table goes all the way down to write before this 

106
00:05:47,347 --> 00:05:50,347
last line that says link_ to, right. So indentation is used to 

107
00:05:50,350 --> 00:05:55,350
indicate scope. What else we saw how the CSS attributes or the 

108
00:05:55,355 --> 00:05:58,355
HTML attributes class and ID are very heavily used for page 

109
00:05:58,358 --> 00:06:02,358
styling, so HAML gives you a nice shortcut where you are allowed 

110
00:06:02,362 --> 00:06:06,362
to put a dot and a CSS class on an element or you are allowed to 

111
00:06:06,366 --> 00:06:11,366
put a hash mark and a CSS ID on an element. You got ways to 

112
00:06:11,371 --> 00:06:16,371
interpolate code into the HTML or into the HAML in this case. 

113
00:06:16,376 --> 00:06:18,376
You can put a hyphen in front of a line which means execute this 

114
00:06:18,378 --> 00:06:21,378
code or you can put an equal sign in front of a line which means 

115
00:06:21,381 --> 00:06:24,381
substitute the result of running this code directly into the 

116
00:06:24,384 --> 00:06:28,384
template. So what is the difference between those? In this case, 

117
00:06:28,388 --> 00:06:31,388
movie. title, well I want to actually get back a string 

118
00:06:31,391 --> 00:06:35,391
representation of that and make that part of the page, whereas 

119
00:06:35,395 --> 00:06:38,395
in this line really all I am doing is starting a for loop, 

120
00:06:38,398 --> 00:06:41,398
right. I am starting an iteration. The iteration itself does not 

121
00:06:41,401 --> 00:06:44,401
have any output that is interesting to capture. So, it allows 

122
00:06:44,404 --> 00:06:47,404
you to do both, right. The hyphen means do not interpolate the 

123
00:06:47,407 --> 00:06:50,407
output just run the code. The equal sign is do interpolate the 

124
00:06:50,410 --> 00:06:54,410
output, and if the code overflows on to more than one line you 

125
00:06:54,414 --> 00:06:57,414
can use of vertical pipe symbol at the end to indicate that 

126
00:06:57,417 --> 00:07:00,417
there is more than one line of code. HAML makes it deliberately 

127
00:07:00,000 --> 00:07:03,420
awkward to view that because the real thing is you should not be 

128
00:07:03,423 --> 00:07:06,423
putting code in your views at all. The code really doesn’ t 

129
00:07:06,426 --> 00:07:09,426
belong in the part of the MVC whose job is to show information 

130
00:07:09,429 --> 00:07:12,429
to the user. The code belongs in the controllers in the model, 

131
00:07:12,432 --> 00:07:15,432
really mostly in the models. So HAML sort of goes out of its way 

132
00:07:15,435 --> 00:07:18,435
to do a little social engineering about this. It is deliberately 

133
00:07:18,438 --> 00:07:21,438
awkward to do a multi- line bit of code because it is trying to 

134
00:07:21,441 --> 00:07:24,441
send you a signal but that code really is somewhere where it 

135
00:07:24,444 --> 00:07:30,444
should not be. So did I say, do not put code in your views. Do 

136
00:07:30,450 --> 00:07:33,450
not put code in your views. So technically you are allowed to, 

137
00:07:33,453 --> 00:07:37,453
and in fact the multi- line mechanism in the HAML, you could put 

138
00:07:37,457 --> 00:07:41,457
an entire novels worth of Ruby code in their but MVC advocates 

139
00:07:41,461 --> 00:07:45,461
for a reason that views and controllers should each be thin. The 

140
00:07:45,465 --> 00:07:48,465
view has a limited function in life. It is to present 

141
00:07:48,468 --> 00:07:50,468
information to the user. If the view is operating or 

142
00:07:50,470 --> 00:07:53,470
manipulating that information, you should ask yourself why is it 

143
00:07:53,473 --> 00:07:57,473
doing that. If it is doing it because there is a new computation 

144
00:07:57,477 --> 00:08:00,477
over that information that turns out as interesting that may be 

145
00:08:00,000 --> 00:08:03,480
should be part of the model because what models do is manage the 

146
00:08:03,483 --> 00:08:06,483
way the information is stored or manipulated. If all you are 

147
00:08:06,486 --> 00:08:08,486
trying to do is make it look prettier. For example, if you want 

148
00:08:08,488 --> 00:08:11,488
to display a price and it is coming back as a floating point 

149
00:08:11,491 --> 00:08:13,491
number but you want to have a dollar sign and the right number 

150
00:08:13,493 --> 00:08:16,493
of decimal places, well there is something called helpers which 

151
00:08:16,496 --> 00:08:18,496
are basically a special place to put methods whose only function 

152
00:08:18,498 --> 00:08:22,498
in life is to help make things pretty for views. They are not 

153
00:08:22,502 --> 00:08:24,502
central to do model they are not central to any computations you 

154
00:08:24,504 --> 00:08:27,504
do on your data. They are only there so you do not have to put 

155
00:08:27,507 --> 00:08:29,507
clutter code into your view and helper should also be pretty 

156
00:08:29,509 --> 00:08:32,509
small. As I mentioned, there are also the embedded Ruby 

157
00:08:32,512 --> 00:08:35,512
templates. They look a lot more like PHP which all by itself is 

158
00:08:35,515 --> 00:08:38,515
a reason not to use them, but the real reason to use HAML is, it 

159
00:08:38,518 --> 00:08:41,518
is fewer marks on the page. It is easier to follow the 

160
00:08:41,521 --> 00:08:43,521
indentation. It is easier to debug and once you get used to it, 

161
00:08:43,523 --> 00:08:46,523
it like reading Haiku. You get hooked on the elegance part. I 

162
00:08:46,526 --> 00:08:48,526
recommend it. 


