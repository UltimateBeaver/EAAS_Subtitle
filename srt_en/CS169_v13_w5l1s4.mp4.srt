1
00:00:00,000 --> 00:00:04,000
Let me just make sure you understood that. Ben Bitdiddle says, " 

2
00:00:04,004 --> 00:00:08,004
Put arbitrary things in the session and it's that okay?" Yes and 

3
00:00:08,008 --> 00:00:12,008
you can do it? Yes but you shouldn't do it? No because you can't 

4
00:00:12,012 --> 00:00:16,012
generally arbitrary things in the hash? No because session isn't 

5
00:00:16,016 --> 00:00:18,016
really a hash, it just quacks like one until it's time to save 

6
00:00:18,018 --> 00:00:23,018
it between sessions and then it's not a hash anymore? We're 

7
00:00:23,023 --> 00:00:25,023
going to keep with the high octane mode today. There's enough 

8
00:00:25,025 --> 00:00:27,025
disagreement on this one that I think you should probably talk 

9
00:00:27,027 --> 00:00:30,027
it over for a minute. We're doing updated vote. We have 

10
00:00:30,030 --> 00:00:36,030
convergence on the ... I've seen green right? People, I think in 

11
00:00:36,036 --> 00:00:41,036
green? Good. Let's go through and understand why green is the 

12
00:00:41,041 --> 00:00:43,041
right answer. There were usually some votes for blue. Blue is a 

13
00:00:43,043 --> 00:00:47,043
plausible choice but I think green is a better choice. Here's 

14
00:00:47,047 --> 00:00:51,047
the reason. When I say session isn't really a hash, it just 

15
00:00:51,051 --> 00:00:53,051
quacks like one. Remember the whole point of duck typing is it 

16
00:00:53,053 --> 00:00:57,053
quacks like a duck. It's a freaking duck. Its fine that session 

17
00:00:57,057 --> 00:01:00,057
just quacks like a hash. You can indeed do everything to the 

18
00:01:00,000 --> 00:01:02,060
session you would expect to do to a hash, and the session will 

19
00:01:02,062 --> 00:01:04,062
not complain. You can abuse it, you can throw it against the 

20
00:01:04,064 --> 00:01:08,064
wall. The problem is that at that some point the session has to 

21
00:01:08,068 --> 00:01:10,068
be serialized. It's got to be saved so that they can be restored 

22
00:01:10,070 --> 00:01:14,070
on the next request. Now, it is absolutely the case as I said on 

23
00:01:14,074 --> 00:01:18,074
a couple of minutes ago. You could chose to store session data 

24
00:01:18,078 --> 00:01:22,078
in the database or store session data in a no SQL database. 

25
00:01:22,082 --> 00:01:25,082
If you do that you can make the session arbitrarily big. You 

26
00:01:25,085 --> 00:01:28,085
just got to make sure that the part of the session is persisted 

27
00:01:28,088 --> 00:01:30,088
in the cookie is not too large. That isn't a problem with the 

28
00:01:30,090 --> 00:01:33,090
session; it's a problem with the cookie mechanism. Some people 

29
00:01:33,093 --> 00:01:36,093
did different ways you can solve it. You can solve it by saying; 

30
00:01:36,096 --> 00:01:38,096
I'm going to put my sessions in the database that lets the 

31
00:01:38,098 --> 00:01:41,098
session object bigger. You could say I'm going to re- factor how 

32
00:01:41,101 --> 00:01:43,101
I think of my session. I'm going to create a new model to 

33
00:01:43,103 --> 00:01:46,103
represent the information I really care about. That model is 

34
00:01:46,106 --> 00:01:48,106
going to be persistent in the database just like all of their 

35
00:01:48,108 --> 00:01:51,108
models. My session is small because it only has to store like 

36
00:01:51,111 --> 00:01:54,111
the ID's of which model instance I care about. That's the more 

37
00:01:54,114 --> 00:01:57,114
elegant re- factor and then probably more likely to be restful 

38
00:01:57,117 --> 00:01:59,117
but it's not the only one. Indeed, green is the right answer 

39
00:01:59,119 --> 00:02:02,119
here. You can technically do it, but it's a bad idea because at 

40
00:02:02,122 --> 00:02:05,122
some point you'll probably end up shooting yourself in the foot. 

41
00:02:05,125 --> 00:02:09,125
You can indeed put arbitrary objects in the hash. The red answer 

42
00:02:09,129 --> 00:02:13,129
is not correct. Knock yourself out, no, don't. This is the time 

43
00:02:13,133 --> 00:02:16,133
to actually exercise summary strength. 


