1
00:00:00,000 --> 00:00:03,000
Moving right along. One of the things that we're changing this 

2
00:00:03,003 --> 00:00:05,003
time around in the class is we're going to introduce the idea of 

3
00:00:05,005 --> 00:00:09,005
testing much, much earlier and we're going to introduce the tool 

4
00:00:09,009 --> 00:00:11,009
that we're going to use for a lot of our testing called Rspec. 

5
00:00:11,011 --> 00:00:13,011
It actually is a descendant of some ideas that come from the 

6
00:00:13,013 --> 00:00:17,013
Java community. Here's a very smart gentleman who says, " 

7
00:00:17,017 --> 00:00:20,017
Debugging is twice as hard as writing code in the first place. 

8
00:00:20,020 --> 00:00:23,020
Therefore, if you write the code as cleverly as you can, by 

9
00:00:23,023 --> 00:00:26,023
definition, you're not smart enough to debug your own code." 

10
00:00:26,026 --> 00:00:29,026
Very smart man. In case, people don't recognize him, he's a 

11
00:00:29,029 --> 00:00:32,029
Turing Award winner, Brian Kernighan is the co- inventor of the 

12
00:00:32,032 --> 00:00:34,032
C language. You might have heard of it. It's one of the 

13
00:00:34,034 --> 00:00:37,034
languages named after famous letters of the alphabet. There's 

14
00:00:37,037 --> 00:00:40,037
another very smart gentleman who is influential in the history 

15
00:00:40,040 --> 00:00:44,040
of programming languages. This is Edgar Dijkstra who won the 

16
00:00:44,044 --> 00:00:47,044
Turing Award for his work on the importance of structured 

17
00:00:47,047 --> 00:00:50,047
programming. He's the author of a very famous missive called, " 

18
00:00:50,050 --> 00:00:53,050
Go To Statement Considered Harmful from Back in the Elder Days," 

19
00:00:53,053 --> 00:00:57,053
and he says that, " Testing can never demonstrate the something 

20
00:00:57,057 --> 00:01:00,057
of errors in software, only their something else." Anybody know 

21
00:01:00,000 --> 00:01:05,060
what the blanks are? Absences and presence. Testing can 

22
00:01:05,065 --> 00:01:07,065
demonstrate that you've got bugs, but it cannot demonstrate that 

23
00:01:07,067 --> 00:01:11,067
you are free of bugs. I think an even more pragmatic version of 

24
00:01:11,071 --> 00:01:14,071
this that if you ... Any of you have ever visited a Google 

25
00:01:14,074 --> 00:01:17,074
campus, you may have seen this. Debugging sucks, Testing rocks. 

26
00:01:17,077 --> 00:01:21,077
After three years of doing it myself, I could not agree more. My 

27
00:01:21,081 --> 00:01:23,081
goal by the end of this class is you will love testing. You will 

28
00:01:23,083 --> 00:01:26,083
love big brother. I mean, testing. You'll love it so much ... 

29
00:01:26,086 --> 00:01:29,086
You'll love it so much that just like you get that little 

30
00:01:29,089 --> 00:01:32,089
dopamine surge when you get a Facebook message or a text, you 

31
00:01:32,092 --> 00:01:35,092
will get a little dopamine surge when you see a test go from 

32
00:01:35,095 --> 00:01:40,095
failing to passing. Believe it. In fact, as recently as 2010. 

33
00:01:40,100 --> 00:01:46,100
There were surveys done that showed that a big problem with 

34
00:01:46,106 --> 00:01:49,106
problems in finding major bugs in software didn't have to do 

35
00:01:49,109 --> 00:01:51,109
with the quality of the code, but it had to do with the problems 

36
00:01:51,111 --> 00:01:54,111
about the testing process. The way that testing was instituted 

37
00:01:54,114 --> 00:01:57,114
in the organization. My other goal is to make sure that when you 

38
00:01:57,117 --> 00:02:00,117
come out of this class, you have none of these bad habits and 

39
00:02:00,000 --> 00:02:03,120
that your habits about testing reflect best practices now. 

40
00:02:03,123 --> 00:02:07,123
Testing is way more fun that it used to be. What is testing like 

41
00:02:07,127 --> 00:02:10,127
today? Well, we could start with what it used to be like. 

42
00:02:10,130 --> 00:02:12,130
Before, when developers had finished the code, they throw it 

43
00:02:12,132 --> 00:02:15,132
over the wall to the QA Department and then the QA staff will 

44
00:02:15,135 --> 00:02:18,135
sort of manually exercise the software, they would poke at it 

45
00:02:18,138 --> 00:02:20,138
and then after awhile, they would sign off, looks good, then it 

46
00:02:20,140 --> 00:02:24,140
would ship and there'd be a ton of bugs. Today, it's quite 

47
00:02:24,144 --> 00:02:26,144
different. First of all, testing is part of every iteration. 

48
00:02:26,146 --> 00:02:29,146
You're always testing. In fact, you actually will start out 

49
00:02:29,149 --> 00:02:32,149
thinking before you write your code, you're thinking already 

50
00:02:32,152 --> 00:02:35,152
about how could I test this as I write it. You test your own 

51
00:02:35,155 --> 00:02:38,155
code, developers test their own code. There's a lot of 

52
00:02:38,158 --> 00:02:42,158
automation. The idea that testing is manual is almost obsolete. 

53
00:02:42,162 --> 00:02:45,162
There's extremely few cases where you cannot automate some test 

54
00:02:45,165 --> 00:02:47,165
that you would normally have performed manually and this is a 

55
00:02:47,167 --> 00:02:50,167
very big insight that saves you a lot of grief. Does that mean 

56
00:02:50,170 --> 00:02:53,170
that there's no role for a QA group or a testing group? There 

57
00:02:53,173 --> 00:02:55,173
absolutely is a role, but they don't write tests. That's not 

58
00:02:55,175 --> 00:02:58,175
what they do. They're like consultants who help you make your 

59
00:02:58,178 --> 00:03:01,178
code more testable and who improve the tools and the processes 

60
00:03:01,181 --> 00:03:04,181
of the company wide around testing. There's kind of a famous 

61
00:03:04,184 --> 00:03:07,184
figure that several years ago was floating around that Microsoft 

62
00:03:07,187 --> 00:03:11,187
said that for every test ... For every developer they had one 

63
00:03:11,191 --> 00:03:13,191
testing. There was a one to one ratio between developers and 

64
00:03:13,193 --> 00:03:17,193
testers and around last year, I asked some colleagues at Google, 

65
00:03:17,197 --> 00:03:20,197
what is that ratio at Google? How many testers per developer do 

66
00:03:20,200 --> 00:03:23,200
you have and they said, " It's about for every 10 developers 

67
00:03:23,203 --> 00:03:26,203
maybe, we've got one tester." Jaw drops to floor. Google, you 

68
00:03:26,206 --> 00:03:30,206
know, the home of reliable code that powers hundreds of millions 

69
00:03:30,210 --> 00:03:34,210
of people's web activities. It turns out that the testing 

70
00:03:34,214 --> 00:03:37,214
engineers at Google don't write tests. That's the job of the 

71
00:03:37,217 --> 00:03:40,217
people who write the code. The testing engineers make the 

72
00:03:40,220 --> 00:03:43,220
testing environment better. It's a really different view on 

73
00:03:43,223 --> 00:03:46,223
division of labor and the message is that software quality now 

74
00:03:46,226 --> 00:03:49,226
is not just the result of one specific group saying we're the QA 

75
00:03:49,229 --> 00:03:52,229
group. It's the process. The process has to involve developers 

76
00:03:52,232 --> 00:03:56,232
in the very beginning. The big picture of how we're going to do 

77
00:03:56,236 --> 00:04:00,236
testing is BDD and TDD which is Behavior- driven design, Test- 

78
00:04:00,000 --> 00:04:02,240
driven development. They actually are quite parallel to each 

79
00:04:02,242 --> 00:04:05,242
other. Behavior- driven design says you sit down with the user 

80
00:04:05,245 --> 00:04:08,245
and you develop stories and we're going to call those the 

81
00:04:08,248 --> 00:04:10,248
features you wish you had. That's how you wish the app would 

82
00:04:10,250 --> 00:04:14,250
work but you haven't written that code yet. As we'll see, using 

83
00:04:14,254 --> 00:04:17,254
the tool called Cucumber, those stories actually become runnable 

84
00:04:17,257 --> 00:04:21,257
acceptance tests for your app. Remarkable. Now, once you've got 

85
00:04:21,261 --> 00:04:24,261
a story for the feature you wish you had. The next thing you do 

86
00:04:24,264 --> 00:04:27,264
is you think about okay, how do I write the code to implement 

87
00:04:27,267 --> 00:04:32,267
that feature and the way I do that is I've specified in my user 

88
00:04:32,272 --> 00:04:35,272
stories the steps that my app has to go through to implement 

89
00:04:35,275 --> 00:04:38,275
that feature and for each one of those steps, I'm going to write 

90
00:04:38,278 --> 00:04:41,278
tests for the code that I wish I had. I'm going from a feature I 

91
00:04:41,281 --> 00:04:44,281
wish I had to the code I wish I had. What does this look like? 

92
00:04:44,284 --> 00:04:50,284
Well, we start out with a Cucumber user story in which the very 

93
00:04:50,290 --> 00:04:53,290
first step of the story immediately fails, because it's asking 

94
00:04:53,293 --> 00:04:56,293
to exercise functionality that by definition doesn't exist. As 

95
00:04:56,296 --> 00:04:58,296
we start to think about that functionality, we think how we're 

96
00:04:58,298 --> 00:05:01,298
going to write the code. We start by writing tests for the code 

97
00:05:01,301 --> 00:05:04,301
before we have the code. Of course, the test fails. It would be 

98
00:05:04,304 --> 00:05:07,304
really cool if the test pass without having the code there. Our 

99
00:05:07,307 --> 00:05:09,307
lives would be much easier. But that doesn't happen. We have to 

100
00:05:09,309 --> 00:05:13,309
work on creating the code until that test passes. It goes from 

101
00:05:13,313 --> 00:05:16,313
red to green. Once we've done that, with some point, we've 

102
00:05:16,316 --> 00:05:19,316
implemented enough code that that entire step of the story is 

103
00:05:19,319 --> 00:05:22,319
now green and passing. Now we go to the second step of the story 

104
00:05:22,322 --> 00:05:25,322
and that's how we do it. We do this loop several times until 

105
00:05:25,325 --> 00:05:28,325
we've implemented the entire feature and then we check it off 

106
00:05:28,328 --> 00:05:29,328
and we deliver it to the customer. 


